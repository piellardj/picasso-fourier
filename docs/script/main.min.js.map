{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/point.ts","webpack:///./src/ts/presets.ts","webpack:///./src/ts/log.ts","webpack:///./src/ts/stopwatch.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/canvas-2d.ts","webpack:///./src/ts/clock.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/user-input.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EMode","controlId","PRESET","MODE","SPEED","PERSISTENCE","SMOOTH","CLOSE_LOOP","REPEAT","RESET","DISPLAY_CIRCLES","DISPLAY_SEGMENTS","DISPLAY_CURVE","DISPLAY_ORIGINAL_CURVE","ORDER","INDICATOR","DOWNLOAD","callObservers","observersList","observer","preset","observers","clear","redraw","speedChange","presetChange","download","tryParsePreset","previousValue","parseAndApplyMode","newModes","length","newMode","isInstant","INSTANT","Controls","setVisibility","Picker","addObserver","getValue","Tabs","getValues","speed","Range","previous","persistence","Checkbox","isChecked","checked","smooth","closeLoop","PROGRESSIVE","repeat","Button","displayCircles","displaySegments","displayCurve","displayOriginalCurve","order","updateIndicatorVisibility","visible","Canvas","setIndicatorsVisibility","setCustomPreset","setValue","EPreset","CUSTOM","this","isProgressiveMode","Parameters","interpolate","p1","p2","x","y","distance","dX","dY","Math","sqrt","equals","copy","point","Point","PRESET_SIZE","getPreset","wantedSize","callback","stopwatch","StopWatch","fromCache","safelyCallCallback","points","scaling","min","offsetX","offsetY","push","Log","message","milliseconds","Presets","cache","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","canvasSize","center","text","split","partial","enabled","setEnabled","e","console","log","start","performance","now","ceil","setOrderIndicator","round","setIndicatorText","toLocaleString","canvas2D","Canvas2D","context","lineWidth","downloadObservers","drawing","fourier","clock","Clock","needToRestart","clearObservers","UserInput","finishedAcquisitionCallbacks","isValid","showLoader","recordedPath","getSize","needToRedraw","redrawObservers","loopDuration","loadPoints","LineDrawing","computeFourierSeries","reset","loadPreset","presetObservers","Observers","canvasResize","requestAnimationFrame","mainLoop","isRecording","strokeStyle","drawCurrentPath","current","maxT","originalPathDuration","finishedLoop","isPaused","resume","pause","resetCurve","adjustSize","previousWidth","draw","drawCirclesToPoint","drawCurve","drawSegmentsToPoint","drawCurvePartialOrder","floor","main","TWO_PI","PI","canvasElementId","isDrawingLine","nbPointsInLine","canvas","document","getElementById","getContext","width","clientWidth","height","clientHeight","clearRect","drawCircle","radius","beginPath","arc","closePath","stroke","startLine","endLine","addPointToLine","moveTo","lineTo","filename","msToBlob","blob","window","navigator","msSaveBlob","toBlob","link","createElement","href","URL","createObjectURL","click","paused","lastCheckpoint","clockTime","realTime","speedChangeObservers","setSpeed","createCheckpoint","originalPathLength","totalPathLength","firstPoint","lastPoint","pathLength","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","nbSteps","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","coefficients","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","phase","atan2","FourierSeries","applyCoefficient","coefficient","currentPhase","applyCoefficientsArray","totalLength","partialCurve","partialCurveOrder","Error","sort","a","b","absA","abs","absB","curveStepSize","curvePrecision","computePartialCurve","f","interpolatedPoint","additionalCoefficients","getCoefficients","localT","missingCoefficients","currentPointIndex","nextPointIndex","neededCoefficients","orderFrom","orderTo","firstIndex","max","lastIndex","slice","currentPoints","isRecordingUserInput","getMousePosition","mousePosition","mouseDown","currentPosition","mouseUp","mouseMove"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import { EPreset } from \"./presets\";\r\n\r\ndeclare const Button: any;\r\ndeclare const Canvas: any;\r\ndeclare const Checkbox: any;\r\ndeclare const Controls: any;\r\n// declare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\ndeclare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRESET: \"preset-picker-id\",\r\n    MODE: \"mode-picker-id\",\r\n    SPEED: \"speed-range-id\",\r\n    PERSISTENCE: \"persistence-checkbox-id\",\r\n    SMOOTH: \"smooth-checkbox-id\",\r\n    CLOSE_LOOP: \"close-loop-checkbox-id\",\r\n    REPEAT: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n    INDICATOR: \"indicator-checkbox-id\",\r\n    DOWNLOAD: \"download-button-id\",\r\n};\r\n\r\nenum EMode {\r\n    INSTANT = \"0\",\r\n    PROGRESSIVE = \"1\",\r\n}\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\ntype SpeedObserver = (previousSpeed: number) => void;\r\n\r\nfunction callObservers(observersList: GenericObserver[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: SpeedObserver[];\r\n    presetChange: GenericObserver[];\r\n    download: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n    presetChange: [],\r\n    download: [],\r\n};\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet preset: EPreset;\r\nfunction tryParsePreset(p: string): void {\r\n    const previousValue = preset;\r\n    preset = p as EPreset;\r\n\r\n    if (preset !== previousValue) {\r\n        callObservers(observers.presetChange);\r\n    }\r\n}\r\nPicker.addObserver(controlId.PRESET, tryParsePreset);\r\ntryParsePreset(Picker.getValue(controlId.PRESET));\r\n\r\nlet mode: EMode;\r\nfunction parseAndApplyMode(newModes: string[]): void {\r\n    if (newModes.length !== 1) {\r\n        return;\r\n    }\r\n\r\n    const newMode = newModes[0] as EMode;\r\n    if (newMode !== mode) {\r\n        mode = newMode;\r\n\r\n        const isInstant = (mode === EMode.INSTANT);\r\n        Controls.setVisibility(controlId.SMOOTH, !isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_CIRCLES, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_SEGMENTS, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_CURVE, isInstant);\r\n\r\n        callObservers(observers.clear);\r\n    }\r\n}\r\nparseAndApplyMode(Tabs.getValues(controlId.MODE));\r\nTabs.addObserver(controlId.MODE, parseAndApplyMode);\r\n\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    const previous = speed;\r\n    speed = s;\r\n\r\n    for (const observer of observers.speedChange) {\r\n        observer(previous);\r\n    }\r\n});\r\n\r\nlet persistence: boolean = Checkbox.isChecked(controlId.PERSISTENCE);\r\nCheckbox.addObserver(controlId.PERSISTENCE, (checked: boolean) => {\r\n    persistence = checked;\r\n});\r\n\r\nlet smooth: boolean = Checkbox.isChecked(controlId.SMOOTH);\r\nCheckbox.addObserver(controlId.SMOOTH, (checked: boolean) => {\r\n    smooth = checked;\r\n});\r\n\r\nlet closeLoop: boolean = Checkbox.isChecked(controlId.CLOSE_LOOP);\r\nCheckbox.addObserver(controlId.CLOSE_LOOP, (checked: boolean) => {\r\n    closeLoop = checked;\r\n\r\n    if (mode === EMode.PROGRESSIVE) {\r\n        callObservers(observers.clear);\r\n    }\r\n});\r\n\r\nlet repeat: boolean = Checkbox.isChecked(controlId.REPEAT);\r\nCheckbox.addObserver(controlId.REPEAT, (checked: boolean) => {\r\n    repeat = checked;\r\n});\r\n\r\nButton.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\nfunction updateIndicatorVisibility(): void {\r\n    const visible = Checkbox.isChecked(controlId.INDICATOR);\r\n    Canvas.setIndicatorsVisibility(visible);\r\n}\r\nupdateIndicatorVisibility();\r\nCheckbox.addObserver(controlId.INDICATOR, updateIndicatorVisibility);\r\n\r\nButton.addObserver(controlId.DOWNLOAD, () => callObservers(observers.download));\r\n\r\n/* === INTERFACE ====================================================== */\r\n/**\r\n * Class giving access to all the parameters of the application. Also gives access to event handlers.\r\n */\r\nclass Parameters {\r\n    public static get preset(): EPreset {\r\n        return preset;\r\n    }\r\n    public static setCustomPreset(): void {\r\n        Picker.setValue(controlId.PRESET, null);\r\n        preset = EPreset.CUSTOM;\r\n        callObservers(observers.presetChange);\r\n    }\r\n\r\n    public static get isProgressiveMode(): boolean {\r\n        return mode === EMode.PROGRESSIVE;\r\n    }\r\n\r\n    public static get speed(): number {\r\n        if (this.isProgressiveMode) {\r\n            return 0.1 * speed;\r\n        }\r\n        return speed;\r\n    }\r\n\r\n    public static get persistence(): boolean {\r\n        return persistence;\r\n    }\r\n\r\n    public static get smooth(): boolean {\r\n        return smooth;\r\n    }\r\n\r\n    public static get closeLoop(): boolean {\r\n        return closeLoop;\r\n    }\r\n\r\n    public static get repeat(): boolean {\r\n        return repeat;\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return mode === EMode.INSTANT && displayCircles;\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return mode === EMode.INSTANT && displaySegments;\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return mode === EMode.INSTANT && displayCurve;\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): SpeedObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n    public static get presetObservers(): GenericObserver[] {\r\n        return observers.presetChange;\r\n    }\r\n    public static get downloadObservers(): GenericObserver[] {\r\n        return observers.download;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","/**\r\n * Simple data class representing a 2D point.\r\n */\r\nclass Point {\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public static interpolate(p1: Point, p2: Point, t: number): Point {\r\n        return {\r\n            x: p1.x * (1 - t) + p2.x * t,\r\n            y: p1.y * (1 - t) + p2.y * t,\r\n        };\r\n    }\r\n\r\n    public static distance(p1: Point, p2: Point): number {\r\n        const dX = p1.x - p2.x;\r\n        const dY = p1.y - p2.y;\r\n        return Math.sqrt(dX * dX + dY * dY);\r\n    }\r\n\r\n    public static equals(p1: Point, p2: Point): boolean {\r\n        return p1.x === p2.x && p1.y === p2.y;\r\n    }\r\n\r\n    public static copy(point: Point): Point {\r\n        return {\r\n            x: point.x,\r\n            y: point.y,\r\n        };\r\n    }\r\n\r\n    public x: number;\r\n    public y: number;\r\n}\r\n\r\nexport {\r\n    Point,\r\n};\r\n","import * as Log from \"./log\";\r\nimport { Point } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\n\r\n/* Enum values must match the values of the controls */\r\nenum EPreset {\r\n    ARLEQUIN1 = \"arlequin1\",\r\n    ARLEQUIN2 = \"arlequin2\",\r\n    BULL = \"bull\",\r\n    CAMEL = \"camel\",\r\n    CUSTOM = \"<none>\", // not available via interface\r\n    DOG = \"dog\",\r\n    DOVE = \"dove\",\r\n    FLAMINGO = \"flamingo\",\r\n    HORSE = \"horse\",\r\n    MOUSE = \"mouse\",\r\n    PENGUIN = \"penguin\",\r\n    WOMAN1 = \"woman1\",\r\n    WOMAN2 = \"woman2\",\r\n}\r\n\r\nconst PRESET_SIZE = 512; // a preset should be dimensionned for a 512 x 512 canvas\r\n\r\n/**\r\n * Class for retrieving on demand the preset drawings with AJAX requests.\r\n * Tries to minimize the request by using a memory cache.\r\n */\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, wantedSize: number[], callback: (array: Point[]) => any): void {\r\n        const stopwatch = new StopWatch();\r\n        let fromCache = false;\r\n\r\n        function safelyCallCallback(points: Point[]): void {\r\n            const scaling = Math.min(wantedSize[0] / PRESET_SIZE, wantedSize[1] / PRESET_SIZE);\r\n            const offsetX = 0.5 * (wantedSize[0] - PRESET_SIZE * scaling);\r\n            const offsetY = 0.5 * (wantedSize[1] - PRESET_SIZE * scaling);\r\n\r\n            /* Create a deep copy to keep the cache clean */\r\n            const copy: Point[] = [];\r\n            for (const point of points) {\r\n                copy.push({\r\n                    x: point.x * scaling + offsetX,\r\n                    y: point.y * scaling + offsetY,\r\n                });\r\n            }\r\n\r\n            if (fromCache) {\r\n                Log.message(`Retrieved preset '${preset}' from cache in ${stopwatch.milliseconds} ms`);\r\n            } else {\r\n                Log.message(`Downloaded preset '${preset}' in ${stopwatch.milliseconds} ms.`);\r\n            }\r\n\r\n            callback(copy);\r\n        }\r\n\r\n        if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            fromCache = true;\r\n            safelyCallCallback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"readystatechange\", () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray !== null) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    safelyCallCallback(Presets.cache[preset]);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open(\"GET\", `resources/${preset}.txt`);\r\n        xhr.send();\r\n    }\r\n\r\n    public static setCustomPreset(points: Point[], canvasSize: number[]): void {\r\n        // Scale path to a PRESET_SIZE*PRESET_SIZE canvas.\r\n        // Depending on canvas aspect ratio it may not fit but it doesn't matter\r\n        const center: Point = {\r\n            x: 0.5 * canvasSize[0],\r\n            y: 0.5 * canvasSize[1],\r\n        };\r\n\r\n        const scaling = PRESET_SIZE / Math.min(canvasSize[0], canvasSize[1]);\r\n\r\n        for (const point of points) {\r\n            point.x = 0.5 * PRESET_SIZE + (point.x - center.x) * scaling;\r\n            point.y = 0.5 * PRESET_SIZE + (point.y - center.y) * scaling;\r\n        }\r\n\r\n        Presets.cache[EPreset.CUSTOM] = points;\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: Point[];\r\n    } = {};\r\n\r\n    private static tryParsePointsArray(text: string): Point[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const stopwatch = new StopWatch();\r\n\r\n        const points: Point[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        Log.message(`Parsed preset in ${stopwatch.milliseconds} ms.`);\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n","let enabled = true;\r\n\r\nfunction setEnabled(e: boolean): void {\r\n    enabled = e;\r\n}\r\n\r\nfunction message(m: string): void {\r\n    if (enabled) {\r\n        console.log(m);\r\n    }\r\n}\r\n\r\nexport {\r\n    setEnabled,\r\n    message,\r\n};\r\n","/**\r\n * Class for measuring execution performance.\r\n */\r\nclass StopWatch {\r\n    private readonly start: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.start = performance.now();\r\n    }\r\n\r\n    public get milliseconds(): number {\r\n        return Math.ceil(performance.now() - this.start);\r\n    }\r\n}\r\n\r\nexport {\r\n    StopWatch,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Clock } from \"./clock\";\r\nimport { FourierSeries } from \"./fourier-series\";\r\nimport { LineDrawing } from \"./line-drawing\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point } from \"./point\";\r\nimport { Presets } from \"./presets\";\r\nimport { TimeUnit } from \"./units\";\r\nimport * as UserInput from \"./user-input\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction setOrderIndicator(value: number): void {\r\n    value = Math.round(100 * value) / 100; // 2 digits max\r\n    Canvas.setIndicatorText(\"fourier-order\", value.toLocaleString());\r\n}\r\n\r\nfunction main(): void {\r\n    const canvas2D = new Canvas2D(\"canvas\");\r\n    const context = canvas2D.context;\r\n    context.lineWidth = 1;\r\n\r\n    Parameters.downloadObservers.push(() => canvas2D.download(\"picasso-fourier.png\"));\r\n\r\n    let drawing: LineDrawing = null;\r\n    let fourier: FourierSeries = null;\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n    UserInput.finishedAcquisitionCallbacks.push((isValid: boolean) => {\r\n        if (isValid) {\r\n            drawing = null;\r\n            fourier = null;\r\n            Canvas.showLoader(true);\r\n\r\n            Presets.setCustomPreset(UserInput.recordedPath, Canvas.getSize());\r\n            Parameters.setCustomPreset();\r\n        }\r\n        needToRedraw = true;\r\n    });\r\n\r\n    let needToRedraw = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    const loopDuration = 2000; // milliseconds, at normal speed\r\n    function mainLoop(): void {\r\n        if (UserInput.isRecording()) {\r\n            canvas2D.clear();\r\n            context.strokeStyle = \"white\";\r\n            UserInput.drawCurrentPath(canvas2D);\r\n        } else if (drawing !== null && fourier !== null) { // checks that preset is loaded\r\n            let t: TimeUnit = clock.current / loopDuration;\r\n            const maxT: TimeUnit = Parameters.closeLoop ? 1 : drawing.originalPathDuration;\r\n            let finishedLoop = (t >= maxT);\r\n\r\n            if (!finishedLoop && clock.isPaused) {\r\n                clock.resume();\r\n            }\r\n\r\n            t = Math.min(t, maxT);\r\n\r\n            if (finishedLoop) {\r\n                if (Parameters.repeat) {\r\n                    needToRestart = true;\r\n                } else {\r\n                    clock.pause();\r\n                }\r\n            }\r\n\r\n            if (needToRestart) {\r\n                needToRestart = false;\r\n                clock.reset();\r\n                fourier.resetCurve();\r\n                t = 0;\r\n                finishedLoop = false;\r\n                setOrderIndicator(Parameters.order);\r\n                canvas2D.clear();\r\n            }\r\n\r\n            if (needToRedraw) {\r\n                canvas2D.adjustSize();\r\n\r\n                if (!Parameters.persistence) {\r\n                    canvas2D.clear();\r\n                }\r\n\r\n                if (Parameters.displayOriginalCurve) {\r\n                    context.strokeStyle = \"rgb(0,128,0)\";\r\n                    const previousWidth = context.lineWidth;\r\n                    context.lineWidth = 2;\r\n\r\n                    drawing.draw(canvas2D, Parameters.isProgressiveMode ? maxT : t);\r\n\r\n                    context.lineWidth = previousWidth;\r\n                }\r\n\r\n                if (Parameters.displayCircles) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"rgba(255,255,255,0.3)\";\r\n                    fourier.drawCirclesToPoint(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displayCurve) {\r\n                    context.strokeStyle = \"white\";\r\n                    fourier.drawCurve(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displaySegments) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,0,0,0.01)\" : \"red\";\r\n                    fourier.drawSegmentsToPoint(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.isProgressiveMode) {\r\n                    let order = Parameters.order * t / maxT;\r\n\r\n                    if (!Parameters.persistence) {\r\n                        context.strokeStyle = \"white\";\r\n                    } else if (Parameters.smooth) {\r\n                        context.strokeStyle = \"rgba(255,255,255,0.01)\";\r\n                    } else {\r\n                        context.strokeStyle = \"rgba(255,255,255,0.03)\";\r\n                    }\r\n\r\n                    if (!Parameters.smooth) {\r\n                        order = Math.floor(order);\r\n                        fourier.drawCurve(canvas2D, order, maxT);\r\n                    } else {\r\n                        fourier.drawCurvePartialOrder(canvas2D, order, maxT);\r\n                    }\r\n\r\n                    setOrderIndicator(order);\r\n                }\r\n            }\r\n\r\n            needToRedraw = !finishedLoop && Parameters.speed > 0;\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    function loadPoints(points: Point[]): void {\r\n        drawing = new LineDrawing(points);\r\n        fourier = drawing.computeFourierSeries(300 + 1); // one more to avoid out of bounds exceptions\r\n        needToRestart = true;\r\n        clock.reset();\r\n        Canvas.showLoader(false);\r\n    }\r\n\r\n    function loadPreset(): void {\r\n        drawing = null;\r\n        fourier = null;\r\n\r\n        const canvasSize: number[] = Canvas.getSize();\r\n        Canvas.showLoader(true);\r\n        Presets.getPreset(Parameters.preset, canvasSize, loadPoints);\r\n    }\r\n\r\n    Parameters.presetObservers.push(loadPreset);\r\n    Canvas.Observers.canvasResize.push(loadPreset);\r\n\r\n    loadPreset();\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","import { Point } from \"./point\";\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Class for instancing and using a 2D HTML Canvas.\r\n */\r\nclass Canvas2D {\r\n    public readonly context: CanvasRenderingContext2D;\r\n\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private isDrawingLine: boolean = false;\r\n    private nbPointsInLine: number = 0;\r\n\r\n    public constructor(canvasElementId: string) {\r\n        this.canvas = document.getElementById(canvasElementId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext(\"2d\");\r\n    }\r\n\r\n    public adjustSize(): void {\r\n        if (this.canvas.width !== this.canvas.clientWidth || this.canvas.height !== this.canvas.clientHeight) {\r\n            this.canvas.width = this.canvas.clientWidth;\r\n            this.canvas.height = this.canvas.clientHeight;\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    public drawCircle(center: Point, radius: number): void {\r\n        if (radius > 0.5) {\r\n            this.context.beginPath();\r\n            this.context.arc(center.x, center.y, radius, 0, TWO_PI);\r\n            this.context.closePath();\r\n            this.context.stroke();\r\n        }\r\n    }\r\n\r\n    public startLine(): void {\r\n        if (this.isDrawingLine) {\r\n            this.endLine();\r\n        }\r\n\r\n        this.context.beginPath();\r\n        this.isDrawingLine = true;\r\n        this.nbPointsInLine = 0;\r\n    }\r\n\r\n    public addPointToLine(point: Point): void {\r\n        if (this.nbPointsInLine === 0) {\r\n            this.context.moveTo(point.x, point.y);\r\n        } else {\r\n            this.context.lineTo(point.x, point.y);\r\n        }\r\n\r\n        this.nbPointsInLine++;\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.isDrawingLine) {\r\n            this.context.stroke();\r\n            this.context.closePath();\r\n            this.isDrawingLine = false;\r\n        }\r\n    }\r\n\r\n    public download(filename: string): void {\r\n        if ((this.canvas as any).msToBlob) { // for IE\r\n            const blob = (this.canvas as any).msToBlob();\r\n            window.navigator.msSaveBlob(blob, filename);\r\n        } else {\r\n            this.canvas.toBlob((blob: Blob | null) => {\r\n                if (blob !== null) {\r\n                    const link = document.createElement(\"a\");\r\n                    link.download = filename;\r\n                    link.href = URL.createObjectURL(blob);\r\n                    link.click();\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Canvas2D,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\n\r\ninterface IClockCheckpoint {\r\n    clockTime: DOMHighResTimeStamp; // in the clock temporality\r\n    realTime: DOMHighResTimeStamp; // in the Javascript temporality\r\n}\r\n\r\n/**\r\n * This class handles the measuring of time at a variable speed.\r\n */\r\nclass Clock {\r\n    private speed: number;\r\n    private paused: boolean;\r\n\r\n    /* This checkpoint system is used to avoid floating point approximations when computing current time. */\r\n    private lastCheckpoint: IClockCheckpoint;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        this.paused = false;\r\n        this.lastCheckpoint = {\r\n            clockTime: 0,\r\n            realTime: 0,\r\n        };\r\n\r\n        Parameters.speedChangeObservers.push(() => this.setSpeed(Parameters.speed));\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.paused = false;\r\n        this.lastCheckpoint.clockTime = 0;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n        this.setSpeed(Parameters.speed);\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.createCheckpoint();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = true;\r\n        }\r\n    }\r\n\r\n    public resume(): void {\r\n        if (this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = false;\r\n        }\r\n    }\r\n\r\n    public get isPaused(): boolean {\r\n        return this.paused;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        if (this.paused) {\r\n            return this.lastCheckpoint.clockTime;\r\n        }\r\n\r\n        return this.lastCheckpoint.clockTime + this.speed * (performance.now() - this.lastCheckpoint.realTime);\r\n    }\r\n\r\n    private createCheckpoint(): void {\r\n        this.lastCheckpoint.clockTime = this.current;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n    }\r\n}\r\n\r\nexport {\r\n    Clock,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport * as Log from \"./log\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\n/**\r\n * Represents a 2D line parametrized by a 1D input.\r\n * The line is 1-periodic: [0,1] -> RxR.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass LineDrawing {\r\n    public readonly pathLength: SpaceUnit; // Length of the total path in space-units\r\n    public readonly originalPathDuration: TimeUnit; // Length of the original path in time-units\r\n    private readonly points: Point[];\r\n\r\n    /**\r\n     * Builds a LineDrawing from the input points.\r\n     * If the input is not periodic, then we extend it with a last point to make the LineDrawing periodic.\r\n     */\r\n    public constructor(points: Point[]) {\r\n        this.points = points;\r\n\r\n        let originalPathLength: SpaceUnit = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            originalPathLength += Point.distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        let totalPathLength: SpaceUnit = originalPathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (!Point.equals(firstPoint, lastPoint)) {\r\n            totalPathLength += Point.distance(lastPoint, firstPoint);\r\n            this.points.push(Point.copy(firstPoint));\r\n        }\r\n\r\n        this.pathLength = totalPathLength;\r\n        this.originalPathDuration = originalPathLength / totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Draws the line portion between 0 and t.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public draw(canvas: Canvas2D, t: TimeUnit): void {\r\n        const desiredLength: SpaceUnit = t * this.pathLength;\r\n        let currentLength: SpaceUnit = 0;\r\n\r\n        canvas.startLine();\r\n        canvas.addPointToLine(this.points[0]);\r\n\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = Point.distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                canvas.addPointToLine(nextPoint);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = Point.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                canvas.addPointToLine(finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const stopwatch = new StopWatch();\r\n\r\n        const nbSteps = Math.ceil(Parameters.integrationPrecision * this.pathLength);\r\n        const stepSize = this.pathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = Point.distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = Point.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        Log.message(`Computed ${order} Fourier coefficient with ${nbSteps} integration steps ` +\r\n            `in ${stopwatch.milliseconds} ms.`);\r\n        return new FourierSeries(coefficients, this.pathLength);\r\n    }\r\n}\r\n\r\nexport {\r\n    LineDrawing,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point} from \"./point\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Modifies the point given as argument by applying to it the provided Fourier Coefficient at the provided location.\r\n */\r\nfunction applyCoefficient(point: Point, coefficient: IFourierCoefficient, t: TimeUnit): void {\r\n    const currentPhase = TWO_PI * t * coefficient.n + coefficient.phase;\r\n    point.x += coefficient.magnitude * Math.cos(currentPhase);\r\n    point.y += coefficient.magnitude * Math.sin(currentPhase);\r\n}\r\n\r\n/**\r\n * Modifies the point given as argument by applying to it the provided Fourier Coefficients at the provided location.\r\n */\r\nfunction applyCoefficientsArray(point: Point, coefficients: IFourierCoefficient[], t: TimeUnit): void {\r\n    for (const coefficient of coefficients) {\r\n        applyCoefficient(point, coefficient, t);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the Fourier development of a 1-periodic [0,1] -> RxR signal.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass FourierSeries {\r\n    private readonly coefficients: IFourierCoefficient[];\r\n    private readonly curveStepSize: SpaceUnit;\r\n\r\n    private partialCurve: Point[] = [];\r\n    private partialCurveOrder: number = -1;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], totalLength: SpaceUnit) {\r\n        if (coefficients.length % 2 !== 0) { // coefficients must go in pairs of 2: 0, 1, -1, 2, -2, ...\r\n            coefficients.length--;\r\n        }\r\n        if (coefficients.length === 0) {\r\n            throw new Error(\"Fourier series must have at least one coefficient.\");\r\n        }\r\n\r\n        // Sort the coefs in that order: 0, 1, -1, 2, -2, 3, -3, ...\r\n        coefficients.sort((a: IFourierCoefficient, b: IFourierCoefficient) => {\r\n            const absA = Math.abs(a.n);\r\n            const absB = Math.abs(b.n);\r\n            if (absA !== absB) {\r\n                return absA - absB;\r\n            }\r\n            return b.n - a.n;\r\n        });\r\n        this.coefficients = coefficients;\r\n\r\n        this.curveStepSize = 1 / (Parameters.curvePrecision * totalLength);\r\n    }\r\n\r\n    /**\r\n     * Purges the internal cache of the class. Should not be called too often.\r\n     */\r\n    public resetCurve(): void {\r\n        this.partialCurve = [];\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, t] curve portion at the specified integer Fourier order.\r\n     * @param order Expected to be an integer\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCurve(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const lastPointIndex = this.computePartialCurve(order, t);\r\n\r\n        // Draw partial curve\r\n        canvas.startLine();\r\n        for (let i = 0; i < lastPointIndex; i++) {\r\n            canvas.addPointToLine(this.partialCurve[i]);\r\n        }\r\n\r\n        const f = lastPointIndex % 1;\r\n        const lastPoint = this.partialCurve[Math.floor(lastPointIndex)];\r\n        const nextPoint = this.partialCurve[Math.floor(lastPointIndex) + 1];\r\n\r\n        const interpolatedPoint = Point.interpolate(lastPoint, nextPoint, f);\r\n        canvas.addPointToLine(interpolatedPoint);\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, approx. t] curve portion at the specified Fourier order.\r\n     * The order is linearily interpolated between the nearest coefficients.\r\n     * The curve's end (t parameter) is rounded to nearest.\r\n     * @param order If not an integer, then an intterpolation is performed to make sense of decimal Fourier order.\r\n     * @param t Expected to be in [0, 1]. Is not garanteed to be respected, approximations will be performed.\r\n     */\r\n    public drawCurvePartialOrder(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        this.computePartialCurve(order, t);\r\n\r\n        let additionalCoefficients = this.getCoefficients(Math.floor(order) + 1, Math.floor(order) + 1);\r\n        let f = order % 1;\r\n        if (f < 0.5) {\r\n            additionalCoefficients = [additionalCoefficients[0]];\r\n            f *= 2;\r\n        } else {\r\n            f = 2 * f - 1;\r\n        }\r\n\r\n        canvas.startLine();\r\n\r\n        const nbSteps = t / this.curveStepSize;\r\n        for (let i = 0; i < nbSteps; i++) {\r\n            const localT = i * this.curveStepSize;\r\n\r\n            const nextPoint = Point.copy(this.partialCurve[i]);\r\n            applyCoefficient(nextPoint, additionalCoefficients[0], localT);\r\n\r\n            let lastPoint: Point;\r\n            if (additionalCoefficients.length === 1) {\r\n                lastPoint = this.partialCurve[i];\r\n            } else { // additionalCoefficients.length === 2\r\n                lastPoint = Point.copy(nextPoint);\r\n                applyCoefficient(nextPoint, additionalCoefficients[1], localT);\r\n            }\r\n\r\n            const interpolatedPoint = Point.interpolate(lastPoint, nextPoint, f);\r\n            canvas.addPointToLine(interpolatedPoint);\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws a path to the wanted point, in the form of segments representing the action of each coefficient.\r\n     * @param order Maximum Fourier order to use. Must be an integer.\r\n     *              Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawSegmentsToPoint(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const point: Point = { x: 0, y: 0 };\r\n\r\n        canvas.startLine();\r\n\r\n        const coefficients = this.getCoefficients(0, order);\r\n        for (const coefficient of coefficients) {\r\n            applyCoefficient(point, coefficient, t);\r\n            canvas.addPointToLine(point);\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws a path to the wanted point, in the form of circles representing the magnitude of each coefficient.\r\n     * @param order Maximum Fourier order to use. Must be an integer.\r\n     *              Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCirclesToPoint(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const coefficients = this.getCoefficients(0, order);\r\n        if (coefficients.length < 2) {\r\n            return;\r\n        }\r\n\r\n        const point: Point = { x: 0, y: 0 };\r\n\r\n        for (const coefficient of coefficients) {\r\n            if (coefficient.n !== 0 && coefficient.n !== 1) {\r\n                canvas.drawCircle(point, coefficient.magnitude);\r\n            }\r\n            applyCoefficient(point, coefficient, t);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes the partial curve between 0 and t in the given order.\r\n     * The partial curve serves as cache and is as reused as possible.\r\n     * Returns the index of the 't' point in the partial curve.\r\n     * If this index is not an integer, it means an interpolation should be performed.\r\n     */\r\n    private computePartialCurve(order: number, t: TimeUnit): number {\r\n        order = Math.floor(order);\r\n\r\n        if (order < this.partialCurveOrder) {\r\n            // Existing points are computed with too high order. Restart from scratch.\r\n            this.resetCurve();\r\n        } else if (order > this.partialCurveOrder) {\r\n            // Existing points are computed with too low order. Complete existing points with missing orders.\r\n            const missingCoefficients = this.getCoefficients(this.partialCurveOrder + 1, order);\r\n\r\n            for (let i = 0; i < this.partialCurve.length; i++) {\r\n                const localT = i * this.curveStepSize;\r\n                applyCoefficientsArray(this.partialCurve[i], missingCoefficients, localT);\r\n            }\r\n        }\r\n\r\n        // Compute new points if needed\r\n        const currentPointIndex = t / this.curveStepSize;\r\n        const nextPointIndex = Math.ceil(currentPointIndex);\r\n\r\n        const neededCoefficients = this.getCoefficients(0, order);\r\n        for (let i = this.partialCurve.length; i <= nextPointIndex + 1; i++) {\r\n            const point: Point = { x: 0, y: 0 };\r\n            applyCoefficientsArray(point, neededCoefficients, i * this.curveStepSize);\r\n            this.partialCurve.push(point);\r\n        }\r\n\r\n        this.partialCurveOrder = order;\r\n        return currentPointIndex;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of coefficients containing, in that order:\r\n     * if orderFrom > 0: orderFrom, -orderFrom, orderFrom+1, -(orderFrom+1), ..., orderTo, -orderTo\r\n     * if orderFrom == 0: 0, 1, -1, ... orderTo, -orderTo\r\n     * If orderFrom > orderTo, or if one of the parameters is out of range, only returns the valid coefficients.\r\n     */\r\n    private getCoefficients(orderFrom: number, orderTo: number): IFourierCoefficient[] {\r\n        orderFrom = Math.min(orderFrom, orderTo);\r\n\r\n        const firstIndex = Math.max(0, 2 * orderFrom - 1);\r\n        const lastIndex = Math.min(this.coefficients.length, 2 * orderTo + 1);\r\n\r\n        return this.coefficients.slice(firstIndex, lastIndex);\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Point } from \"./point\";\r\n\r\ndeclare const Canvas: any;\r\ntype Callback = (isValid: boolean) => any;\r\n\r\nlet currentPoints: Point[] = [];\r\nlet isRecordingUserInput = false;\r\nconst finishedAcquisitionCallbacks: Callback[] = [];\r\n\r\nfunction getMousePosition(): Point {\r\n    const canvasSize: number[] = Canvas.getSize();\r\n    const mousePosition: number[] = Canvas.getMousePosition();\r\n    return {\r\n        x: canvasSize[0] * mousePosition[0],\r\n        y: canvasSize[1] * mousePosition[1],\r\n    };\r\n}\r\n\r\nCanvas.Observers.mouseDown.push(() => {\r\n    isRecordingUserInput = true;\r\n    const currentPosition = getMousePosition();\r\n    currentPoints = [currentPosition];\r\n});\r\n\r\nCanvas.Observers.mouseUp.push(() => {\r\n    if (isRecordingUserInput) {\r\n        isRecordingUserInput = false;\r\n\r\n        for (const callback of finishedAcquisitionCallbacks) {\r\n            callback(currentPoints.length >= 2);\r\n        }\r\n    }\r\n});\r\n\r\nCanvas.Observers.mouseMove.push(() => {\r\n    if (isRecordingUserInput) {\r\n        const currentPosition = getMousePosition();\r\n        const isPointFarEnough = Point.distance(currentPoints[currentPoints.length - 1], currentPosition) > 2;\r\n        if (isPointFarEnough) {\r\n            currentPoints.push(currentPosition);\r\n        }\r\n    }\r\n});\r\n\r\nfunction isRecording(): boolean {\r\n    return isRecordingUserInput;\r\n}\r\n\r\nfunction drawCurrentPath(canvas: Canvas2D): void {\r\n    canvas.startLine();\r\n\r\n    for (const point of currentPoints) {\r\n        canvas.addPointToLine(point);\r\n    }\r\n\r\n    canvas.endLine();\r\n}\r\n\r\nexport {\r\n    drawCurrentPath,\r\n    finishedAcquisitionCallbacks,\r\n    isRecording,\r\n    currentPoints as recordedPath,\r\n};\r\n"],"sourceRoot":""}