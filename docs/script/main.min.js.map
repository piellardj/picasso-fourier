{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/log.ts","webpack:///./src/ts/stopwatch.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/clock.ts","webpack:///./src/ts/presets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","controlId","callObservers","observersList","observer","preset","observers","clear","redraw","speedChange","presetChange","speed","persistence","closeLoop","repeat","displayCircles","displaySegments","displayCurve","displayOriginalCurve","order","tryParsePreset","previousValue","Parameters","Picker","addObserver","getValue","Range","previous","Checkbox","isChecked","checked","Button","enabled","e","message","console","log","Log","this","start","performance","now","Math","ceil","StopWatch","drawing","fourier","canvas","document","getElementById","context","getContext","lineWidth","clock","needToRestart","clearObservers","push","needToRedraw","redrawObservers","wantedLength","loadPreset","canvasSize","Canvas","getSize","showLoader","Presets","getPreset","points","computeFourierSeries","reset","presetObservers","Observers","canvasResize","requestAnimationFrame","mainLoop","current","setIndicatorText","toLocaleString","clearRect","width","height","clientWidth","clientHeight","strokeStyle","previousWidth","draw","drawCircles","drawCurve","drawPathToPoint","main","pathLength","length","LineDrawing","distance","extendedPathLength","firstPoint","lastPoint","x","y","interpolate","p1","p2","dX","dY","sqrt","beginPath","moveTo","min","max","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","lineTo","stroke","closePath","stopwatch","nbSteps","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","PI","coefficients","floor","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","phase","atan2","milliseconds","FourierSeries","TWO_PI","_coefficients","_length","_partialCurve","_partialCurveStepSize","curvePrecision","_partialCurveOrder","point","currentPointIndex","lastConsolidatedPointIndex","nextConsolidatedPointIndex","computePoint","computeAmountOfCoefficients","TWO_PI_T","computeRealT","coefficient","centerX","centerY","radius","arc","speedChangeObservers","setSpeed","lastCheckpoint","lastCheckpointReal","Clock","EPreset","PRESET_SIZE","wantedSize","callback","fromCache","safelyCallCallback","scaling","offsetX","offsetY","copy","cache","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","text","split","partial"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gFCtErD,IAAMC,EACM,mBADNA,EAEK,iBAFLA,EAGW,0BAHXA,EAIU,yBAJVA,EAKM,mBALNA,EAMK,kBANLA,EAOe,sBAPfA,EAQgB,uBARhBA,EASa,oBATbA,EAUsB,6BAVtBA,EAWK,iBAOX,SAASC,EAAcC,GACnB,IAAuB,UAAAA,EAAA,eAAe,EAClCC,EADe,SAKvB,IAmFIC,EAnFEC,EAKF,CACAC,MAAO,GACPC,OAAQ,GACRC,YAAa,GACbC,aAAc,IAIlB,aAgEI,cACJ,OAhEI,sBAAkB,WAAM,C,IAAxB,WACI,OAAOL,G,gCAGX,sBAAkB,UAAK,C,IAAvB,WACI,OAAOM,G,gCAGX,sBAAkB,gBAAW,C,IAA7B,WACI,OAAOC,G,gCAGX,sBAAkB,cAAS,C,IAA3B,WACI,OAAOC,G,gCAGX,sBAAkB,WAAM,C,IAAxB,WACI,OAAOC,G,gCAGX,sBAAkB,mBAAc,C,IAAhC,WACI,OAAOC,G,gCAGX,sBAAkB,oBAAe,C,IAAjC,WACI,OAAOC,G,gCAGX,sBAAkB,iBAAY,C,IAA9B,WACI,OAAOC,G,gCAGX,sBAAkB,yBAAoB,C,IAAtC,WACI,OAAOC,G,gCAGX,sBAAkB,UAAK,C,IAAvB,WACI,OAAOC,G,gCAGX,sBAAkB,yBAAoB,C,IAAtC,WAEI,OAAO,G,gCAGX,sBAAkB,mBAAc,C,IAAhC,WAEI,MAAO,I,gCAGX,sBAAkB,mBAAc,C,IAAhC,WACI,OAAOb,EAAUC,O,gCAErB,sBAAkB,oBAAe,C,IAAjC,WACI,OAAOD,EAAUE,Q,gCAErB,sBAAkB,yBAAoB,C,IAAtC,WACI,OAAOF,EAAUG,a,gCAErB,sBAAkB,oBAAe,C,IAAjC,WACI,OAAOH,EAAUI,c,gCAIzB,EAjEA,GAuEA,SAASU,EAAerB,GACpB,IAAMsB,EAAgBhB,GACtBA,EAASN,KAEMsB,GACXnB,EAAcI,EAAUI,cAiE5B,EAAAY,aA9DJC,OAAOC,YAAYvB,EAAkBmB,GACrCA,EAAeG,OAAOE,SAASxB,IAE/B,IAAIU,EAAgBe,MAAMD,SAASxB,GACnCyB,MAAMF,YAAYvB,GAAiB,SAACD,GAChC,IAAM2B,EAAWhB,EACjBA,EAAQX,EAER,IAAuB,UAAAM,EAAUG,YAAV,eAAuB,EAC1CL,EADe,MACNuB,OAIjB,IAAIf,EAAuBgB,SAASC,UAAU5B,GAC9C2B,SAASJ,YAAYvB,GAAuB,SAAC6B,GACzClB,EAAckB,KAGlB,IAAIjB,EAAqBe,SAASC,UAAU5B,GAC5C2B,SAASJ,YAAYvB,GAAsB,SAAC6B,GACxCjB,EAAYiB,EACZ5B,EAAcI,EAAUC,UAG5B,IAAIO,EAAkBc,SAASC,UAAU5B,GACzC2B,SAASJ,YAAYvB,GAAkB,SAAC6B,GACpChB,EAASgB,KAGbC,OAAOP,YAAYvB,GAAiB,WAAM,OAAAC,EAAcI,EAAUC,UAElE,IAAIQ,EAA0Ba,SAASC,UAAU5B,GACjD2B,SAASJ,YAAYvB,GAA2B,SAAC6B,GAC7Cf,EAAiBe,EACjB5B,EAAcI,EAAUE,WAG5B,IAAIQ,EAA2BY,SAASC,UAAU5B,GAClD2B,SAASJ,YAAYvB,GAA4B,SAAC6B,GAC9Cd,EAAkBc,EAClB5B,EAAcI,EAAUE,WAG5B,IAAIS,EAAwBW,SAASC,UAAU5B,GAC/C2B,SAASJ,YAAYvB,GAAyB,SAAC6B,GAC3Cb,EAAea,EACf5B,EAAcI,EAAUE,WAG5B,IAAIU,EAAgCU,SAASC,UAAU5B,GACvD2B,SAASJ,YAAYvB,GAAkC,SAAC6B,GACpDZ,EAAuBY,EACvB5B,EAAcI,EAAUE,WAG5B,IAAIW,EAAgBO,MAAMD,SAASxB,GACnCyB,MAAMF,YAAYvB,GAAiB,SAACvB,GAChCyC,EAAQzC,EACRwB,EAAcI,EAAUC,W,8EC1L5B,IAAIyB,GAAU,EAEd,2BAUA,OATI,sBAAkB,YAAO,C,IAAzB,SAA0BC,GACtBD,EAAUC,G,gCAGA,EAAAC,QAAd,SAAsB7D,GACd2D,GACAG,QAAQC,IAAI/D,IAGxB,EAVA,GAYA,UAAegE,G,8ECdf,iBAGI,aACIC,KAAKC,MAAQC,YAAYC,MAMjC,OAHI,sBAAW,2BAAY,C,IAAvB,WACI,OAAOC,KAAKC,KAAKH,YAAYC,MAAQH,KAAKC,Q,gCAElD,EAVA,GAYA,UAAeK,G,kKCXf,cAGA,UACA,OAEA,QAIA,WACI,IAYIC,EACAC,EAbEC,EAASC,SAASC,eAAe,UACjCC,EAAUH,EAAOI,WAAW,MASlCD,EAAQE,UAAY,EAKpB,IAAMC,EAAQ,IAAI,UAEdC,GAAyB,EAC7B,EAAAhC,WAAWiC,eAAeC,MAAK,WAAM,OAAAF,GAAgB,KAErD,IAAIG,GAAwB,EAC5B,EAAAnC,WAAWoC,gBAAgBF,MAAK,WAAM,OAAAC,GAAe,KAErD,IAAME,EAAe,IAwDrB,SAASC,IACLf,EAAU,KACVC,EAAU,KAEV,IAAMe,EAAuBC,OAAOC,UACpCD,OAAOE,YAAW,GAClB,EAAAC,QAAQC,UAAU,EAAA5C,WAAWjB,OAAQwD,GAAY,SAACM,GAC9CtB,EAAU,IAAI,UAAYsB,GAC1BrB,EAAUD,EAAQuB,qBAAqB,KACvCd,GAAgB,EAChBD,EAAMgB,QACNP,OAAOE,YAAW,MAI1B,EAAA1C,WAAWgD,gBAAgBd,KAAKI,GAChCE,OAAOS,UAAUC,aAAahB,KAAKI,GAEnCA,IACAa,uBA1EA,SAASC,IACL,GAAI7B,GAAWC,EAAS,CACpB,IAAI3D,EAAIkE,EAAMsB,QAAUhB,EAcxB,GAZIxE,GAAK,GAAK,EAAAmC,WAAWR,SACrBwC,GAAgB,GAGhBA,IACAA,GAAgB,EAChBD,EAAMgB,QACNlF,EAAI,EACJ2E,OAAOc,iBAAiB,gBAAiB,EAAAtD,WAAWH,MAAM0D,kBAC1D3B,EAAQ4B,UAAU,EAAG,EAAG/B,EAAOgC,MAAOhC,EAAOiC,SAG7CvB,EAAc,CAOd,GA3CJV,EAAOgC,QAAUhC,EAAOkC,aAAelC,EAAOiC,SAAWjC,EAAOmC,eAChEnC,EAAOgC,MAAQhC,EAAOkC,YACtBlC,EAAOiC,OAASjC,EAAOmC,cAqCd,EAAA5D,WAAWV,aACZsC,EAAQ4B,UAAU,EAAG,EAAG/B,EAAOgC,MAAOhC,EAAOiC,QAG7C,EAAA1D,WAAWJ,qBAAsB,CACjCgC,EAAQiC,YAAc,eACtB,IAAMC,EAAgBlC,EAAQE,UAC9BF,EAAQE,UAAY,EAEpBP,EAAQwC,KAAKnC,EAAS/D,GAEtB+D,EAAQE,UAAYgC,EAGpB,EAAA9D,WAAWP,iBACXmC,EAAQiC,YAAc,EAAA7D,WAAWV,YAAc,yBAA2B,wBAC1EkC,EAAQwC,YAAYpC,EAAS,EAAA5B,WAAWH,MAAOhC,IAG/C,EAAAmC,WAAWL,eACXiC,EAAQiC,YAAc,QACtBrC,EAAQyC,UAAUrC,EAAS,EAAA5B,WAAWH,MAAOhC,IAG7C,EAAAmC,WAAWN,kBACXkC,EAAQiC,YAAc,EAAA7D,WAAWV,YAAc,qBAAuB,MACtEkC,EAAQ0C,gBAAgBtC,EAAS,EAAA5B,WAAWH,MAAOhC,IAI3DsE,EAAetE,EAAI,EAGvBsF,sBAAsBC,MAyB9Be,I,kKCjHA,WACA,OAGA,UACA,UAEA,aAmBI,WAAmBtB,GACf7B,KAAK6B,OAASA,EAEd7B,KAAKoD,WAAa,EAClB,IAAK,IAAIzH,EAAI,EAAGA,EAAIqE,KAAK6B,OAAOwB,OAAS,EAAG1H,IACxCqE,KAAKoD,YAAcE,EAAYC,SAASvD,KAAK6B,OAAOlG,GAAIqE,KAAK6B,OAAOlG,EAAI,IAG5EqE,KAAKwD,mBAAqBxD,KAAKoD,WAG/B,IAAMK,EAAazD,KAAK6B,OAAO,GACzB6B,EAAY1D,KAAK6B,OAAO7B,KAAK6B,OAAOwB,OAAS,GAC/CI,EAAWE,IAAMD,EAAUC,GAAKF,EAAWG,IAAMF,EAAUE,IAC3D5D,KAAKwD,oBAAsBF,EAAYC,SAASG,EAAWD,GAC3DzD,KAAK6B,OAAOX,KAAK,CACbyC,EAAGF,EAAWE,EACdC,EAAGH,EAAWG,KA8G9B,OAhJmB,EAAAC,YAAf,SAA2BC,EAAYC,EAAYlH,GAC/C,MAAO,CACH8G,EAAGG,EAAGH,GAAK,EAAI9G,GAAKkH,EAAGJ,EAAI9G,EAC3B+G,EAAGE,EAAGF,GAAK,EAAI/G,GAAKkH,EAAGH,EAAI/G,IAIpB,EAAA0G,SAAf,SAAwBO,EAAYC,GAChC,IAAMC,EAAKF,EAAGH,EAAII,EAAGJ,EACfM,EAAKH,EAAGF,EAAIG,EAAGH,EACrB,OAAOxD,KAAK8D,KAAKF,EAAKA,EAAKC,EAAKA,IA8B7B,YAAAlB,KAAP,SAAYnC,EAAmC/D,GAC3C+D,EAAQuD,YACRvD,EAAQwD,OAAOpE,KAAK6B,OAAO,GAAG8B,EAAG3D,KAAK6B,OAAO,GAAG+B,GAEhD/G,EAAIuD,KAAKiE,IAAI,EAAGjE,KAAKkE,IAAI,EAAGzH,IAC5B,IAIIlB,EAJE4I,EAAgB,EAAAvF,WAAWT,UAAY1B,EAAImD,KAAKwD,mBAAqB3G,EAAImD,KAAKoD,WAEhFoB,EAAgB,EAGpB,IAAK7I,EAAI,EAAGA,EAAIqE,KAAK6B,OAAOwB,OAAS,EAAG1H,IAAK,CACzC,IAAM+H,EAAY1D,KAAK6B,OAAOlG,GACxB8I,EAAYzE,KAAK6B,OAAOlG,EAAI,GAC5B+I,EAAgBpB,EAAYC,SAASG,EAAWe,GAEtD,KAAID,EAAgBE,EAAgBH,GAG7B,CACH,IAAMI,GAAuBJ,EAAgBC,GAAiBE,EACxDE,EAAatB,EAAYO,YAAYH,EAAWe,EAAWE,GACjE/D,EAAQiE,OAAOD,EAAWjB,EAAGiB,EAAWhB,GACxCY,GAAiBlB,EAAYC,SAASG,EAAWkB,GACjD,MAPAJ,GAAiBE,EACjB9D,EAAQiE,OAAOJ,EAAUd,EAAGc,EAAUb,GAU9ChD,EAAQkE,SACRlE,EAAQmE,aAGL,YAAAjD,qBAAP,SAA4BjD,GAkBpB,IAjBJ,IAAMmG,EAAY,IAAI,UAEhBC,EAAU7E,KAAKC,KAAK,EAAArB,WAAWkG,qBAAuBlF,KAAKwD,oBAC3D2B,EAAWnF,KAAKwD,mBAAqByB,EACrCG,EAAK,EAAIH,EASTI,EAA6B,GAE3Bb,EAAgB,EAChBc,EAAiB,EACZC,EAAQ,EAAGA,EAAQN,EAASM,IAIjC,IAHA,IAAMC,GAAYD,EAAQ,IAAOH,EAC3Bb,GAAiBgB,EAAQ,IAAOJ,EAE7BM,EAASH,EAAgBG,EAASzF,KAAK6B,OAAOwB,OAAS,EAAGoC,IAAU,CACzE,IAAM/B,EAAY1D,KAAK6B,OAAO4D,GACxBhB,EAAYzE,KAAK6B,OAAO4D,EAAS,GACjCf,EAAgBpB,EAAYC,SAASG,EAAWe,GAEtD,KAAID,EAAgBE,EAAgBH,GAG7B,CACH,IAAMI,GAAuBJ,EAAgBC,GAAiBE,EACxDgB,EAAapC,EAAYO,YAAYH,EAAWe,EAAWE,GACjEU,EAAQnE,KAAK,CACTyC,EAAG+B,EAAW/B,EACdC,EAAG8B,EAAW9B,EACd+B,SAAU,EAAIvF,KAAKwF,GAAKJ,IAE5B,MAVAhB,GAAiBE,EACjBY,EAAiBG,EAAS,EAgB1C,IADA,IAAMI,EAAsC,GACnClK,EAAI,EAAGA,EAAI,EAAIkD,EAAQ,EAAGlD,IAAK,CACpC,IAAIyB,EAAIgD,KAAK0F,OAAOnK,EAAI,GAAK,GACzBA,EAAI,GAAKA,EAAI,GAAM,IACnByB,IAAM,GAKV,IAFA,IAAI2I,EAAK,EACLC,EAAK,EACY,MAAAX,EAAA,eAAS,CAAzB,IAAMY,EAAM,KACPC,EAAa9I,EAAI6I,EAAON,SACxBQ,EAAM/F,KAAK+F,IAAID,GACfE,EAAMhG,KAAKgG,IAAIF,GAErBH,GAAMX,GAAMa,EAAOtC,EAAIwC,EAAMF,EAAOrC,EAAIwC,GACxCJ,GAAMZ,GAAMa,EAAOrC,EAAIuC,EAAMF,EAAOtC,EAAIyC,GAG5CP,EAAa3E,KAAK,CACdmF,UAAWjG,KAAK8D,KAAK6B,EAAKA,EAAKC,EAAKA,GACpCM,MAAOlG,KAAKmG,MAAMP,EAAID,GACtB3I,EAAC,IAMT,OAFA,UAAIwC,QAAQ,YAAcf,EAAQ,6BAC9BoG,EAAU,yBAA2BD,EAAUwB,aAAe,QAC3D,IAAI,EAAAC,cAAcZ,EAAc7F,KAAKoD,WAAapD,KAAKwD,mBAAoBxD,KAAKoD,aAE/F,EAlJA,GAoJA,UAAeE,G,8EC3Jf,WASMoD,EAAS,EAAItG,KAAKwF,GAExB,aAQI,WAAmBC,EAAqCxC,EAAgBD,GACpEpD,KAAK2G,cAAgBd,EACrB7F,KAAK4G,QAAUvD,EAEfrD,KAAK6G,cAAgB,GACrB7G,KAAK8G,sBAAwBzD,GAAU,EAAArE,WAAW+H,eAAiB3D,GA4H3E,OAzHW,YAAAH,UAAP,SAAiBrC,EAAmC/B,EAAehC,GAC/DA,EAAIuD,KAAKiE,IAAI,EAAGjE,KAAKkE,IAAI,EAAGzH,IAExBgC,IAAUmB,KAAKgH,qBACfhH,KAAKgH,mBAAqBnI,EAC1BmB,KAAK6G,cAAgB,IASzB,IALA,IAGII,EAHEC,EAAoBrK,EAAImD,KAAK8G,sBAC7BK,EAA6B/G,KAAK0F,MAAMoB,GACxCE,EAA6BhH,KAAKC,KAAK6G,GAGpCvL,EAAIqE,KAAK6G,cAAcxD,OAAQ1H,GAAKwL,EAA4BxL,IACrEsL,EAAQjH,KAAKqH,aAAaxI,EAAOlD,EAAIqE,KAAK8G,uBAC1C9G,KAAK6G,cAAc3F,KAAK+F,GAI5BrG,EAAQuD,YACRvD,EAAQwD,OAAOpE,KAAK6G,cAAc,GAAGlD,EAAG3D,KAAK6G,cAAc,GAAGjD,GAC9D,IAASjI,EAAI,EAAGA,EAAIyL,EAA4BzL,IAC5CiF,EAAQiE,OAAO7E,KAAK6G,cAAclL,GAAGgI,EAAG3D,KAAK6G,cAAclL,GAAGiI,GAGlEqD,EAAQjH,KAAKqH,aAAaxI,EAAOhC,GACjC+D,EAAQiE,OAAOoC,EAAMtD,EAAGsD,EAAMrD,GAE9BhD,EAAQkE,SACRlE,EAAQmE,aAGL,YAAA7B,gBAAP,SAAuBtC,EAAmC/B,EAAehC,GACrE,IAAMyH,EAAMtE,KAAKsH,4BAA4BzI,GAC7C,KAAIyF,GAAO,GAAX,CAIA,IAAIX,EAAI3D,KAAK2G,cAAc,GAAGN,UAAYjG,KAAK+F,IAAInG,KAAK2G,cAAc,GAAGL,OACrE1C,EAAI5D,KAAK2G,cAAc,GAAGN,UAAYjG,KAAKgG,IAAIpG,KAAK2G,cAAc,GAAGL,OAEnEiB,EAAWb,EAAS1G,KAAKwH,aAAa3K,GAE5C+D,EAAQuD,YACRvD,EAAQwD,OAAOT,EAAGC,GAElB,IAAK,IAAIjI,EAAI,EAAGA,EAAI2I,EAAK3I,IAAK,CAC1B,IAAM8L,EAAczH,KAAK2G,cAAchL,GACjCuK,EAAaqB,EAAWE,EAAYrK,EAC1CuG,GAAK8D,EAAYpB,UAAYjG,KAAK+F,IAAID,EAAauB,EAAYnB,OAC/D1C,GAAK6D,EAAYpB,UAAYjG,KAAKgG,IAAIF,EAAauB,EAAYnB,OAE/D1F,EAAQiE,OAAOlB,EAAGC,GAGtBhD,EAAQkE,SACRlE,EAAQmE,cAGL,YAAA/B,YAAP,SAAmBpC,EAAmC/B,EAAehC,GAQjE,IAAMyH,EAAMtE,KAAKsH,4BAA4BzI,GAC7C,KAAIyF,EAAM,GASV,IALA,IAZoBoD,EAAiBC,EAAiBC,EAYhDL,EAAWb,EAAS1G,KAAKwH,aAAa3K,GAExC8G,EAAI,EACJC,EAAI,EAECjI,EAAI,EAAGA,EAAI2I,EAAK3I,IAAK,CAC1B,IAAM8L,EAAczH,KAAK2G,cAAchL,GAEnCA,EAAI,IApBQ+L,EAqBD/D,EArBkBgE,EAqBf/D,EArBgCgE,EAqB7BH,EAAYpB,UApBjCzF,EAAQuD,YACRvD,EAAQiH,IAAIH,EAASC,EAASC,EAAQ,EAAGlB,GACzC9F,EAAQmE,YACRnE,EAAQkE,UAoBR,IAAMoB,EAAaqB,EAAWE,EAAYrK,EAC1CuG,GAAK8D,EAAYpB,UAAYjG,KAAK+F,IAAID,EAAauB,EAAYnB,OAC/D1C,GAAK6D,EAAYpB,UAAYjG,KAAKgG,IAAIF,EAAauB,EAAYnB,SAK/D,YAAAe,aAAR,SAAqBxI,EAAehC,GAChC,IAAI8G,EAAI,EACJC,EAAI,EAER/G,EAAImD,KAAKwH,aAAa3K,GAGtB,IADA,IAAMyH,EAAMtE,KAAKsH,4BAA4BzI,GACpClD,EAAI,EAAGA,EAAI2I,EAAK3I,IAAK,CAC1B,IAAM8L,EAAczH,KAAK2G,cAAchL,GACjCuK,EAAaQ,EAASe,EAAYrK,EAAIP,EAC5C8G,GAAK8D,EAAYpB,UAAYjG,KAAK+F,IAAID,EAAauB,EAAYnB,OAC/D1C,GAAK6D,EAAYpB,UAAYjG,KAAKgG,IAAIF,EAAauB,EAAYnB,OAGnE,MAAO,CAAE3C,EAAC,EAAEC,EAAC,IAGT,YAAA0D,4BAAR,SAAoCzI,GAChC,OAAOuB,KAAKiE,IAAIrE,KAAK2G,cAActD,OAAQ,EAAI,EAAIxE,IAG/C,YAAA2I,aAAR,SAAqB3K,GAGjB,OAFAA,EAAIuD,KAAKiE,IAAI,EAAGjE,KAAKkE,IAAI,EAAGzH,IAExB,EAAAmC,WAAWT,UACJ1B,EAEJA,EAAImD,KAAK4G,SAExB,EAzIA,GA6II,EAAAH,iB,8ECxJJ,WAEA,aAKI,wBACIzG,KAAK3B,MAAQ,EAAAW,WAAWX,MACxB,EAAAW,WAAW8I,qBAAqB5G,MAAK,WAAM,SAAK6G,SAAS,EAAA/I,WAAWX,UAEpE2B,KAAK+B,QAiBb,OAdW,YAAAA,MAAP,WACI/B,KAAKgI,eAAiB,EACtBhI,KAAKiI,mBAAqB/H,YAAYC,OAGnC,YAAA4H,SAAP,SAAgB1J,GACZ2B,KAAKgI,eAAiBhI,KAAKqC,QAC3BrC,KAAKiI,mBAAqB/H,YAAYC,MACtCH,KAAK3B,MAAQA,GAGjB,sBAAW,sBAAO,C,IAAlB,WACI,OAAO2B,KAAKgI,eAAiBhI,KAAK3B,OAAS6B,YAAYC,MAAQH,KAAKiI,qB,gCAE5E,EA1BA,GA4BA,UAAeC,G,kKC9Bf,IAKKC,EALL,UAEA,WAGA,SAAKA,GACD,sBACA,cACA,gBACA,YACA,cACA,sBACA,gBACA,gBACA,kBACA,kBAVJ,CAAKA,MAAO,KAwGR,EAAAA,UA3FJ,IAAMC,EAAc,IAEpB,2BAsFA,OArFkB,EAAAxG,UAAd,SAAwB7D,EAAiBsK,EAAsBC,GAC3D,IAAMtD,EAAY,IAAI,UAClBuD,GAAY,EAEhB,SAASC,EAAmB3G,GAOxB,IANA,IAAM4G,EAAUrI,KAAKiE,IAAIgE,EAAW,GAAKD,EAAaC,EAAW,GAAKD,GAChEM,EAAU,IAAOL,EAAW,GAAKD,EAAcK,GAC/CE,EAAU,IAAON,EAAW,GAAKD,EAAcK,GAG/CG,EAAiB,GACH,MAAA/G,EAAA,eAAQ,CAAvB,IAAMoF,EAAK,KACZ2B,EAAK1H,KAAK,CACNyC,EAAGsD,EAAMtD,EAAI8E,EAAUC,EACvB9E,EAAGqD,EAAMrD,EAAI6E,EAAUE,IAI3BJ,EACA,UAAI3I,QAAQ,qBAAuB7B,EAAS,mBAAqBiH,EAAUwB,aAAe,QAE1F,UAAI5G,QAAQ,sBAAwB7B,EAAS,QAAUiH,EAAUwB,aAAe,QAGpF8B,EAASM,GAGb,QAA6B,IAAlBjH,EAAQkH,MACflH,EAAQkH,MAAQ,QACb,QAAqC,IAA1BlH,EAAQkH,MAAM9K,GAG5B,OAFAwK,GAAY,OACZC,EAAmB7G,EAAQkH,MAAM9K,IAIrC,IAAM+K,EAAM,IAAIC,eAEhBD,EAAIE,iBAAiB,oBAAoB,WACrC,GAAIF,EAAIG,aAAeF,eAAeG,MAAuB,MAAfJ,EAAIK,OAAgB,CAC9D,IAAMC,EAAiBzH,EAAQ0H,oBAAoBP,EAAIQ,cAEnDF,IACAzH,EAAQkH,MAAM9K,GAAUqL,EACxBZ,EAAmB7G,EAAQkH,MAAM9K,SAK7C+K,EAAIS,KAAK,MAAO,aAAexL,EAAS,QACxC+K,EAAIU,KAAK,OAOE,EAAAH,oBAAf,SAAmCI,GAC/B,IAAKA,EACD,OAAO,KAQX,IALA,IAAMzE,EAAY,IAAI,UAEhBnD,EAAmB,GAGN,MADK4H,EAAKC,MAAM,MAChB,eAAO,CAArB,IACKC,EADK,KACUD,MAAM,KAC3B,GAAuB,IAAnBC,EAAQtG,OACR,OAAO,KAGXxB,EAAOX,KAAK,CACRyC,GAAIgG,EAAQ,GACZ/F,GAAI+F,EAAQ,KAIpB,OAAI9H,EAAOwB,QAAU,EACV,MAGX,UAAIzD,QAAQ,oBAAsBoF,EAAUwB,aAAe,QACpD3E,IAEf,EAtFA,GA0FI,EAAAF","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import { EPreset } from \"./presets\";\r\n\r\ndeclare const Button: any;\r\ndeclare const Canvas: any;\r\ndeclare const Checkbox: any;\r\ndeclare const Controls: any;\r\ndeclare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\ndeclare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRESET: \"preset-picker-id\",\r\n    SPEED: \"speed-range-id\",\r\n    PERSISTENCE: \"persistence-checkbox-id\",\r\n    CLOSE_LOOP: \"close-loop-checkbox-id\",\r\n    REPEAT: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n};\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\ntype SpeedObserver = (previousSpeed: number) => void;\r\n\r\nfunction callObservers(observersList: any[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: SpeedObserver[];\r\n    presetChange: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n    presetChange: [],\r\n};\r\n\r\n/* === INTERFACE ====================================================== */\r\nclass Parameters {\r\n    public static get preset(): EPreset {\r\n        return preset;\r\n    }\r\n\r\n    public static get speed(): number {\r\n        return speed;\r\n    }\r\n\r\n    public static get persistence(): boolean {\r\n        return persistence;\r\n    }\r\n\r\n    public static get closeLoop(): boolean {\r\n        return closeLoop;\r\n    }\r\n\r\n    public static get repeat(): boolean {\r\n        return repeat;\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return displayCircles;\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return displaySegments;\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return displayCurve;\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): SpeedObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n    public static get presetObservers(): GenericObserver[] {\r\n        return observers.presetChange;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet preset: EPreset;\r\nfunction tryParsePreset(p: string): void {\r\n    const previousValue = preset;\r\n    preset = p as EPreset;\r\n\r\n    if (preset !== previousValue) {\r\n        callObservers(observers.presetChange);\r\n    }\r\n}\r\nPicker.addObserver(controlId.PRESET, tryParsePreset);\r\ntryParsePreset(Picker.getValue(controlId.PRESET));\r\n\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    const previous = speed;\r\n    speed = s;\r\n\r\n    for (const observer of observers.speedChange) {\r\n        observer(previous);\r\n    }\r\n});\r\n\r\nlet persistence: boolean = Checkbox.isChecked(controlId.PERSISTENCE);\r\nCheckbox.addObserver(controlId.PERSISTENCE, (checked: boolean) => {\r\n    persistence = checked;\r\n});\r\n\r\nlet closeLoop: boolean = Checkbox.isChecked(controlId.CLOSE_LOOP);\r\nCheckbox.addObserver(controlId.CLOSE_LOOP, (checked: boolean) => {\r\n    closeLoop = checked;\r\n    callObservers(observers.clear);\r\n});\r\n\r\nlet repeat: boolean = Checkbox.isChecked(controlId.REPEAT);\r\nCheckbox.addObserver(controlId.REPEAT, (checked: boolean) => {\r\n    repeat = checked;\r\n});\r\n\r\nButton.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","let enabled = true;\r\n\r\nclass Log {\r\n    public static set enabled(e: boolean) {\r\n        enabled = e;\r\n    }\r\n\r\n    public static message(m: string): void {\r\n        if (enabled) {\r\n            console.log(m);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Log;\r\n","class StopWatch {\r\n    private readonly start: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.start = performance.now();\r\n    }\r\n\r\n    public get milliseconds(): number {\r\n        return Math.ceil(performance.now() - this.start);\r\n    }\r\n}\r\n\r\nexport default StopWatch;\r\n","import { FourierSeries } from \"./fourier-series\";\r\nimport LineDrawing from \"./line-drawing\";\r\nimport IPoint from \"./point\";\r\n\r\nimport Clock from \"./clock\";\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport { EPreset, Presets } from \"./presets\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction main() {\r\n    const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n    const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n    function adjustCanvasSize() {\r\n        if (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) {\r\n            canvas.width = canvas.clientWidth;\r\n            canvas.height = canvas.clientHeight;\r\n        }\r\n    }\r\n\r\n    context.lineWidth = 1;\r\n\r\n    let drawing: LineDrawing;\r\n    let fourier: FourierSeries;\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart: boolean = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n\r\n    let needToRedraw: boolean = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    const wantedLength = 2000; // milliseconds\r\n    function mainLoop() {\r\n        if (drawing && fourier) { // checks that preset is loaded\r\n            let t = clock.current / wantedLength;\r\n\r\n            if (t >= 1 && Parameters.repeat) {\r\n                needToRestart = true;\r\n            }\r\n\r\n            if (needToRestart) {\r\n                needToRestart = false;\r\n                clock.reset();\r\n                t = 0;\r\n                Canvas.setIndicatorText(\"fourier-order\", Parameters.order.toLocaleString());\r\n                context.clearRect(0, 0, canvas.width, canvas.height);\r\n            }\r\n\r\n            if (needToRedraw) {\r\n                adjustCanvasSize();\r\n\r\n                if (!Parameters.persistence) {\r\n                    context.clearRect(0, 0, canvas.width, canvas.height);\r\n                }\r\n\r\n                if (Parameters.displayOriginalCurve) {\r\n                    context.strokeStyle = \"rgb(0,128,0)\";\r\n                    const previousWidth = context.lineWidth;\r\n                    context.lineWidth = 2;\r\n\r\n                    drawing.draw(context, t);\r\n\r\n                    context.lineWidth = previousWidth;\r\n                }\r\n\r\n                if (Parameters.displayCircles) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"rgba(255,255,255,0.3)\";\r\n                    fourier.drawCircles(context, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displayCurve) {\r\n                    context.strokeStyle = \"white\";\r\n                    fourier.drawCurve(context, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displaySegments) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,0,0,0.01)\" : \"red\";\r\n                    fourier.drawPathToPoint(context, Parameters.order, t);\r\n                }\r\n            }\r\n\r\n            needToRedraw = t < 1;\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    function loadPreset(): void {\r\n        drawing = null;\r\n        fourier = null;\r\n\r\n        const canvasSize: number[] = Canvas.getSize();\r\n        Canvas.showLoader(true);\r\n        Presets.getPreset(Parameters.preset, canvasSize, (points: IPoint[]) => {\r\n            drawing = new LineDrawing(points);\r\n            fourier = drawing.computeFourierSeries(300);\r\n            needToRestart = true;\r\n            clock.reset();\r\n            Canvas.showLoader(false);\r\n        });\r\n    }\r\n\r\n    Parameters.presetObservers.push(loadPreset);\r\n    Canvas.Observers.canvasResize.push(loadPreset);\r\n\r\n    loadPreset();\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","import { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport { Parameters } from \"./parameters\";\r\nimport IPoint from \"./point\";\r\n\r\nimport Log from \"./log\";\r\nimport StopWatch from \"./stopwatch\";\r\n\r\nclass LineDrawing {\r\n    /* Assumes t is between 0 and 1 included. */\r\n    private static interpolate(p1: IPoint, p2: IPoint, t: number): IPoint {\r\n        return {\r\n            x: p1.x * (1 - t) + p2.x * t,\r\n            y: p1.y * (1 - t) + p2.y * t,\r\n        };\r\n    }\r\n\r\n    private static distance(p1: IPoint, p2: IPoint): number {\r\n        const dX = p1.x - p2.x;\r\n        const dY = p1.y - p2.y;\r\n        return Math.sqrt(dX * dX + dY * dY);\r\n    }\r\n\r\n    public readonly pathLength: number; // length of the input path\r\n    private readonly points: IPoint[];\r\n    private readonly extendedPathLength: number; // length of the actual path, potentially extended to make it periodic\r\n\r\n    public constructor(points: IPoint[]) {\r\n        this.points = points;\r\n\r\n        this.pathLength = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            this.pathLength += LineDrawing.distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        this.extendedPathLength = this.pathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (firstPoint.x !== lastPoint.x || firstPoint.y !== lastPoint.y) {\r\n            this.extendedPathLength += LineDrawing.distance(lastPoint, firstPoint);\r\n            this.points.push({\r\n                x: firstPoint.x,\r\n                y: firstPoint.y,\r\n            });\r\n        }\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public draw(context: CanvasRenderingContext2D, t: number) {\r\n        context.beginPath();\r\n        context.moveTo(this.points[0].x, this.points[0].y);\r\n\r\n        t = Math.min(1, Math.max(0, t));\r\n        const desiredLength = Parameters.closeLoop ? t * this.extendedPathLength : t * this.pathLength;\r\n\r\n        let currentLength = 0;\r\n\r\n        let i: number;\r\n        for (i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = LineDrawing.distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                context.lineTo(nextPoint.x, nextPoint.y);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = LineDrawing.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                context.lineTo(finalPoint.x, finalPoint.y);\r\n                currentLength += LineDrawing.distance(lastPoint, finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const stopwatch = new StopWatch();\r\n\r\n        const nbSteps = Math.ceil(Parameters.integrationPrecision * this.extendedPathLength);\r\n        const stepSize = this.extendedPathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = LineDrawing.distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = LineDrawing.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        Log.message(\"Computed \" + order + \" Fourier coefficient with \" +\r\n            nbSteps + \" integration steps in \" + stopwatch.milliseconds + \" ms.\");\r\n        return new FourierSeries(coefficients, this.pathLength / this.extendedPathLength, this.pathLength);\r\n    }\r\n}\r\n\r\nexport default LineDrawing;\r\n","import { Parameters } from \"./parameters\";\r\nimport IPoint from \"./point\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\nclass FourierSeries {\r\n    private readonly _coefficients: IFourierCoefficient[];\r\n    private readonly _length: number;\r\n\r\n    private _partialCurve: IPoint[];\r\n    private _partialCurveOrder: number;\r\n    private _partialCurveStepSize: number;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], length: number, pathLength: number) {\r\n        this._coefficients = coefficients;\r\n        this._length = length;\r\n\r\n        this._partialCurve = [];\r\n        this._partialCurveStepSize = length / (Parameters.curvePrecision * pathLength);\r\n    }\r\n\r\n    public drawCurve(context: CanvasRenderingContext2D, order: number, t: number): void {\r\n        t = Math.min(1, Math.max(0, t));\r\n\r\n        if (order !== this._partialCurveOrder) {\r\n            this._partialCurveOrder = order;\r\n            this._partialCurve = [];\r\n        }\r\n\r\n        // Compute partial curve\r\n        const currentPointIndex = t / this._partialCurveStepSize;\r\n        const lastConsolidatedPointIndex = Math.floor(currentPointIndex);\r\n        const nextConsolidatedPointIndex = Math.ceil(currentPointIndex);\r\n        let point: IPoint;\r\n\r\n        for (let i = this._partialCurve.length; i <= lastConsolidatedPointIndex; i++) {\r\n            point = this.computePoint(order, i * this._partialCurveStepSize);\r\n            this._partialCurve.push(point);\r\n        }\r\n\r\n        // Draw partial curve\r\n        context.beginPath();\r\n        context.moveTo(this._partialCurve[0].x, this._partialCurve[0].y);\r\n        for (let i = 1; i < nextConsolidatedPointIndex; i++) {\r\n            context.lineTo(this._partialCurve[i].x, this._partialCurve[i].y);\r\n        }\r\n\r\n        point = this.computePoint(order, t);\r\n        context.lineTo(point.x, point.y);\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public drawPathToPoint(context: CanvasRenderingContext2D, order: number, t: number): void {\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        if (max <= 0) {\r\n            return;\r\n        }\r\n\r\n        let x = this._coefficients[0].magnitude * Math.cos(this._coefficients[0].phase);\r\n        let y = this._coefficients[0].magnitude * Math.sin(this._coefficients[0].phase);\r\n\r\n        const TWO_PI_T = TWO_PI * this.computeRealT(t);\r\n\r\n        context.beginPath();\r\n        context.moveTo(x, y);\r\n\r\n        for (let i = 1; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI_T * coefficient.n;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n\r\n            context.lineTo(x, y);\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public drawCircles(context: CanvasRenderingContext2D, order: number, t: number): void {\r\n        function drawCircle(centerX: number, centerY: number, radius: number) {\r\n            context.beginPath();\r\n            context.arc(centerX, centerY, radius, 0, TWO_PI);\r\n            context.closePath();\r\n            context.stroke();\r\n        }\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        if (max < 2) {\r\n            return;\r\n        }\r\n\r\n        const TWO_PI_T = TWO_PI * this.computeRealT(t);\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n\r\n            if (i > 1) {\r\n                drawCircle(x, y, coefficient.magnitude);\r\n            }\r\n\r\n            const TWO_PI_N_T = TWO_PI_T * coefficient.n;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    private computePoint(order: number, t: number): IPoint {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        t = this.computeRealT(t);\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        return { x, y };\r\n    }\r\n\r\n    private computeAmountOfCoefficients(order: number): number {\r\n        return Math.min(this._coefficients.length, 1 + 2 * order);\r\n    }\r\n\r\n    private computeRealT(t: number): number {\r\n        t = Math.min(1, Math.max(0, t));\r\n\r\n        if (Parameters.closeLoop) {\r\n            return t;\r\n        }\r\n        return t * this._length;\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\n\r\nclass Clock {\r\n    private speed: number;\r\n    private lastCheckpoint: DOMHighResTimeStamp;\r\n    private lastCheckpointReal: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        Parameters.speedChangeObservers.push(() => this.setSpeed(Parameters.speed));\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.lastCheckpoint = 0;\r\n        this.lastCheckpointReal = performance.now();\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.lastCheckpoint = this.current;\r\n        this.lastCheckpointReal = performance.now();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        return this.lastCheckpoint + this.speed * (performance.now() - this.lastCheckpointReal);\r\n    }\r\n}\r\n\r\nexport default Clock;\r\n","import Log from \"./log\";\r\nimport IPoint from \"./point\";\r\nimport StopWatch from \"./stopwatch\";\r\n\r\n/* Enum values must match the values of the controls */\r\nenum EPreset {\r\n    ARLEQUIN = \"arlequin\",\r\n    BULL = \"bull\",\r\n    CAMEL = \"camel\",\r\n    DOG = \"dog\",\r\n    DOVE = \"dove\",\r\n    FLAMINGO = \"flamingo\",\r\n    HORSE = \"horse\",\r\n    MOUSE = \"mouse\",\r\n    WOMAN1 = \"woman1\",\r\n    WOMAN2 = \"woman2\",\r\n}\r\n\r\nconst PRESET_SIZE = 512; // a preset should be dimensionned for a 512 x 512 canvas\r\n\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, wantedSize: number[], callback: (array: IPoint[]) => any): void {\r\n        const stopwatch = new StopWatch();\r\n        let fromCache = false;\r\n\r\n        function safelyCallCallback(points: IPoint[]) {\r\n            const scaling = Math.min(wantedSize[0] / PRESET_SIZE, wantedSize[1] / PRESET_SIZE);\r\n            const offsetX = 0.5 * (wantedSize[0] - PRESET_SIZE * scaling);\r\n            const offsetY = 0.5 * (wantedSize[1] - PRESET_SIZE * scaling);\r\n\r\n            /* Create a deep copy to keep the cache clean */\r\n            const copy: IPoint[] = [];\r\n            for (const point of points) {\r\n                copy.push({\r\n                    x: point.x * scaling + offsetX,\r\n                    y: point.y * scaling + offsetY,\r\n                });\r\n            }\r\n\r\n            if (fromCache) {\r\n                Log.message(\"Retrieved preset '\" + preset + \"' from cache in \" + stopwatch.milliseconds + \" ms.\");\r\n            } else {\r\n                Log.message(\"Downloaded preset '\" + preset + \"' in \" + stopwatch.milliseconds + \" ms.\");\r\n            }\r\n\r\n            callback(copy);\r\n        }\r\n\r\n        if (typeof Presets.cache === \"undefined\") {\r\n            Presets.cache = {};\r\n        } else if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            fromCache = true;\r\n            safelyCallCallback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"readystatechange\", () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    safelyCallCallback(Presets.cache[preset]);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open(\"GET\", \"resources/\" + preset + \".txt\");\r\n        xhr.send(null);\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: IPoint[];\r\n    };\r\n\r\n    private static tryParsePointsArray(text: string): IPoint[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const stopwatch = new StopWatch();\r\n\r\n        const points: IPoint[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        Log.message(\"Parsed preset in \" + stopwatch.milliseconds + \" ms.\");\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n"],"sourceRoot":""}