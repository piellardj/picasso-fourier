{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/log.ts","webpack:///./src/ts/stopwatch.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/canvas-2d.ts","webpack:///./src/ts/clock.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/point.ts","webpack:///./src/ts/presets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EMode","controlId","PRESET","MODE","SPEED","PERSISTENCE","CLOSE_LOOP","REPEAT","RESET","DISPLAY_CIRCLES","DISPLAY_SEGMENTS","DISPLAY_CURVE","DISPLAY_ORIGINAL_CURVE","ORDER","callObservers","observersList","observer","preset","observers","clear","redraw","speedChange","presetChange","tryParsePreset","previousValue","parseAndApplyMode","newModes","length","newMode","isInstant","INSTANT","Controls","setVisibility","Picker","addObserver","getValue","Tabs","getValues","speed","Range","previous","persistence","Checkbox","isChecked","checked","closeLoop","PROGRESSIVE","repeat","Button","displayCircles","displaySegments","displayCurve","displayOriginalCurve","order","this","isProgressiveMode","Parameters","enabled","setEnabled","e","message","console","log","start","performance","now","Math","ceil","StopWatch","setOrderIndicator","round","Canvas","setIndicatorText","toLocaleString","canvas2D","Canvas2D","context","lineWidth","drawing","fourier","clock","Clock","needToRestart","clearObservers","push","needToRedraw","redrawObservers","loopDuration","loadPreset","canvasSize","getSize","showLoader","Presets","getPreset","points","LineDrawing","computeFourierSeries","reset","presetObservers","Observers","canvasResize","requestAnimationFrame","mainLoop","current","maxT","originalPathDuration","finishedLoop","isPaused","resume","min","pause","resetCurve","adjustSize","strokeStyle","previousWidth","draw","drawCircles","drawCurve","drawPathToPoint","drawCurvePartialOrder","main","canvasElementId","canvas","document","getElementById","getContext","width","clientWidth","height","clientHeight","clearRect","paused","lastCheckpoint","clockTime","realTime","speedChangeObservers","setSpeed","createCheckpoint","originalPathLength","distance","totalPathLength","firstPoint","lastPoint","equals","x","y","pathLength","beginPath","moveTo","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","interpolate","lineTo","stroke","closePath","stopwatch","nbSteps","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","PI","coefficients","floor","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","sqrt","phase","atan2","Log","milliseconds","FourierSeries","TWO_PI","totalLength","partialCurve","curveStepSize","curvePrecision","partialCurveOrder","point","currentPointIndex","lastConsolidatedPointIndex","nextConsolidatedPointIndex","computePoint","computePointPartialOrder","max","computeAmountOfCoefficients","TWO_PI_T","coefficient","centerX","centerY","radius","arc","f","p1","p2","dX","dY","EPreset","PRESET_SIZE","wantedSize","callback","fromCache","safelyCallCallback","scaling","offsetX","offsetY","copy","cache","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","text","split","partial"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gFCtErD,IAeKC,EAfCC,EAAY,CACdC,OAAQ,mBACRC,KAAM,iBACNC,MAAO,iBACPC,YAAa,0BACbC,WAAY,yBACZC,OAAQ,mBACRC,MAAO,kBACPC,gBAAiB,sBACjBC,iBAAkB,uBAClBC,cAAe,oBACfC,uBAAwB,6BACxBC,MAAO,kBAYX,SAASC,EAAcC,GACnB,IAAuB,UAAAA,EAAA,eAAe,EAClCC,EADe,UAVvB,SAAKhB,GACD,cACA,kBAFJ,CAAKA,MAAK,KAeV,IAeIiB,EAYA9B,EA3BE+B,EAKF,CACAC,MAAO,GACPC,OAAQ,GACRC,YAAa,GACbC,aAAc,IAOlB,SAASC,EAAezB,GACpB,IAAM0B,EAAgBP,GACtBA,EAASnB,KAEM0B,GACXV,EAAcI,EAAUI,cAOhC,SAASG,EAAkBC,GACvB,GAAwB,IAApBA,EAASC,OAAb,CAIA,IAAMC,EAAUF,EAAS,GACzB,GAAIE,IAAYzC,EAAM,CAGlB,IAAM0C,GAFN1C,EAAOyC,KAEqB5B,EAAM8B,QAClCC,SAASC,cAAc/B,EAAUQ,gBAAiBoB,GAClDE,SAASC,cAAc/B,EAAUS,iBAAkBmB,GACnDE,SAASC,cAAc/B,EAAUU,cAAekB,GAEhDf,EAAcI,EAAUC,SAlBhCc,OAAOC,YAAYjC,EAAUC,OAAQqB,GACrCA,EAAeU,OAAOE,SAASlC,EAAUC,SAoBzCuB,EAAkBW,KAAKC,UAAUpC,EAAUE,OAC3CiC,KAAKF,YAAYjC,EAAUE,KAAMsB,GAEjC,IAAIa,EAAgBC,MAAMJ,SAASlC,EAAUG,OAC7CmC,MAAML,YAAYjC,EAAUG,OAAO,SAACL,GAChC,IAAMyC,EAAWF,EACjBA,EAAQvC,EAER,IAAuB,UAAAmB,EAAUG,YAAV,eAAuB,EAC1CL,EADe,MACNwB,OAIjB,IAAIC,EAAuBC,SAASC,UAAU1C,EAAUI,aACxDqC,SAASR,YAAYjC,EAAUI,aAAa,SAACuC,GACzCH,EAAcG,KAGlB,IAAIC,EAAqBH,SAASC,UAAU1C,EAAUK,YACtDoC,SAASR,YAAYjC,EAAUK,YAAY,SAACsC,GACxCC,EAAYD,EAERzD,IAASa,EAAM8C,aACfhC,EAAcI,EAAUC,UAIhC,IAAI4B,EAAkBL,SAASC,UAAU1C,EAAUM,QACnDmC,SAASR,YAAYjC,EAAUM,QAAQ,SAACqC,GACpCG,EAASH,KAGbI,OAAOd,YAAYjC,EAAUO,OAAO,WAAM,OAAAM,EAAcI,EAAUC,UAElE,IAAI8B,EAA0BP,SAASC,UAAU1C,EAAUQ,iBAC3DiC,SAASR,YAAYjC,EAAUQ,iBAAiB,SAACmC,GAC7CK,EAAiBL,EACjB9B,EAAcI,EAAUE,WAG5B,IAAI8B,EAA2BR,SAASC,UAAU1C,EAAUS,kBAC5DgC,SAASR,YAAYjC,EAAUS,kBAAkB,SAACkC,GAC9CM,EAAkBN,EAClB9B,EAAcI,EAAUE,WAG5B,IAAI+B,EAAwBT,SAASC,UAAU1C,EAAUU,eACzD+B,SAASR,YAAYjC,EAAUU,eAAe,SAACiC,GAC3CO,EAAeP,EACf9B,EAAcI,EAAUE,WAG5B,IAAIgC,EAAgCV,SAASC,UAAU1C,EAAUW,wBACjE8B,SAASR,YAAYjC,EAAUW,wBAAwB,SAACgC,GACpDQ,EAAuBR,EACvB9B,EAAcI,EAAUE,WAG5B,IAAIiC,EAAgBd,MAAMJ,SAASlC,EAAUY,OAC7C0B,MAAML,YAAYjC,EAAUY,OAAO,SAACpC,GAChC4E,EAAQ5E,EACRqC,EAAcI,EAAUC,UAO5B,iBAuEI,cACJ,OAvEI,sBAAkB,WAAM,C,IAAxB,WACI,OAAOF,G,gCAGX,sBAAkB,sBAAiB,C,IAAnC,WACI,OAAO9B,IAASa,EAAM8C,a,gCAG1B,sBAAkB,UAAK,C,IAAvB,WACI,OAAIQ,KAAKC,kBACE,GAAMjB,EAEVA,G,gCAGX,sBAAkB,gBAAW,C,IAA7B,WACI,OAAOG,G,gCAGX,sBAAkB,cAAS,C,IAA3B,WACI,OAAOI,G,gCAGX,sBAAkB,WAAM,C,IAAxB,WACI,OAAOE,G,gCAGX,sBAAkB,mBAAc,C,IAAhC,WACI,OAAO5D,IAASa,EAAM8B,SAAWmB,G,gCAGrC,sBAAkB,oBAAe,C,IAAjC,WACI,OAAO9D,IAASa,EAAM8B,SAAWoB,G,gCAGrC,sBAAkB,iBAAY,C,IAA9B,WACI,OAAO/D,IAASa,EAAM8B,SAAWqB,G,gCAGrC,sBAAkB,yBAAoB,C,IAAtC,WACI,OAAOC,G,gCAGX,sBAAkB,UAAK,C,IAAvB,WACI,OAAOC,G,gCAGX,sBAAkB,yBAAoB,C,IAAtC,WAEI,OAAO,G,gCAGX,sBAAkB,mBAAc,C,IAAhC,WAEI,MAAO,I,gCAGX,sBAAkB,mBAAc,C,IAAhC,WACI,OAAOnC,EAAUC,O,gCAErB,sBAAkB,oBAAe,C,IAAjC,WACI,OAAOD,EAAUE,Q,gCAErB,sBAAkB,yBAAoB,C,IAAtC,WACI,OAAOF,EAAUG,a,gCAErB,sBAAkB,oBAAe,C,IAAjC,WACI,OAAOH,EAAUI,c,gCAIzB,EAxEA,GA2EI,EAAAkC,c,8ECtOJ,IAAIC,GAAU,EAaV,EAAAC,WAXJ,SAAoBC,GAChBF,EAAUE,GAWV,EAAAC,QARJ,SAAiBxF,GACTqF,GACAI,QAAQC,IAAI1F,K,8ECLpB,iBAGI,aACIkF,KAAKS,MAAQC,YAAYC,MAMjC,OAHI,sBAAW,2BAAY,C,IAAvB,WACI,OAAOC,KAAKC,KAAKH,YAAYC,MAAQX,KAAKS,Q,gCAElD,EAVA,GAaI,EAAAK,a,8EChBJ,WACA,OAEA,OACA,OAEA,OAKA,SAASC,EAAkBpF,GACvBA,EAAQiF,KAAKI,MAAM,GAAKrF,GAAS,GACjCsF,OAAOC,iBAAiB,gBAAiBvF,EAAMwF,mBAGnD,WACI,IAAMC,EAAW,IAAI,EAAAC,SAAS,UACxBC,EAAUF,EAASE,QACzBA,EAAQC,UAAY,EAEpB,IAAIC,EAAuB,KACvBC,EAAyB,KAEvBC,EAAQ,IAAI,EAAAC,MAEdC,GAAgB,EACpB,EAAA1B,WAAW2B,eAAeC,MAAK,WAAM,OAAAF,GAAgB,KAErD,IAAIG,GAAe,EACnB,EAAA7B,WAAW8B,gBAAgBF,MAAK,WAAM,OAAAC,GAAe,KAErD,IAAME,EAAe,IA6ErB,SAASC,IACLV,EAAU,KACVC,EAAU,KAEV,IAAMU,EAAuBlB,OAAOmB,UACpCnB,OAAOoB,YAAW,GAClB,EAAAC,QAAQC,UAAU,EAAArC,WAAWvC,OAAQwE,GAAY,SAACK,GAC9ChB,EAAU,IAAI,EAAAiB,YAAYD,GAC1Bf,EAAUD,EAAQkB,qBAAqB,KACvCd,GAAgB,EAChBF,EAAMiB,QACN1B,OAAOoB,YAAW,MAI1B,EAAAnC,WAAW0C,gBAAgBd,KAAKI,GAChCjB,OAAO4B,UAAUC,aAAahB,KAAKI,GAEnCA,IACAa,uBA/FA,SAASC,IACL,GAAgB,OAAZxB,GAAgC,OAAZC,EAAkB,CACtC,IAAI7F,EAAc8F,EAAMuB,QAAUhB,EAC5BiB,EAAiB,EAAAhD,WAAWX,UAAY,EAAIiC,EAAQ2B,qBACtDC,EAAgBxH,GAAKsH,EA0BzB,IAxBKE,GAAgB1B,EAAM2B,UACvB3B,EAAM4B,SAGV1H,EAAIgF,KAAK2C,IAAI3H,EAAGsH,GAEZE,IACI,EAAAlD,WAAWT,OACXmC,GAAgB,EAEhBF,EAAM8B,SAIV5B,IACAA,GAAgB,EAChBF,EAAMiB,QACNlB,EAAQgC,aACR7H,EAAI,EACJwH,GAAe,EACfrC,EAAkB,EAAAb,WAAWH,OAC7BqB,EAASvD,SAGTkE,EAAc,CAOd,GANAX,EAASsC,aAEJ,EAAAxD,WAAWf,aACZiC,EAASvD,QAGT,EAAAqC,WAAWJ,qBAAsB,CACjCwB,EAAQqC,YAAc,eACtB,IAAMC,EAAgBtC,EAAQC,UAC9BD,EAAQC,UAAY,EAEpBC,EAAQqC,KAAKvC,EAAS,EAAApB,WAAWD,kBAAoBiD,EAAOtH,GAE5D0F,EAAQC,UAAYqC,EAkBxB,GAfI,EAAA1D,WAAWP,iBACX2B,EAAQqC,YAAc,EAAAzD,WAAWf,YAAc,yBAA2B,wBAC1EsC,EAAQqC,YAAYxC,EAAS,EAAApB,WAAWH,MAAOnE,IAG/C,EAAAsE,WAAWL,eACXyB,EAAQqC,YAAc,QACtBlC,EAAQsC,UAAUzC,EAAS,EAAApB,WAAWH,MAAOnE,IAG7C,EAAAsE,WAAWN,kBACX0B,EAAQqC,YAAc,EAAAzD,WAAWf,YAAc,qBAAuB,MACtEsC,EAAQuC,gBAAgB1C,EAAS,EAAApB,WAAWH,MAAOnE,IAGnD,EAAAsE,WAAWD,kBAAmB,CAC9BqB,EAAQqC,YAAc,EAAAzD,WAAWf,YAAc,yBAA2B,QAC1E,IAAMY,EAAQ,EAAAG,WAAWH,MAAQnE,EAAIsH,EACrCzB,EAAQwC,sBAAsB3C,EAASvB,EAAOmD,GAC9CnC,EAAkBhB,IAI1BgC,GAAgBqB,EAGpBL,sBAAsBC,MAyB9BkB,I,8EChIA,iBAII,WAAmBC,GACfnE,KAAKoE,OAASC,SAASC,eAAeH,GACtCnE,KAAKsB,QAAUtB,KAAKoE,OAAOG,WAAW,MAa9C,OAVW,YAAAb,WAAP,WACQ1D,KAAKoE,OAAOI,QAAUxE,KAAKoE,OAAOK,aAAezE,KAAKoE,OAAOM,SAAW1E,KAAKoE,OAAOO,eACpF3E,KAAKoE,OAAOI,MAAQxE,KAAKoE,OAAOK,YAChCzE,KAAKoE,OAAOM,OAAS1E,KAAKoE,OAAOO,eAIlC,YAAA9G,MAAP,WACImC,KAAKsB,QAAQsD,UAAU,EAAG,EAAG5E,KAAKoE,OAAOI,MAAOxE,KAAKoE,OAAOM,SAEpE,EAnBA,GAsBI,EAAArD,Y,8ECzBJ,WAUA,aAOI,wBACIrB,KAAKhB,MAAQ,EAAAkB,WAAWlB,MACxBgB,KAAK6E,QAAS,EACd7E,KAAK8E,eAAiB,CAClBC,UAAW,EACXC,SAAU,GAGd,EAAA9E,WAAW+E,qBAAqBnD,MAAK,WAAM,SAAKoD,SAAS,EAAAhF,WAAWlB,UAEpEgB,KAAK2C,QA6Cb,OA1CW,YAAAA,MAAP,WACI3C,KAAK6E,QAAS,EACd7E,KAAK8E,eAAeC,UAAY,EAChC/E,KAAK8E,eAAeE,SAAWtE,YAAYC,MAC3CX,KAAKkF,SAAS,EAAAhF,WAAWlB,QAGtB,YAAAkG,SAAP,SAAgBlG,GACZgB,KAAKmF,mBACLnF,KAAKhB,MAAQA,GAGV,YAAAwE,MAAP,WACSxD,KAAK6E,SACN7E,KAAKmF,mBACLnF,KAAK6E,QAAS,IAIf,YAAAvB,OAAP,WACQtD,KAAK6E,SACL7E,KAAKmF,mBACLnF,KAAK6E,QAAS,IAItB,sBAAW,uBAAQ,C,IAAnB,WACI,OAAO7E,KAAK6E,Q,gCAGhB,sBAAW,sBAAO,C,IAAlB,WACI,OAAI7E,KAAK6E,OACE7E,KAAK8E,eAAeC,UAGxB/E,KAAK8E,eAAeC,UAAY/E,KAAKhB,OAAS0B,YAAYC,MAAQX,KAAK8E,eAAeE,W,gCAGzF,YAAAG,iBAAR,WACInF,KAAK8E,eAAeC,UAAY/E,KAAKiD,QACrCjD,KAAK8E,eAAeE,SAAWtE,YAAYC,OAEnD,EA9DA,GAiEI,EAAAgB,S,2PC3EJ,WACA,UACA,OACA,OACA,OASA,aASI,WAAmBa,GACfxC,KAAKwC,OAASA,EAGd,IADA,IAAI4C,EAAgC,EAC3B1K,EAAI,EAAGA,EAAIsF,KAAKwC,OAAOnE,OAAS,EAAG3D,IACxC0K,GAAsB,EAAAC,SAASrF,KAAKwC,OAAO9H,GAAIsF,KAAKwC,OAAO9H,EAAI,IAGnE,IAAI4K,EAA6BF,EAG3BG,EAAavF,KAAKwC,OAAO,GACzBgD,EAAYxF,KAAKwC,OAAOxC,KAAKwC,OAAOnE,OAAS,GAC9C,EAAAoH,OAAOF,EAAYC,KACpBF,GAAmB,EAAAD,SAASG,EAAWD,GACvCvF,KAAKwC,OAAOV,KAAK,CACb4D,EAAGH,EAAWG,EACdC,EAAGJ,EAAWI,KAItB3F,KAAK4F,WAAaN,EAClBtF,KAAKmD,qBAAuBiC,EAAqBE,EA8GzD,OAvGW,YAAAzB,KAAP,SAAYvC,EAAmC1F,GAC3C0F,EAAQuE,YACRvE,EAAQwE,OAAO9F,KAAKwC,OAAO,GAAGkD,EAAG1F,KAAKwC,OAAO,GAAGmD,GAEhD,IAIIjL,EAJEqL,EAA2BnK,EAAIoE,KAAK4F,WAEtCI,EAA2B,EAG/B,IAAKtL,EAAI,EAAGA,EAAIsF,KAAKwC,OAAOnE,OAAS,EAAG3D,IAAK,CACzC,IAAM8K,EAAYxF,KAAKwC,OAAO9H,GACxBuL,EAAYjG,KAAKwC,OAAO9H,EAAI,GAC5BwL,EAAgB,EAAAb,SAASG,EAAWS,GAE1C,KAAID,EAAgBE,EAAgBH,GAG7B,CACH,IAAMI,GAAuBJ,EAAgBC,GAAiBE,EACxDE,EAAa,EAAAC,YAAYb,EAAWS,EAAWE,GACrD7E,EAAQgF,OAAOF,EAAWV,EAAGU,EAAWT,GACxCK,GAAiB,EAAAX,SAASG,EAAWY,GACrC,MAPAJ,GAAiBE,EACjB5E,EAAQgF,OAAOL,EAAUP,EAAGO,EAAUN,GAU9CrE,EAAQiF,SACRjF,EAAQkF,aAGL,YAAA9D,qBAAP,SAA4B3C,GAkBpB,IAjBJ,IAAM0G,EAAY,IAAI,EAAA3F,UAEhB4F,EAAU9F,KAAKC,KAAK,EAAAX,WAAWyG,qBAAuB3G,KAAK4F,YAC3DgB,EAAW5G,KAAK4F,WAAac,EAC7BG,EAAK,EAAIH,EASTI,EAA6B,GAE3Bd,EAAgB,EAChBe,EAAiB,EACZC,EAAQ,EAAGA,EAAQN,EAASM,IAIjC,IAHA,IAAMC,GAAYD,EAAQ,IAAOH,EAC3Bd,GAAiBiB,EAAQ,IAAOJ,EAE7BM,EAASH,EAAgBG,EAASlH,KAAKwC,OAAOnE,OAAS,EAAG6I,IAAU,CACzE,IAAM1B,EAAYxF,KAAKwC,OAAO0E,GACxBjB,EAAYjG,KAAKwC,OAAO0E,EAAS,GACjChB,EAAgB,EAAAb,SAASG,EAAWS,GAE1C,KAAID,EAAgBE,EAAgBH,GAG7B,CACH,IAAMI,GAAuBJ,EAAgBC,GAAiBE,EACxDiB,EAAa,EAAAd,YAAYb,EAAWS,EAAWE,GACrDW,EAAQhF,KAAK,CACT4D,EAAGyB,EAAWzB,EACdC,EAAGwB,EAAWxB,EACdyB,SAAU,EAAIxG,KAAKyG,GAAKJ,IAE5B,MAVAjB,GAAiBE,EACjBa,EAAiBG,EAAS,EAgB1C,IADA,IAAMI,EAAsC,GACnC5M,EAAI,EAAGA,EAAI,EAAIqF,EAAQ,EAAGrF,IAAK,CACpC,IAAIyB,EAAIyE,KAAK2G,OAAO7M,EAAI,GAAK,GACzBA,EAAI,GAAKA,EAAI,GAAM,IACnByB,IAAM,GAKV,IAFA,IAAIqL,EAAK,EACLC,EAAK,EACY,MAAAX,EAAA,eAAS,CAAzB,IAAMY,EAAM,KACPC,EAAaxL,EAAIuL,EAAON,SACxBQ,EAAMhH,KAAKgH,IAAID,GACfE,EAAMjH,KAAKiH,IAAIF,GAErBH,GAAMX,GAAMa,EAAOhC,EAAIkC,EAAMF,EAAO/B,EAAIkC,GACxCJ,GAAMZ,GAAMa,EAAO/B,EAAIiC,EAAMF,EAAOhC,EAAImC,GAG5CP,EAAaxF,KAAK,CACdgG,UAAWlH,KAAKmH,KAAKP,EAAKA,EAAKC,EAAKA,GACpCO,MAAOpH,KAAKqH,MAAMR,EAAID,GACtBrL,EAAC,IAMT,OAFA+L,EAAI5H,QAAQ,YAAYP,EAAK,6BAA6B2G,EAAO,yBACvDD,EAAU0B,aAAY,QACzB,IAAI,EAAAC,cAAcd,EAActH,KAAK4F,aAEpD,EA7IA,GAgJI,EAAAnD,e,8EC7JJ,WAUM4F,EAAS,EAAIzH,KAAKyG,GAOxB,aAOI,WAAmBC,EAAqCgB,GACpDtI,KAAKsH,aAAeA,EAEpBtH,KAAKuI,aAAe,GACpBvI,KAAKwI,cAAgB,GAAK,EAAAtI,WAAWuI,eAAiBH,GAsK9D,OAnKW,YAAA7E,WAAP,WACIzD,KAAKuI,aAAe,IAGjB,YAAAxE,UAAP,SAAiBzC,EAAmCvB,EAAenE,GAC3DmE,IAAUC,KAAK0I,oBACf1I,KAAK0I,kBAAoB3I,EACzBC,KAAKyD,cAST,IALA,IAGIkF,EAHEC,EAAoBhN,EAAIoE,KAAKwI,cAC7BK,EAA6BjI,KAAK2G,MAAMqB,GACxCE,EAA6BlI,KAAKC,KAAK+H,GAGpClO,EAAIsF,KAAKuI,aAAalK,OAAQ3D,GAAKmO,EAA4BnO,IACpEiO,EAAQ3I,KAAK+I,aAAahJ,EAAOrF,EAAIsF,KAAKwI,eAC1CxI,KAAKuI,aAAazG,KAAK6G,GAI3BrH,EAAQuE,YACRvE,EAAQwE,OAAO9F,KAAKuI,aAAa,GAAG7C,EAAG1F,KAAKuI,aAAa,GAAG5C,GAC5D,IAASjL,EAAI,EAAGA,EAAIoO,EAA4BpO,IAC5C4G,EAAQgF,OAAOtG,KAAKuI,aAAa7N,GAAGgL,EAAG1F,KAAKuI,aAAa7N,GAAGiL,GAGhEgD,EAAQ3I,KAAK+I,aAAahJ,EAAOnE,GACjC0F,EAAQgF,OAAOqC,EAAMjD,EAAGiD,EAAMhD,GAE9BrE,EAAQiF,SACRjF,EAAQkF,aAGL,YAAAvC,sBAAP,SAA6B3C,EAAmCvB,EAAenE,GAC3EmE,EAAQa,KAAK2C,IAAIxD,EAAO,IAAOC,KAAKsH,aAAajJ,OAAS,GAAK,MAE/DiD,EAAQuE,YAER,IAAMN,EAAavF,KAAKgJ,yBAAyBjJ,EAAO,GACxDuB,EAAQwE,OAAOP,EAAWG,EAAGH,EAAWI,GAGxC,IADA,IAAMe,EAAU9K,EAAIoE,KAAKwI,cAChB9N,EAAI,EAAGA,EAAIgM,EAAShM,IAAK,CAC9B,IAAM8B,EAAIwD,KAAKgJ,yBAAyBjJ,EAAOrF,EAAIsF,KAAKwI,eACxDlH,EAAQgF,OAAO9J,EAAEkJ,EAAGlJ,EAAEmJ,GAG1BrE,EAAQiF,SACRjF,EAAQkF,aAQL,YAAAxC,gBAAP,SAAuB1C,EAAmCvB,EAAenE,GACrE,IAAMqN,EAAMjJ,KAAKkJ,4BAA4BnJ,GAC7C,KAAIkJ,GAAO,GAAX,CAIA,IAAIvD,EAAI1F,KAAKsH,aAAa,GAAGQ,UAAYlH,KAAKgH,IAAI5H,KAAKsH,aAAa,GAAGU,OACnErC,EAAI3F,KAAKsH,aAAa,GAAGQ,UAAYlH,KAAKiH,IAAI7H,KAAKsH,aAAa,GAAGU,OAEjEmB,EAAWd,EAASzM,EAE1B0F,EAAQuE,YACRvE,EAAQwE,OAAOJ,EAAGC,GAElB,IAAK,IAAIjL,EAAI,EAAGA,EAAIuO,EAAKvO,IAAK,CAC1B,IAAM0O,EAAcpJ,KAAKsH,aAAa5M,GAChCiN,EAAawB,EAAWC,EAAYjN,EAC1CuJ,GAAK0D,EAAYtB,UAAYlH,KAAKgH,IAAID,EAAayB,EAAYpB,OAC/DrC,GAAKyD,EAAYtB,UAAYlH,KAAKiH,IAAIF,EAAayB,EAAYpB,OAE/D1G,EAAQgF,OAAOZ,EAAGC,GAGtBrE,EAAQiF,SACRjF,EAAQkF,cAQL,YAAA1C,YAAP,SAAmBxC,EAAmCvB,EAAenE,GAQjE,IAAMqN,EAAMjJ,KAAKkJ,4BAA4BnJ,GAC7C,KAAIkJ,EAAM,GASV,IALA,IAZoBI,EAAiBC,EAAiBC,EAYhDJ,EAAWd,EAASzM,EAEtB8J,EAAI,EACJC,EAAI,EAECjL,EAAI,EAAGA,EAAIuO,EAAKvO,IAAK,CAC1B,IAAM0O,EAAcpJ,KAAKsH,aAAa5M,GAElCA,EAAI,IApBQ2O,EAqBD3D,EArBkB4D,EAqBf3D,EArBgC4D,EAqB7BH,EAAYtB,UApBjCxG,EAAQuE,YACRvE,EAAQkI,IAAIH,EAASC,EAASC,EAAQ,EAAGlB,GACzC/G,EAAQkF,YACRlF,EAAQiF,UAoBR,IAAMoB,EAAawB,EAAWC,EAAYjN,EAC1CuJ,GAAK0D,EAAYtB,UAAYlH,KAAKgH,IAAID,EAAayB,EAAYpB,OAC/DrC,GAAKyD,EAAYtB,UAAYlH,KAAKiH,IAAIF,EAAayB,EAAYpB,SAK/D,YAAAe,aAAR,SAAqBhJ,EAAenE,GAKhC,IAJA,IAAI8J,EAAI,EACJC,EAAI,EAEFsD,EAAMjJ,KAAKkJ,4BAA4BnJ,GACpCrF,EAAI,EAAGA,EAAIuO,EAAKvO,IAAK,CAC1B,IAAM0O,EAAcpJ,KAAKsH,aAAa5M,GAChCiN,EAAaU,EAASe,EAAYjN,EAAIP,EAC5C8J,GAAK0D,EAAYtB,UAAYlH,KAAKgH,IAAID,EAAayB,EAAYpB,OAC/DrC,GAAKyD,EAAYtB,UAAYlH,KAAKiH,IAAIF,EAAayB,EAAYpB,OAGnE,MAAO,CAAEtC,EAAC,EAAEC,EAAC,IAGT,YAAAqD,yBAAR,SAAiCjJ,EAAenE,GAK5C,IAJA,IAAI8J,EAAI,EACJC,EAAI,EAEF4B,EAAQvH,KAAKkJ,4BAA4BtI,KAAK2G,MAAMxH,IACjDrF,EAAI,EAAGA,EAAI6M,EAAO7M,IAAK,CAC5B,IAAM0O,EAAcpJ,KAAKsH,aAAa5M,GAChCiN,EAAaU,EAASe,EAAYjN,EAAIP,EAC5C8J,GAAK0D,EAAYtB,UAAYlH,KAAKgH,IAAID,EAAayB,EAAYpB,OAC/DrC,GAAKyD,EAAYtB,UAAYlH,KAAKiH,IAAIF,EAAayB,EAAYpB,OAGnE,IAAMyB,EAAI1J,EAAQ,EAClB,IAASrF,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAClB0O,EAAcpJ,KAAKsH,aAAaC,EAAQ7M,GACxCiN,EAAaU,EAASe,EAAYjN,EAAIP,EAC5C8J,GAAK+D,EAAIL,EAAYtB,UAAYlH,KAAKgH,IAAID,EAAayB,EAAYpB,OACnErC,GAAK8D,EAAIL,EAAYtB,UAAYlH,KAAKiH,IAAIF,EAAayB,EAAYpB,OAGvE,MAAO,CAACtC,EAAC,EAAEC,EAAC,IAGR,YAAAuD,4BAAR,SAAoCnJ,GAChC,OAAOa,KAAK2C,IAAIvD,KAAKsH,aAAajJ,OAAQ,EAAI,EAAI0B,IAE1D,EAjLA,GAqLI,EAAAqI,iB,8EC5KA,EAAA/B,YApBJ,SAAqBqD,EAAYC,EAAY/N,GACzC,MAAO,CACH8J,EAAGgE,EAAGhE,GAAK,EAAI9J,GAAK+N,EAAGjE,EAAI9J,EAC3B+J,EAAG+D,EAAG/D,GAAK,EAAI/J,GAAK+N,EAAGhE,EAAI/J,IAe/B,EAAAyJ,SAXJ,SAAkBqE,EAAYC,GAC1B,IAAMC,EAAKF,EAAGhE,EAAIiE,EAAGjE,EACfmE,EAAKH,EAAG/D,EAAIgE,EAAGhE,EACrB,OAAO/E,KAAKmH,KAAK6B,EAAKA,EAAKC,EAAKA,IAShC,EAAApE,OANJ,SAAgBiE,EAAYC,GACxB,OAAOD,EAAGhE,IAAMiE,EAAGjE,GAAKgE,EAAG/D,IAAMgE,EAAGhE,I,2PCpBxC,IAKKmE,EALL,UAEA,QAGA,SAAKA,GACD,sBACA,cACA,gBACA,YACA,cACA,sBACA,gBACA,gBACA,kBACA,kBAVJ,CAAKA,MAAO,KA4GR,EAAAA,UA/FJ,IAAMC,EAAc,IAMpB,2BAsFA,OArFkB,EAAAxH,UAAd,SAAwB5E,EAAiBqM,EAAsBC,GAC3D,IAAMxD,EAAY,IAAI,EAAA3F,UAClBoJ,GAAY,EAEhB,SAASC,EAAmB3H,GAOxB,IANA,IAAM4H,EAAUxJ,KAAK2C,IAAIyG,EAAW,GAAKD,EAAaC,EAAW,GAAKD,GAChEM,EAAU,IAAOL,EAAW,GAAKD,EAAcK,GAC/CE,EAAU,IAAON,EAAW,GAAKD,EAAcK,GAG/CG,EAAiB,GACH,MAAA/H,EAAA,eAAQ,CAAvB,IAAMmG,EAAK,KACZ4B,EAAKzI,KAAK,CACN4D,EAAGiD,EAAMjD,EAAI0E,EAAUC,EACvB1E,EAAGgD,EAAMhD,EAAIyE,EAAUE,IAI3BJ,EACAhC,EAAI5H,QAAQ,qBAAqB3C,EAAM,mBAAmB8I,EAAU0B,aAAY,OAEhFD,EAAI5H,QAAQ,sBAAsB3C,EAAM,QAAQ8I,EAAU0B,aAAY,QAG1E8B,EAASM,GAGb,QAA6B,IAAlBjI,EAAQkI,MACflI,EAAQkI,MAAQ,QACb,QAAqC,IAA1BlI,EAAQkI,MAAM7M,GAG5B,OAFAuM,GAAY,OACZC,EAAmB7H,EAAQkI,MAAM7M,IAIrC,IAAM8M,EAAM,IAAIC,eAEhBD,EAAIE,iBAAiB,oBAAoB,WACrC,GAAIF,EAAIG,aAAeF,eAAeG,MAAuB,MAAfJ,EAAIK,OAAgB,CAC9D,IAAMC,EAAiBzI,EAAQ0I,oBAAoBP,EAAIQ,cAEhC,OAAnBF,IACAzI,EAAQkI,MAAM7M,GAAUoN,EACxBZ,EAAmB7H,EAAQkI,MAAM7M,SAK7C8M,EAAIS,KAAK,MAAO,aAAavN,EAAM,QACnC8M,EAAIU,QAOO,EAAAH,oBAAf,SAAmCI,GAC/B,IAAKA,EACD,OAAO,KAQX,IALA,IAAM3E,EAAY,IAAI,EAAA3F,UAEhB0B,EAAmB,GAGN,MADK4I,EAAKC,MAAM,MAChB,eAAO,CAArB,IACKC,EADK,KACUD,MAAM,KAC3B,GAAuB,IAAnBC,EAAQjN,OACR,OAAO,KAGXmE,EAAOV,KAAK,CACR4D,GAAI4F,EAAQ,GACZ3F,GAAI2F,EAAQ,KAIpB,OAAI9I,EAAOnE,QAAU,EACV,MAGX6J,EAAI5H,QAAQ,oBAAoBmG,EAAU0B,aAAY,QAC/C3F,IAEf,EAtFA,GA0FI,EAAAF","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import { EPreset } from \"./presets\";\r\n\r\ndeclare const Button: any;\r\n// declare const Canvas: any;\r\ndeclare const Checkbox: any;\r\ndeclare const Controls: any;\r\n// declare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\ndeclare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRESET: \"preset-picker-id\",\r\n    MODE: \"mode-picker-id\",\r\n    SPEED: \"speed-range-id\",\r\n    PERSISTENCE: \"persistence-checkbox-id\",\r\n    CLOSE_LOOP: \"close-loop-checkbox-id\",\r\n    REPEAT: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n};\r\n\r\nenum EMode {\r\n    INSTANT = \"0\",\r\n    PROGRESSIVE = \"1\",\r\n}\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\ntype SpeedObserver = (previousSpeed: number) => void;\r\n\r\nfunction callObservers(observersList: GenericObserver[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: SpeedObserver[];\r\n    presetChange: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n    presetChange: [],\r\n};\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet preset: EPreset;\r\nfunction tryParsePreset(p: string): void {\r\n    const previousValue = preset;\r\n    preset = p as EPreset;\r\n\r\n    if (preset !== previousValue) {\r\n        callObservers(observers.presetChange);\r\n    }\r\n}\r\nPicker.addObserver(controlId.PRESET, tryParsePreset);\r\ntryParsePreset(Picker.getValue(controlId.PRESET));\r\n\r\nlet mode: EMode;\r\nfunction parseAndApplyMode(newModes: string[]): void {\r\n    if (newModes.length !== 1) {\r\n        return;\r\n    }\r\n\r\n    const newMode = newModes[0] as EMode;\r\n    if (newMode !== mode) {\r\n        mode = newMode;\r\n\r\n        const isInstant = (mode === EMode.INSTANT);\r\n        Controls.setVisibility(controlId.DISPLAY_CIRCLES, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_SEGMENTS, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_CURVE, isInstant);\r\n\r\n        callObservers(observers.clear);\r\n    }\r\n}\r\nparseAndApplyMode(Tabs.getValues(controlId.MODE));\r\nTabs.addObserver(controlId.MODE, parseAndApplyMode);\r\n\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    const previous = speed;\r\n    speed = s;\r\n\r\n    for (const observer of observers.speedChange) {\r\n        observer(previous);\r\n    }\r\n});\r\n\r\nlet persistence: boolean = Checkbox.isChecked(controlId.PERSISTENCE);\r\nCheckbox.addObserver(controlId.PERSISTENCE, (checked: boolean) => {\r\n    persistence = checked;\r\n});\r\n\r\nlet closeLoop: boolean = Checkbox.isChecked(controlId.CLOSE_LOOP);\r\nCheckbox.addObserver(controlId.CLOSE_LOOP, (checked: boolean) => {\r\n    closeLoop = checked;\r\n\r\n    if (mode === EMode.PROGRESSIVE) {\r\n        callObservers(observers.clear);\r\n    }\r\n});\r\n\r\nlet repeat: boolean = Checkbox.isChecked(controlId.REPEAT);\r\nCheckbox.addObserver(controlId.REPEAT, (checked: boolean) => {\r\n    repeat = checked;\r\n});\r\n\r\nButton.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\n/* === INTERFACE ====================================================== */\r\n/**\r\n * Class giving access to all the parameters of the application. Also gives access to event handlers.\r\n */\r\nclass Parameters {\r\n    public static get preset(): EPreset {\r\n        return preset;\r\n    }\r\n\r\n    public static get isProgressiveMode(): boolean {\r\n        return mode === EMode.PROGRESSIVE;\r\n    }\r\n\r\n    public static get speed(): number {\r\n        if (this.isProgressiveMode) {\r\n            return 0.1 * speed;\r\n        }\r\n        return speed;\r\n    }\r\n\r\n    public static get persistence(): boolean {\r\n        return persistence;\r\n    }\r\n\r\n    public static get closeLoop(): boolean {\r\n        return closeLoop;\r\n    }\r\n\r\n    public static get repeat(): boolean {\r\n        return repeat;\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return mode === EMode.INSTANT && displayCircles;\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return mode === EMode.INSTANT && displaySegments;\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return mode === EMode.INSTANT && displayCurve;\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): SpeedObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n    public static get presetObservers(): GenericObserver[] {\r\n        return observers.presetChange;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","let enabled = true;\r\n\r\nfunction setEnabled(e: boolean): void {\r\n    enabled = e;\r\n}\r\n\r\nfunction message(m: string): void {\r\n    if (enabled) {\r\n        console.log(m);\r\n    }\r\n}\r\n\r\nexport {\r\n    setEnabled,\r\n    message,\r\n};\r\n","/**\r\n * Class for measuring execution performance.\r\n */\r\nclass StopWatch {\r\n    private readonly start: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.start = performance.now();\r\n    }\r\n\r\n    public get milliseconds(): number {\r\n        return Math.ceil(performance.now() - this.start);\r\n    }\r\n}\r\n\r\nexport {\r\n    StopWatch,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Clock } from \"./clock\";\r\nimport { FourierSeries } from \"./fourier-series\";\r\nimport { LineDrawing } from \"./line-drawing\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { IPoint } from \"./point\";\r\nimport { Presets } from \"./presets\";\r\nimport { TimeUnit } from \"./units\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction setOrderIndicator(value: number): void {\r\n    value = Math.round(10 * value) / 10;\r\n    Canvas.setIndicatorText(\"fourier-order\", value.toLocaleString());\r\n}\r\n\r\nfunction main(): void {\r\n    const canvas2D = new Canvas2D(\"canvas\");\r\n    const context = canvas2D.context;\r\n    context.lineWidth = 1;\r\n\r\n    let drawing: LineDrawing = null;\r\n    let fourier: FourierSeries = null;\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n\r\n    let needToRedraw = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    const loopDuration = 2000; // milliseconds, at normal speed\r\n    function mainLoop(): void {\r\n        if (drawing !== null && fourier !== null) { // checks that preset is loaded\r\n            let t: TimeUnit = clock.current / loopDuration;\r\n            const maxT: TimeUnit = Parameters.closeLoop ? 1 : drawing.originalPathDuration;\r\n            let finishedLoop = (t >= maxT);\r\n\r\n            if (!finishedLoop && clock.isPaused) {\r\n                clock.resume();\r\n            }\r\n\r\n            t = Math.min(t, maxT);\r\n\r\n            if (finishedLoop) {\r\n                if (Parameters.repeat) {\r\n                    needToRestart = true;\r\n                } else {\r\n                    clock.pause();\r\n                }\r\n            }\r\n\r\n            if (needToRestart) {\r\n                needToRestart = false;\r\n                clock.reset();\r\n                fourier.resetCurve();\r\n                t = 0;\r\n                finishedLoop = false;\r\n                setOrderIndicator(Parameters.order);\r\n                canvas2D.clear();\r\n            }\r\n\r\n            if (needToRedraw) {\r\n                canvas2D.adjustSize();\r\n\r\n                if (!Parameters.persistence) {\r\n                    canvas2D.clear();\r\n                }\r\n\r\n                if (Parameters.displayOriginalCurve) {\r\n                    context.strokeStyle = \"rgb(0,128,0)\";\r\n                    const previousWidth = context.lineWidth;\r\n                    context.lineWidth = 2;\r\n\r\n                    drawing.draw(context, Parameters.isProgressiveMode ? maxT : t);\r\n\r\n                    context.lineWidth = previousWidth;\r\n                }\r\n\r\n                if (Parameters.displayCircles) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"rgba(255,255,255,0.3)\";\r\n                    fourier.drawCircles(context, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displayCurve) {\r\n                    context.strokeStyle = \"white\";\r\n                    fourier.drawCurve(context, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displaySegments) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,0,0,0.01)\" : \"red\";\r\n                    fourier.drawPathToPoint(context, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.isProgressiveMode) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"white\";\r\n                    const order = Parameters.order * t / maxT;\r\n                    fourier.drawCurvePartialOrder(context, order, maxT);\r\n                    setOrderIndicator(order);\r\n                }\r\n            }\r\n\r\n            needToRedraw = !finishedLoop;\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    function loadPreset(): void {\r\n        drawing = null;\r\n        fourier = null;\r\n\r\n        const canvasSize: number[] = Canvas.getSize();\r\n        Canvas.showLoader(true);\r\n        Presets.getPreset(Parameters.preset, canvasSize, (points: IPoint[]) => {\r\n            drawing = new LineDrawing(points);\r\n            fourier = drawing.computeFourierSeries(300);\r\n            needToRestart = true;\r\n            clock.reset();\r\n            Canvas.showLoader(false);\r\n        });\r\n    }\r\n\r\n    Parameters.presetObservers.push(loadPreset);\r\n    Canvas.Observers.canvasResize.push(loadPreset);\r\n\r\n    loadPreset();\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","/**\r\n * Class for instancing and using a 2D HTML Canvas.\r\n */\r\nclass Canvas2D {\r\n    public readonly context: CanvasRenderingContext2D;\r\n    private readonly canvas: HTMLCanvasElement;\r\n\r\n    public constructor(canvasElementId: string) {\r\n        this.canvas = document.getElementById(canvasElementId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext(\"2d\");\r\n    }\r\n\r\n    public adjustSize(): void {\r\n        if (this.canvas.width !== this.canvas.clientWidth || this.canvas.height !== this.canvas.clientHeight) {\r\n            this.canvas.width = this.canvas.clientWidth;\r\n            this.canvas.height = this.canvas.clientHeight;\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n}\r\n\r\nexport {\r\n    Canvas2D,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\n\r\ninterface IClockCheckpoint {\r\n    clockTime: DOMHighResTimeStamp; // in the clock temporality\r\n    realTime: DOMHighResTimeStamp; // in the Javascript temporality\r\n}\r\n\r\n/**\r\n * This class handles the measuring of time at a variable speed.\r\n */\r\nclass Clock {\r\n    private speed: number;\r\n    private paused: boolean;\r\n\r\n    /* This checkpoint system is used to avoid floating point approximations when computing current time. */\r\n    private lastCheckpoint: IClockCheckpoint;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        this.paused = false;\r\n        this.lastCheckpoint = {\r\n            clockTime: 0,\r\n            realTime: 0,\r\n        };\r\n\r\n        Parameters.speedChangeObservers.push(() => this.setSpeed(Parameters.speed));\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.paused = false;\r\n        this.lastCheckpoint.clockTime = 0;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n        this.setSpeed(Parameters.speed);\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.createCheckpoint();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = true;\r\n        }\r\n    }\r\n\r\n    public resume(): void {\r\n        if (this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = false;\r\n        }\r\n    }\r\n\r\n    public get isPaused(): boolean {\r\n        return this.paused;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        if (this.paused) {\r\n            return this.lastCheckpoint.clockTime;\r\n        }\r\n\r\n        return this.lastCheckpoint.clockTime + this.speed * (performance.now() - this.lastCheckpoint.realTime);\r\n    }\r\n\r\n    private createCheckpoint(): void {\r\n        this.lastCheckpoint.clockTime = this.current;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n    }\r\n}\r\n\r\nexport {\r\n    Clock,\r\n};\r\n","import { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport * as Log from \"./log\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { distance, equals, interpolate, IPoint } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\n/**\r\n * Represents a 2D line parametrized by a 1D input.\r\n * The line is 1-periodic: [0,1] -> RxR.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass LineDrawing {\r\n    public readonly pathLength: SpaceUnit; // Length of the total path in space-units\r\n    public readonly originalPathDuration: TimeUnit; // Length of the original path in time-units\r\n    private readonly points: IPoint[];\r\n\r\n    /**\r\n     * Builds a LineDrawing from the input points.\r\n     * If the input is not periodic, then we extend it with a last point to make the LineDrawing periodic.\r\n     */\r\n    public constructor(points: IPoint[]) {\r\n        this.points = points;\r\n\r\n        let originalPathLength: SpaceUnit = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            originalPathLength += distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        let totalPathLength: SpaceUnit = originalPathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (!equals(firstPoint, lastPoint)) {\r\n            totalPathLength += distance(lastPoint, firstPoint);\r\n            this.points.push({\r\n                x: firstPoint.x,\r\n                y: firstPoint.y,\r\n            });\r\n        }\r\n\r\n        this.pathLength = totalPathLength;\r\n        this.originalPathDuration = originalPathLength / totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Draws the line portion between 0 and t.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public draw(context: CanvasRenderingContext2D, t: TimeUnit): void {\r\n        context.beginPath();\r\n        context.moveTo(this.points[0].x, this.points[0].y);\r\n\r\n        const desiredLength: SpaceUnit = t * this.pathLength;\r\n\r\n        let currentLength: SpaceUnit = 0;\r\n\r\n        let i: number;\r\n        for (i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                context.lineTo(nextPoint.x, nextPoint.y);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                context.lineTo(finalPoint.x, finalPoint.y);\r\n                currentLength += distance(lastPoint, finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const stopwatch = new StopWatch();\r\n\r\n        const nbSteps = Math.ceil(Parameters.integrationPrecision * this.pathLength);\r\n        const stepSize = this.pathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        Log.message(`Computed ${order} Fourier coefficient with ${nbSteps} integration steps ` +\r\n            `in ${stopwatch.milliseconds} ms.`);\r\n        return new FourierSeries(coefficients, this.pathLength);\r\n    }\r\n}\r\n\r\nexport {\r\n    LineDrawing,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\nimport { IPoint } from \"./point\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Represents the Fourier development of a 1-periodic [0,1] -> RxR signal.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass FourierSeries {\r\n    private readonly coefficients: IFourierCoefficient[];\r\n\r\n    private readonly curveStepSize: SpaceUnit;\r\n    private partialCurve: IPoint[];\r\n    private partialCurveOrder: number;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], totalLength: SpaceUnit) {\r\n        this.coefficients = coefficients;\r\n\r\n        this.partialCurve = [];\r\n        this.curveStepSize = 1 / (Parameters.curvePrecision * totalLength);\r\n    }\r\n\r\n    public resetCurve(): void {\r\n        this.partialCurve = [];\r\n    }\r\n\r\n    public drawCurve(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        if (order !== this.partialCurveOrder) {\r\n            this.partialCurveOrder = order;\r\n            this.resetCurve();\r\n        }\r\n\r\n        // Compute partial curve\r\n        const currentPointIndex = t / this.curveStepSize;\r\n        const lastConsolidatedPointIndex = Math.floor(currentPointIndex);\r\n        const nextConsolidatedPointIndex = Math.ceil(currentPointIndex);\r\n        let point: IPoint;\r\n\r\n        for (let i = this.partialCurve.length; i <= lastConsolidatedPointIndex; i++) {\r\n            point = this.computePoint(order, i * this.curveStepSize);\r\n            this.partialCurve.push(point);\r\n        }\r\n\r\n        // Draw partial curve\r\n        context.beginPath();\r\n        context.moveTo(this.partialCurve[0].x, this.partialCurve[0].y);\r\n        for (let i = 1; i < nextConsolidatedPointIndex; i++) {\r\n            context.lineTo(this.partialCurve[i].x, this.partialCurve[i].y);\r\n        }\r\n\r\n        point = this.computePoint(order, t);\r\n        context.lineTo(point.x, point.y);\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public drawCurvePartialOrder(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        order = Math.min(order, 0.5 * (this.coefficients.length - 1) - 0.001);\r\n\r\n        context.beginPath();\r\n\r\n        const firstPoint = this.computePointPartialOrder(order, 0);\r\n        context.moveTo(firstPoint.x, firstPoint.y);\r\n\r\n        const nbSteps = t / this.curveStepSize;\r\n        for (let i = 1; i < nbSteps; i++) {\r\n            const p = this.computePointPartialOrder(order, i * this.curveStepSize);\r\n            context.lineTo(p.x, p.y);\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, t] portion of the approximated curve.\r\n     * @param order Maximum Fourier order to use. Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawPathToPoint(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        if (max <= 0) {\r\n            return;\r\n        }\r\n\r\n        let x = this.coefficients[0].magnitude * Math.cos(this.coefficients[0].phase);\r\n        let y = this.coefficients[0].magnitude * Math.sin(this.coefficients[0].phase);\r\n\r\n        const TWO_PI_T = TWO_PI * t;\r\n\r\n        context.beginPath();\r\n        context.moveTo(x, y);\r\n\r\n        for (let i = 1; i < max; i++) {\r\n            const coefficient = this.coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI_T * coefficient.n;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n\r\n            context.lineTo(x, y);\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    /**\r\n     * Draws the circles representing the Fourier coefficients used to compute the point position at t.\r\n     * @param order Maximum Fourier order to use. Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCircles(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        function drawCircle(centerX: number, centerY: number, radius: number): void {\r\n            context.beginPath();\r\n            context.arc(centerX, centerY, radius, 0, TWO_PI);\r\n            context.closePath();\r\n            context.stroke();\r\n        }\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        if (max < 2) {\r\n            return;\r\n        }\r\n\r\n        const TWO_PI_T = TWO_PI * t;\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this.coefficients[i];\r\n\r\n            if (i > 1) {\r\n                drawCircle(x, y, coefficient.magnitude);\r\n            }\r\n\r\n            const TWO_PI_N_T = TWO_PI_T * coefficient.n;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    private computePoint(order: number, t: number): IPoint {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this.coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        return { x, y };\r\n    }\r\n\r\n    private computePointPartialOrder(order: number, t: number): IPoint {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const floor = this.computeAmountOfCoefficients(Math.floor(order));\r\n        for (let i = 0; i < floor; i++) {\r\n            const coefficient = this.coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        const f = order % 1;\r\n        for (let i = 0; i < 2; i++) {\r\n            const coefficient = this.coefficients[floor + i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += f * coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += f * coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        return {x, y};\r\n    }\r\n\r\n    private computeAmountOfCoefficients(order: number): number {\r\n        return Math.min(this.coefficients.length, 1 + 2 * order);\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n/* Assumes t is between 0 and 1 included. */\r\nfunction interpolate(p1: IPoint, p2: IPoint, t: number): IPoint {\r\n    return {\r\n        x: p1.x * (1 - t) + p2.x * t,\r\n        y: p1.y * (1 - t) + p2.y * t,\r\n    };\r\n}\r\n\r\nfunction distance(p1: IPoint, p2: IPoint): number {\r\n    const dX = p1.x - p2.x;\r\n    const dY = p1.y - p2.y;\r\n    return Math.sqrt(dX * dX + dY * dY);\r\n}\r\n\r\nfunction equals(p1: IPoint, p2: IPoint): boolean {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\nexport {\r\n    distance,\r\n    equals,\r\n    interpolate,\r\n    IPoint,\r\n};\r\n","import * as Log from \"./log\";\r\nimport { IPoint } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\n\r\n/* Enum values must match the values of the controls */\r\nenum EPreset {\r\n    ARLEQUIN = \"arlequin\",\r\n    BULL = \"bull\",\r\n    CAMEL = \"camel\",\r\n    DOG = \"dog\",\r\n    DOVE = \"dove\",\r\n    FLAMINGO = \"flamingo\",\r\n    HORSE = \"horse\",\r\n    MOUSE = \"mouse\",\r\n    WOMAN1 = \"woman1\",\r\n    WOMAN2 = \"woman2\",\r\n}\r\n\r\nconst PRESET_SIZE = 512; // a preset should be dimensionned for a 512 x 512 canvas\r\n\r\n/**\r\n * Class for retrieving on demand the preset drawings with AJAX requests.\r\n * Tries to minimize the request by using a memory cache.\r\n */\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, wantedSize: number[], callback: (array: IPoint[]) => any): void {\r\n        const stopwatch = new StopWatch();\r\n        let fromCache = false;\r\n\r\n        function safelyCallCallback(points: IPoint[]): void {\r\n            const scaling = Math.min(wantedSize[0] / PRESET_SIZE, wantedSize[1] / PRESET_SIZE);\r\n            const offsetX = 0.5 * (wantedSize[0] - PRESET_SIZE * scaling);\r\n            const offsetY = 0.5 * (wantedSize[1] - PRESET_SIZE * scaling);\r\n\r\n            /* Create a deep copy to keep the cache clean */\r\n            const copy: IPoint[] = [];\r\n            for (const point of points) {\r\n                copy.push({\r\n                    x: point.x * scaling + offsetX,\r\n                    y: point.y * scaling + offsetY,\r\n                });\r\n            }\r\n\r\n            if (fromCache) {\r\n                Log.message(`Retrieved preset '${preset}' from cache in ${stopwatch.milliseconds} ms`);\r\n            } else {\r\n                Log.message(`Downloaded preset '${preset}' in ${stopwatch.milliseconds} ms.`);\r\n            }\r\n\r\n            callback(copy);\r\n        }\r\n\r\n        if (typeof Presets.cache === \"undefined\") {\r\n            Presets.cache = {};\r\n        } else if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            fromCache = true;\r\n            safelyCallCallback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"readystatechange\", () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray !== null) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    safelyCallCallback(Presets.cache[preset]);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open(\"GET\", `resources/${preset}.txt`);\r\n        xhr.send();\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: IPoint[];\r\n    };\r\n\r\n    private static tryParsePointsArray(text: string): IPoint[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const stopwatch = new StopWatch();\r\n\r\n        const points: IPoint[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        Log.message(`Parsed preset in ${stopwatch.milliseconds} ms.`);\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n"],"sourceRoot":""}