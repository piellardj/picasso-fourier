{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/main.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/presets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","drawing","fourier","canvas","document","getElementById","context","getContext","width","height","lineWidth","fourierPoints","needToRestart","Parameters","clearObservers","push","lastUpdate","mainLoop","timestamp","dT","pathLength","speed","computePoint","order","Canvas","setIndicatorText","toLocaleString","clearRect","displayCircles","strokeStyle","drawCircles","displayCurve","beginPath","moveTo","x","y","point","lineTo","stroke","closePath","draw","displaySegments","drawPathToPoint","requestAnimationFrame","Presets","getPreset","EPreset","ARLEQUIN","points","computeFourierSeries","main","this","length","LineDrawing","distance","extendedPathLength","firstPoint","lastPoint","interpolate","p1","p2","dX","dY","Math","sqrt","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","nbSteps","ceil","stepSize","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","PI","coefficients","floor","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","phase","atan2","FourierSeries","TWO_PI","_coefficients","_length","computeRealT","max","computeAmountOfCoefficients","coefficient","centerX","centerY","radius","arc","min","controlId","observers","Range","setValue","display","Checkbox","setChecked","getValue","addObserver","isChecked","checked","observersList","observer","callObservers","preset","callback","cache","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","text","split","partial"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { FourierSeries } from \"./fourier-series\";\r\nimport LineDrawing from \"./line-drawing\";\r\nimport IPoint from \"./point\";\r\n\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport { EPreset, Presets } from \"./presets\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction main() {\r\n    const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n    const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n    canvas.width = 512;\r\n    canvas.height = 512;\r\n    context.lineWidth = 1;\r\n\r\n    let drawing: LineDrawing;\r\n    let fourier: FourierSeries;\r\n    let fourierPoints: IPoint[] = [];\r\n\r\n    let animationLength: number; // in milliseconds\r\n\r\n    let needToRestart: boolean = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n\r\n    let lastUpdate: DOMHighResTimeStamp = null;\r\n    let t = 0;\r\n    function mainLoop(timestamp: DOMHighResTimeStamp) {\r\n        const dT = (lastUpdate) ? timestamp - lastUpdate : 0;\r\n        lastUpdate = timestamp;\r\n\r\n        if (t < 1) {\r\n            const animationLength = 1000 * drawing.pathLength / (Parameters.speed + 0.001);\r\n            t += dT / animationLength;\r\n            fourierPoints.push(fourier.computePoint(Parameters.order, t));\r\n        }\r\n\r\n        if (needToRestart) {\r\n            needToRestart = false;\r\n            t = 0;\r\n            fourierPoints = [];\r\n            Canvas.setIndicatorText(\"fourier-order\", Parameters.order.toLocaleString());\r\n        }\r\n\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        fourierPoints.push(fourier.computePoint(Parameters.order, t));\r\n\r\n        if (Parameters.displayCircles) {\r\n            context.strokeStyle = \"rgba(255,255,255,0.3)\";\r\n            fourier.drawCircles(context, Parameters.order, t);\r\n        }\r\n\r\n        if (Parameters.displayCurve) {\r\n            context.strokeStyle = \"white\";\r\n            context.beginPath();\r\n            context.moveTo(fourierPoints[0].x, fourierPoints[0].y);\r\n            for (const point of fourierPoints) {\r\n                context.lineTo(point.x, point.y);\r\n            }\r\n            context.stroke();\r\n            context.closePath();\r\n        }\r\n\r\n        context.strokeStyle = \"green\";\r\n        drawing.draw(context, t);\r\n\r\n        if (Parameters.displaySegments) {\r\n            context.strokeStyle = \"red\";\r\n            fourier.drawPathToPoint(context, Parameters.order, t);\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    Presets.getPreset(EPreset.ARLEQUIN, (points: IPoint[]) => {\r\n        drawing = new LineDrawing(points);\r\n        fourier = drawing.computeFourierSeries(300);\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    });\r\n}\r\n\r\nmain();\r\n","import { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport IPoint from \"./point\";\r\nimport * as Presets from \"./presets\";\r\n\r\nclass LineDrawing {\r\n    /* Assumes t is between 0 and 1 included. */\r\n    private static interpolate(p1: IPoint, p2: IPoint, t: number): IPoint {\r\n        return {\r\n            x: p1.x * (1 - t) + p2.x * t,\r\n            y: p1.y * (1 - t) + p2.y * t,\r\n        };\r\n    }\r\n\r\n    private static distance(p1: IPoint, p2: IPoint): number {\r\n        const dX = p1.x - p2.x;\r\n        const dY = p1.y - p2.y;\r\n        return Math.sqrt(dX * dX + dY * dY);\r\n    }\r\n\r\n    private readonly points: IPoint[];\r\n    private readonly extendedPathLength: number; // length of the actual path, potentially extended to make it periodic\r\n    public readonly pathLength: number; // length of the input path\r\n    \r\n    public constructor(points: IPoint[]) {\r\n        this.points = points;\r\n\r\n        this.pathLength = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            this.pathLength += LineDrawing.distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        this.extendedPathLength = this.pathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (firstPoint.x !== lastPoint.x || firstPoint.y !== lastPoint.y) {\r\n            this.extendedPathLength += LineDrawing.distance(lastPoint, firstPoint);\r\n            this.points.push({\r\n                x: firstPoint.x,\r\n                y: firstPoint.y,\r\n            });\r\n        }\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public draw(context: CanvasRenderingContext2D, t: number) {\r\n        context.beginPath();\r\n        context.moveTo(this.points[0].x, this.points[0].y);\r\n\r\n        const desiredLength = t * this.pathLength;\r\n\r\n        let currentLength = 0;\r\n\r\n        let i: number;\r\n        for (i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = LineDrawing.distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                context.lineTo(nextPoint.x, nextPoint.y);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = LineDrawing.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                context.lineTo(finalPoint.x, finalPoint.y);\r\n                currentLength += LineDrawing.distance(lastPoint, finalPoint);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const nbSteps = Math.ceil(0.5 * this.extendedPathLength); // number of integration steps\r\n        const stepSize = this.extendedPathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = LineDrawing.distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = LineDrawing.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        return new FourierSeries(coefficients, this.pathLength / this.extendedPathLength);\r\n    }\r\n}\r\n\r\nexport default LineDrawing;\r\n","import IPoint from \"./point\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\nclass FourierSeries {\r\n    private readonly _coefficients: IFourierCoefficient[];\r\n    private readonly _length: number;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], length: number) {\r\n        this._coefficients = coefficients;\r\n        this._length = length;\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public computePoint(order: number, t: number): IPoint {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        t = this.computeRealT(t);\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        return { x, y };\r\n    }\r\n\r\n    public drawPathToPoint(context: CanvasRenderingContext2D, order: number, t: number): void {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        t = this.computeRealT(t);\r\n\r\n        context.beginPath();\r\n        context.moveTo(x, y);\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n\r\n            context.lineTo(x, y);\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public drawCircles(context: CanvasRenderingContext2D, order: number, t: number): void {\r\n        function drawCircle(centerX: number, centerY: number, radius: number) {\r\n            context.beginPath();\r\n            context.arc(centerX, centerY, radius, 0, TWO_PI);\r\n            context.closePath();\r\n            context.stroke();\r\n        }\r\n\r\n        t = this.computeRealT(t);\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            drawCircle(x, y, coefficient.magnitude);\r\n\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n    }\r\n\r\n    private computeAmountOfCoefficients(order: number): number {\r\n        return Math.min(this._coefficients.length, 1 + 2 * order);\r\n    }\r\n\r\n    private computeRealT(t: number): number {\r\n        return t * this._length;\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","declare const Button: any;\r\ndeclare const Canvas: any;\r\ndeclare const Checkbox: any;\r\ndeclare const Controls: any;\r\ndeclare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\ndeclare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    SPEED: \"speed-range-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n};\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\n\r\nfunction callObservers(observersList: any[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n};\r\n\r\n/* === INTERFACE ====================================================== */\r\nclass Parameters {\r\n    public static get speed(): number {\r\n        return speed;\r\n    }\r\n    public static set speed(s: number) {\r\n        speed = s;\r\n        Range.setValue(controlId.SPEED, s);\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return displayCircles;\r\n    }\r\n    public static set displayCircles(display: boolean) {\r\n        if (displayCircles !== display) {\r\n            displayCircles = display;\r\n            Checkbox.setChecked(controlId.DISPLAY_CIRCLES, display);\r\n        }\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return displaySegments;\r\n    }\r\n    public static set displaySegments(display: boolean) {\r\n        if (displaySegments !== display) {\r\n            displaySegments = display;\r\n            Checkbox.setChecked(controlId.DISPLAY_SEGMENTS, display);\r\n        }\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return displayCurve;\r\n    }\r\n    public static set displayCurve(display: boolean) {\r\n        if (displayCurve !== display) {\r\n            displayCurve = display;\r\n            Checkbox.setChecked(controlId.DISPLAY_CURVE, display);\r\n        }\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n    public static set order(o: number) {\r\n        order = o;\r\n        Range.setValue(controlId.ORDER, o);\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    speed = s;\r\n});\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","import IPoint from \"./point\";\r\n\r\nenum EPreset {\r\n    ARLEQUIN = \"arlequin\",\r\n    DOG = \"dog\",\r\n    ROUND = \"round\",\r\n    TRIANGLE = \"triangle\",\r\n}\r\n\r\nclass Presets {\r\n    private static cache: {\r\n        [propName: string]: IPoint[];\r\n    };\r\n\r\n    public static getPreset(preset: EPreset, callback: (array: IPoint[]) => any): void {\r\n        if (typeof Presets.cache === \"undefined\") {\r\n            Presets.cache = {};\r\n        } else if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            callback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener('readystatechange', function () {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    callback(retrievedArray);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open('GET', 'resources/' + preset + \".txt\");\r\n        xhr.send(null);\r\n    }\r\n\r\n    private static tryParsePointsArray(text: string): IPoint[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const points: IPoint[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n"],"sourceRoot":""}