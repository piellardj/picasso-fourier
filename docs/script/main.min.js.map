{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/point.ts","webpack:///./src/ts/log.ts","webpack:///./src/ts/stopwatch.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/canvas-2d.ts","webpack:///./src/ts/clock.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/presets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EMode","controlId","PRESET","MODE","SPEED","PERSISTENCE","CLOSE_LOOP","REPEAT","RESET","DISPLAY_CIRCLES","DISPLAY_SEGMENTS","DISPLAY_CURVE","DISPLAY_ORIGINAL_CURVE","ORDER","callObservers","observersList","observer","preset","observers","clear","redraw","speedChange","presetChange","tryParsePreset","previousValue","parseAndApplyMode","newModes","length","newMode","isInstant","INSTANT","Controls","setVisibility","Picker","addObserver","getValue","Tabs","getValues","speed","Range","previous","persistence","Checkbox","isChecked","checked","closeLoop","PROGRESSIVE","repeat","Button","displayCircles","displaySegments","displayCurve","displayOriginalCurve","order","this","isProgressiveMode","Parameters","interpolate","p1","p2","x","y","distance","dX","dY","Math","sqrt","equals","enabled","setEnabled","e","message","console","log","start","performance","now","ceil","StopWatch","setOrderIndicator","round","Canvas","setIndicatorText","toLocaleString","canvas2D","Canvas2D","context","lineWidth","drawing","fourier","clock","Clock","needToRestart","clearObservers","push","needToRedraw","redrawObservers","loopDuration","loadPreset","canvasSize","getSize","showLoader","Presets","getPreset","points","LineDrawing","computeFourierSeries","reset","presetObservers","Observers","canvasResize","requestAnimationFrame","mainLoop","current","maxT","originalPathDuration","finishedLoop","isPaused","resume","min","pause","resetCurve","adjustSize","strokeStyle","previousWidth","draw","drawCircles","drawCurve","drawPathToPoint","drawCurvePartialOrder","main","canvasElementId","canvas","document","getElementById","getContext","width","clientWidth","height","clientHeight","clearRect","paused","lastCheckpoint","clockTime","realTime","speedChangeObservers","setSpeed","createCheckpoint","originalPathLength","totalPathLength","firstPoint","lastPoint","pathLength","beginPath","moveTo","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","lineTo","stroke","closePath","stopwatch","nbSteps","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","PI","coefficients","floor","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","phase","atan2","Log","milliseconds","FourierSeries","TWO_PI","totalLength","Error","sort","a","b","absA","abs","absB","partialCurve","curveStepSize","curvePrecision","completeCurve","currentPointIndex","lastConsolidatedPointIndex","f","point","computePointPartialOrder","constantCoefficient","getCoefficients","TWO_PI_T","coefficient","centerX","centerY","radius","arc","partialCurveOrder","computePoint","orderFrom","orderTo","firstIndex","max","lastIndex","slice","EPreset","PRESET_SIZE","wantedSize","callback","fromCache","safelyCallCallback","scaling","offsetX","offsetY","copy","cache","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","text","split","partial"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { EPreset } from \"./presets\";\r\n\r\ndeclare const Button: any;\r\n// declare const Canvas: any;\r\ndeclare const Checkbox: any;\r\ndeclare const Controls: any;\r\n// declare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\ndeclare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRESET: \"preset-picker-id\",\r\n    MODE: \"mode-picker-id\",\r\n    SPEED: \"speed-range-id\",\r\n    PERSISTENCE: \"persistence-checkbox-id\",\r\n    CLOSE_LOOP: \"close-loop-checkbox-id\",\r\n    REPEAT: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n};\r\n\r\nenum EMode {\r\n    INSTANT = \"0\",\r\n    PROGRESSIVE = \"1\",\r\n}\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\ntype SpeedObserver = (previousSpeed: number) => void;\r\n\r\nfunction callObservers(observersList: GenericObserver[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: SpeedObserver[];\r\n    presetChange: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n    presetChange: [],\r\n};\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet preset: EPreset;\r\nfunction tryParsePreset(p: string): void {\r\n    const previousValue = preset;\r\n    preset = p as EPreset;\r\n\r\n    if (preset !== previousValue) {\r\n        callObservers(observers.presetChange);\r\n    }\r\n}\r\nPicker.addObserver(controlId.PRESET, tryParsePreset);\r\ntryParsePreset(Picker.getValue(controlId.PRESET));\r\n\r\nlet mode: EMode;\r\nfunction parseAndApplyMode(newModes: string[]): void {\r\n    if (newModes.length !== 1) {\r\n        return;\r\n    }\r\n\r\n    const newMode = newModes[0] as EMode;\r\n    if (newMode !== mode) {\r\n        mode = newMode;\r\n\r\n        const isInstant = (mode === EMode.INSTANT);\r\n        Controls.setVisibility(controlId.DISPLAY_CIRCLES, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_SEGMENTS, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_CURVE, isInstant);\r\n\r\n        callObservers(observers.clear);\r\n    }\r\n}\r\nparseAndApplyMode(Tabs.getValues(controlId.MODE));\r\nTabs.addObserver(controlId.MODE, parseAndApplyMode);\r\n\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    const previous = speed;\r\n    speed = s;\r\n\r\n    for (const observer of observers.speedChange) {\r\n        observer(previous);\r\n    }\r\n});\r\n\r\nlet persistence: boolean = Checkbox.isChecked(controlId.PERSISTENCE);\r\nCheckbox.addObserver(controlId.PERSISTENCE, (checked: boolean) => {\r\n    persistence = checked;\r\n});\r\n\r\nlet closeLoop: boolean = Checkbox.isChecked(controlId.CLOSE_LOOP);\r\nCheckbox.addObserver(controlId.CLOSE_LOOP, (checked: boolean) => {\r\n    closeLoop = checked;\r\n\r\n    if (mode === EMode.PROGRESSIVE) {\r\n        callObservers(observers.clear);\r\n    }\r\n});\r\n\r\nlet repeat: boolean = Checkbox.isChecked(controlId.REPEAT);\r\nCheckbox.addObserver(controlId.REPEAT, (checked: boolean) => {\r\n    repeat = checked;\r\n});\r\n\r\nButton.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\n/* === INTERFACE ====================================================== */\r\n/**\r\n * Class giving access to all the parameters of the application. Also gives access to event handlers.\r\n */\r\nclass Parameters {\r\n    public static get preset(): EPreset {\r\n        return preset;\r\n    }\r\n\r\n    public static get isProgressiveMode(): boolean {\r\n        return mode === EMode.PROGRESSIVE;\r\n    }\r\n\r\n    public static get speed(): number {\r\n        if (this.isProgressiveMode) {\r\n            return 0.1 * speed;\r\n        }\r\n        return speed;\r\n    }\r\n\r\n    public static get persistence(): boolean {\r\n        return persistence;\r\n    }\r\n\r\n    public static get closeLoop(): boolean {\r\n        return closeLoop;\r\n    }\r\n\r\n    public static get repeat(): boolean {\r\n        return repeat;\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return mode === EMode.INSTANT && displayCircles;\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return mode === EMode.INSTANT && displaySegments;\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return mode === EMode.INSTANT && displayCurve;\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): SpeedObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n    public static get presetObservers(): GenericObserver[] {\r\n        return observers.presetChange;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n/* Assumes t is between 0 and 1 included. */\r\nfunction interpolate(p1: IPoint, p2: IPoint, t: number): IPoint {\r\n    return {\r\n        x: p1.x * (1 - t) + p2.x * t,\r\n        y: p1.y * (1 - t) + p2.y * t,\r\n    };\r\n}\r\n\r\nfunction distance(p1: IPoint, p2: IPoint): number {\r\n    const dX = p1.x - p2.x;\r\n    const dY = p1.y - p2.y;\r\n    return Math.sqrt(dX * dX + dY * dY);\r\n}\r\n\r\nfunction equals(p1: IPoint, p2: IPoint): boolean {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\nexport {\r\n    distance,\r\n    equals,\r\n    interpolate,\r\n    IPoint,\r\n};\r\n","let enabled = true;\r\n\r\nfunction setEnabled(e: boolean): void {\r\n    enabled = e;\r\n}\r\n\r\nfunction message(m: string): void {\r\n    if (enabled) {\r\n        console.log(m);\r\n    }\r\n}\r\n\r\nexport {\r\n    setEnabled,\r\n    message,\r\n};\r\n","/**\r\n * Class for measuring execution performance.\r\n */\r\nclass StopWatch {\r\n    private readonly start: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.start = performance.now();\r\n    }\r\n\r\n    public get milliseconds(): number {\r\n        return Math.ceil(performance.now() - this.start);\r\n    }\r\n}\r\n\r\nexport {\r\n    StopWatch,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Clock } from \"./clock\";\r\nimport { FourierSeries } from \"./fourier-series\";\r\nimport { LineDrawing } from \"./line-drawing\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { IPoint } from \"./point\";\r\nimport { Presets } from \"./presets\";\r\nimport { TimeUnit } from \"./units\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction setOrderIndicator(value: number): void {\r\n    value = Math.round(10 * value) / 10;\r\n    Canvas.setIndicatorText(\"fourier-order\", value.toLocaleString());\r\n}\r\n\r\nfunction main(): void {\r\n    const canvas2D = new Canvas2D(\"canvas\");\r\n    const context = canvas2D.context;\r\n    context.lineWidth = 1;\r\n\r\n    let drawing: LineDrawing = null;\r\n    let fourier: FourierSeries = null;\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n\r\n    let needToRedraw = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    const loopDuration = 2000; // milliseconds, at normal speed\r\n    function mainLoop(): void {\r\n        if (drawing !== null && fourier !== null) { // checks that preset is loaded\r\n            let t: TimeUnit = clock.current / loopDuration;\r\n            const maxT: TimeUnit = Parameters.closeLoop ? 1 : drawing.originalPathDuration;\r\n            let finishedLoop = (t >= maxT);\r\n\r\n            if (!finishedLoop && clock.isPaused) {\r\n                clock.resume();\r\n            }\r\n\r\n            t = Math.min(t, maxT);\r\n\r\n            if (finishedLoop) {\r\n                if (Parameters.repeat) {\r\n                    needToRestart = true;\r\n                } else {\r\n                    clock.pause();\r\n                }\r\n            }\r\n\r\n            if (needToRestart) {\r\n                needToRestart = false;\r\n                clock.reset();\r\n                fourier.resetCurve();\r\n                t = 0;\r\n                finishedLoop = false;\r\n                setOrderIndicator(Parameters.order);\r\n                canvas2D.clear();\r\n            }\r\n\r\n            if (needToRedraw) {\r\n                canvas2D.adjustSize();\r\n\r\n                if (!Parameters.persistence) {\r\n                    canvas2D.clear();\r\n                }\r\n\r\n                if (Parameters.displayOriginalCurve) {\r\n                    context.strokeStyle = \"rgb(0,128,0)\";\r\n                    const previousWidth = context.lineWidth;\r\n                    context.lineWidth = 2;\r\n\r\n                    drawing.draw(context, Parameters.isProgressiveMode ? maxT : t);\r\n\r\n                    context.lineWidth = previousWidth;\r\n                }\r\n\r\n                if (Parameters.displayCircles) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"rgba(255,255,255,0.3)\";\r\n                    fourier.drawCircles(context, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displayCurve) {\r\n                    context.strokeStyle = \"white\";\r\n                    fourier.drawCurve(context, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displaySegments) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,0,0,0.01)\" : \"red\";\r\n                    fourier.drawPathToPoint(context, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.isProgressiveMode) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"white\";\r\n                    const order = Parameters.order * t / maxT;\r\n                    fourier.drawCurvePartialOrder(context, order, maxT);\r\n                    setOrderIndicator(order);\r\n                }\r\n            }\r\n\r\n            needToRedraw = !finishedLoop;\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    function loadPreset(): void {\r\n        drawing = null;\r\n        fourier = null;\r\n\r\n        const canvasSize: number[] = Canvas.getSize();\r\n        Canvas.showLoader(true);\r\n        Presets.getPreset(Parameters.preset, canvasSize, (points: IPoint[]) => {\r\n            drawing = new LineDrawing(points);\r\n            fourier = drawing.computeFourierSeries(300);\r\n            needToRestart = true;\r\n            clock.reset();\r\n            Canvas.showLoader(false);\r\n        });\r\n    }\r\n\r\n    Parameters.presetObservers.push(loadPreset);\r\n    Canvas.Observers.canvasResize.push(loadPreset);\r\n\r\n    loadPreset();\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","/**\r\n * Class for instancing and using a 2D HTML Canvas.\r\n */\r\nclass Canvas2D {\r\n    public readonly context: CanvasRenderingContext2D;\r\n    private readonly canvas: HTMLCanvasElement;\r\n\r\n    public constructor(canvasElementId: string) {\r\n        this.canvas = document.getElementById(canvasElementId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext(\"2d\");\r\n    }\r\n\r\n    public adjustSize(): void {\r\n        if (this.canvas.width !== this.canvas.clientWidth || this.canvas.height !== this.canvas.clientHeight) {\r\n            this.canvas.width = this.canvas.clientWidth;\r\n            this.canvas.height = this.canvas.clientHeight;\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n}\r\n\r\nexport {\r\n    Canvas2D,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\n\r\ninterface IClockCheckpoint {\r\n    clockTime: DOMHighResTimeStamp; // in the clock temporality\r\n    realTime: DOMHighResTimeStamp; // in the Javascript temporality\r\n}\r\n\r\n/**\r\n * This class handles the measuring of time at a variable speed.\r\n */\r\nclass Clock {\r\n    private speed: number;\r\n    private paused: boolean;\r\n\r\n    /* This checkpoint system is used to avoid floating point approximations when computing current time. */\r\n    private lastCheckpoint: IClockCheckpoint;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        this.paused = false;\r\n        this.lastCheckpoint = {\r\n            clockTime: 0,\r\n            realTime: 0,\r\n        };\r\n\r\n        Parameters.speedChangeObservers.push(() => this.setSpeed(Parameters.speed));\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.paused = false;\r\n        this.lastCheckpoint.clockTime = 0;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n        this.setSpeed(Parameters.speed);\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.createCheckpoint();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = true;\r\n        }\r\n    }\r\n\r\n    public resume(): void {\r\n        if (this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = false;\r\n        }\r\n    }\r\n\r\n    public get isPaused(): boolean {\r\n        return this.paused;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        if (this.paused) {\r\n            return this.lastCheckpoint.clockTime;\r\n        }\r\n\r\n        return this.lastCheckpoint.clockTime + this.speed * (performance.now() - this.lastCheckpoint.realTime);\r\n    }\r\n\r\n    private createCheckpoint(): void {\r\n        this.lastCheckpoint.clockTime = this.current;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n    }\r\n}\r\n\r\nexport {\r\n    Clock,\r\n};\r\n","import { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport * as Log from \"./log\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { distance, equals, interpolate, IPoint } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\n/**\r\n * Represents a 2D line parametrized by a 1D input.\r\n * The line is 1-periodic: [0,1] -> RxR.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass LineDrawing {\r\n    public readonly pathLength: SpaceUnit; // Length of the total path in space-units\r\n    public readonly originalPathDuration: TimeUnit; // Length of the original path in time-units\r\n    private readonly points: IPoint[];\r\n\r\n    /**\r\n     * Builds a LineDrawing from the input points.\r\n     * If the input is not periodic, then we extend it with a last point to make the LineDrawing periodic.\r\n     */\r\n    public constructor(points: IPoint[]) {\r\n        this.points = points;\r\n\r\n        let originalPathLength: SpaceUnit = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            originalPathLength += distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        let totalPathLength: SpaceUnit = originalPathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (!equals(firstPoint, lastPoint)) {\r\n            totalPathLength += distance(lastPoint, firstPoint);\r\n            this.points.push({\r\n                x: firstPoint.x,\r\n                y: firstPoint.y,\r\n            });\r\n        }\r\n\r\n        this.pathLength = totalPathLength;\r\n        this.originalPathDuration = originalPathLength / totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Draws the line portion between 0 and t.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public draw(context: CanvasRenderingContext2D, t: TimeUnit): void {\r\n        context.beginPath();\r\n        context.moveTo(this.points[0].x, this.points[0].y);\r\n\r\n        const desiredLength: SpaceUnit = t * this.pathLength;\r\n\r\n        let currentLength: SpaceUnit = 0;\r\n\r\n        let i: number;\r\n        for (i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                context.lineTo(nextPoint.x, nextPoint.y);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                context.lineTo(finalPoint.x, finalPoint.y);\r\n                currentLength += distance(lastPoint, finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const stopwatch = new StopWatch();\r\n\r\n        const nbSteps = Math.ceil(Parameters.integrationPrecision * this.pathLength);\r\n        const stepSize = this.pathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        Log.message(`Computed ${order} Fourier coefficient with ${nbSteps} integration steps ` +\r\n            `in ${stopwatch.milliseconds} ms.`);\r\n        return new FourierSeries(coefficients, this.pathLength);\r\n    }\r\n}\r\n\r\nexport {\r\n    LineDrawing,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\nimport { interpolate, IPoint } from \"./point\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Represents the Fourier development of a 1-periodic [0,1] -> RxR signal.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass FourierSeries {\r\n    private readonly coefficients: IFourierCoefficient[];\r\n\r\n    private readonly curveStepSize: SpaceUnit;\r\n    private partialCurve: IPoint[];\r\n    private partialCurveOrder: number;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], totalLength: SpaceUnit) {\r\n        if (coefficients.length === 0) {\r\n            throw new Error(\"Fourier series must have at least one coefficient.\");\r\n        }\r\n\r\n        // Sort the coefs in that order: 0, 1, -1, 2, -2, 3, -3, ...\r\n        coefficients.sort((a: IFourierCoefficient, b: IFourierCoefficient) => {\r\n            const absA = Math.abs(a.n);\r\n            const absB = Math.abs(b.n);\r\n            if (absA !== absB) {\r\n                return absA - absB;\r\n            }\r\n            return b.n - a.n;\r\n        });\r\n        this.coefficients = coefficients;\r\n\r\n        this.partialCurve = [];\r\n        this.curveStepSize = 1 / (Parameters.curvePrecision * totalLength);\r\n    }\r\n\r\n    public resetCurve(): void {\r\n        this.partialCurve = [];\r\n    }\r\n\r\n    public drawCurve(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        this.completeCurve(order, t);\r\n\r\n        const currentPointIndex = t / this.curveStepSize;\r\n        const lastConsolidatedPointIndex = Math.floor(currentPointIndex);\r\n\r\n        // Draw partial curve\r\n        context.beginPath();\r\n        context.moveTo(this.partialCurve[0].x, this.partialCurve[0].y);\r\n        for (let i = 1; i <= lastConsolidatedPointIndex; i++) {\r\n            context.lineTo(this.partialCurve[i].x, this.partialCurve[i].y);\r\n        }\r\n\r\n        const f = currentPointIndex % 1;\r\n        const lastPoint = this.partialCurve[lastConsolidatedPointIndex];\r\n        const nextPoint = this.partialCurve[lastConsolidatedPointIndex + 1];\r\n\r\n        const point = interpolate(lastPoint, nextPoint, f);\r\n        context.lineTo(point.x, point.y);\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public drawCurvePartialOrder(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        order = Math.min(order, 0.5 * (this.coefficients.length - 1) - 0.001);\r\n\r\n        context.beginPath();\r\n\r\n        const firstPoint = this.computePointPartialOrder(order, 0);\r\n        context.moveTo(firstPoint.x, firstPoint.y);\r\n\r\n        const nbSteps = t / this.curveStepSize;\r\n        for (let i = 1; i < nbSteps; i++) {\r\n            const p = this.computePointPartialOrder(order, i * this.curveStepSize);\r\n            context.lineTo(p.x, p.y);\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, t] portion of the approximated curve.\r\n     * @param order Maximum Fourier order to use. Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawPathToPoint(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        const constantCoefficient = this.getCoefficients(0, 0)[0];\r\n        let x = constantCoefficient.magnitude * Math.cos(constantCoefficient.phase);\r\n        let y = constantCoefficient.magnitude * Math.sin(constantCoefficient.phase);\r\n\r\n        const TWO_PI_T = TWO_PI * t;\r\n\r\n        context.beginPath();\r\n        context.moveTo(x, y);\r\n\r\n        const coefficients = this.getCoefficients(1, order);\r\n        for (const coefficient of coefficients) {\r\n            const TWO_PI_N_T = TWO_PI_T * coefficient.n;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n\r\n            context.lineTo(x, y);\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    /**\r\n     * Draws the circles representing the Fourier coefficients used to compute the point position at t.\r\n     * @param order Maximum Fourier order to use. Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCircles(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        function drawCircle(centerX: number, centerY: number, radius: number): void {\r\n            if (radius > 0.5) {\r\n                context.beginPath();\r\n                context.arc(centerX, centerY, radius, 0, TWO_PI);\r\n                context.closePath();\r\n                context.stroke();\r\n            }\r\n        }\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const coefficients = this.getCoefficients(0, order);\r\n        if (coefficients.length < 2) {\r\n            return;\r\n        }\r\n\r\n        const TWO_PI_T = TWO_PI * t;\r\n        for (const coefficient of coefficients) {\r\n            if (coefficient.n !== 0 && coefficient.n !== 1) {\r\n                drawCircle(x, y, coefficient.magnitude);\r\n            }\r\n\r\n            const TWO_PI_N_T = TWO_PI_T * coefficient.n;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n    }\r\n\r\n    private completeCurve(order: number, t: TimeUnit): void {\r\n        order = Math.floor(order);\r\n\r\n        if (order !== this.partialCurveOrder) {\r\n            this.partialCurveOrder = order;\r\n            this.resetCurve();\r\n        }\r\n\r\n        // Compute partial curve\r\n        const currentPointIndex = t / this.curveStepSize;\r\n        const lastPointIndex = Math.floor(currentPointIndex);\r\n        let point: IPoint;\r\n\r\n        for (let i = this.partialCurve.length; i <= lastPointIndex + 1; i++) {\r\n            point = this.computePoint(order, i * this.curveStepSize);\r\n            this.partialCurve.push(point);\r\n        }\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    private computePoint(order: number, t: number): IPoint {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const coefficients = this.getCoefficients(0, order);\r\n        for (const coefficient of coefficients) {\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        return { x, y };\r\n    }\r\n\r\n    private computePointPartialOrder(order: number, t: number): IPoint {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const coefficients = this.getCoefficients(0, Math.floor(order));\r\n        for (const coefficient of coefficients) {\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        const additionalCoefficients = this.getCoefficients(Math.floor(order) + 1, Math.floor(order) + 1);\r\n        const f = order % 1;\r\n        for (const coefficient of additionalCoefficients) {\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += f * coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += f * coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        return { x, y };\r\n    }\r\n\r\n    /**\r\n     * Returns an array of coefficients containing, in that order:\r\n     * if orderFrom > 0: orderFrom, -orderFrom, orderFrom+1, -(orderFrom+1), ..., orderTo, -orderTo\r\n     * if orderFrom == 0: 0, 1, -1, ... orderTo, -orderTo\r\n     * If orderFrom > orderTo, or if one of the parameters is out of range, only returns the valid coefficients.\r\n     */\r\n    private getCoefficients(orderFrom: number, orderTo: number): IFourierCoefficient[] {\r\n        orderFrom = Math.min(orderFrom, orderTo);\r\n\r\n        const firstIndex = Math.max(0, 2 * orderFrom - 1);\r\n        const lastIndex = Math.min(this.coefficients.length, 2 * orderTo + 1);\r\n\r\n        return this.coefficients.slice(firstIndex, lastIndex);\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","import * as Log from \"./log\";\r\nimport { IPoint } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\n\r\n/* Enum values must match the values of the controls */\r\nenum EPreset {\r\n    ARLEQUIN = \"arlequin\",\r\n    BULL = \"bull\",\r\n    CAMEL = \"camel\",\r\n    DOG = \"dog\",\r\n    DOVE = \"dove\",\r\n    FLAMINGO = \"flamingo\",\r\n    HORSE = \"horse\",\r\n    MOUSE = \"mouse\",\r\n    WOMAN1 = \"woman1\",\r\n    WOMAN2 = \"woman2\",\r\n}\r\n\r\nconst PRESET_SIZE = 512; // a preset should be dimensionned for a 512 x 512 canvas\r\n\r\n/**\r\n * Class for retrieving on demand the preset drawings with AJAX requests.\r\n * Tries to minimize the request by using a memory cache.\r\n */\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, wantedSize: number[], callback: (array: IPoint[]) => any): void {\r\n        const stopwatch = new StopWatch();\r\n        let fromCache = false;\r\n\r\n        function safelyCallCallback(points: IPoint[]): void {\r\n            const scaling = Math.min(wantedSize[0] / PRESET_SIZE, wantedSize[1] / PRESET_SIZE);\r\n            const offsetX = 0.5 * (wantedSize[0] - PRESET_SIZE * scaling);\r\n            const offsetY = 0.5 * (wantedSize[1] - PRESET_SIZE * scaling);\r\n\r\n            /* Create a deep copy to keep the cache clean */\r\n            const copy: IPoint[] = [];\r\n            for (const point of points) {\r\n                copy.push({\r\n                    x: point.x * scaling + offsetX,\r\n                    y: point.y * scaling + offsetY,\r\n                });\r\n            }\r\n\r\n            if (fromCache) {\r\n                Log.message(`Retrieved preset '${preset}' from cache in ${stopwatch.milliseconds} ms`);\r\n            } else {\r\n                Log.message(`Downloaded preset '${preset}' in ${stopwatch.milliseconds} ms.`);\r\n            }\r\n\r\n            callback(copy);\r\n        }\r\n\r\n        if (typeof Presets.cache === \"undefined\") {\r\n            Presets.cache = {};\r\n        } else if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            fromCache = true;\r\n            safelyCallCallback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"readystatechange\", () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray !== null) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    safelyCallCallback(Presets.cache[preset]);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open(\"GET\", `resources/${preset}.txt`);\r\n        xhr.send();\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: IPoint[];\r\n    };\r\n\r\n    private static tryParsePointsArray(text: string): IPoint[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const stopwatch = new StopWatch();\r\n\r\n        const points: IPoint[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        Log.message(`Parsed preset in ${stopwatch.milliseconds} ms.`);\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n"],"sourceRoot":""}