{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/line.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/clock.ts","webpack:///./src/ts/presets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","controlId","callObservers","observersList","observer","observers","speed","Range","setValue","loop","Checkbox","setChecked","displayCircles","display","displaySegments","displayCurve","displayOriginalCurve","order","Parameters","getValue","addObserver","previous","isChecked","checked","Button","drawing","fourier","fourierCurve","canvas","document","getElementById","context","getContext","width","height","lineWidth","clock","needToRestart","clearObservers","push","needToRedraw","redrawObservers","wantedLength","mainLoop","current","reset","Canvas","setIndicatorText","toLocaleString","nbPoints","Math","max","ceil","curvePrecision","pathLength","fourierPoints","iP","iT","point","computePoint","clearRect","strokeStyle","drawCircles","draw","drawPathToPoint","requestAnimationFrame","Presets","getPreset","EPreset","ARLEQUIN","points","computeFourierSeries","main","length","this","nbSegments","targetPointIndex","min","nbOfFullSegments","floor","beginPath","moveTo","x","y","lineTo","lastSectionPortion","lastX","Line","interpolate","lastY","stroke","closePath","a","b","LineDrawing","distance","extendedPathLength","firstPoint","lastPoint","p1","p2","dX","dY","sqrt","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","nbSteps","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","PI","coefficients","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","phase","atan2","FourierSeries","TWO_PI","_coefficients","_length","computeRealT","computeAmountOfCoefficients","coefficient","centerX","centerY","radius","arc","speedChangeObservers","setSpeed","lastCheckpoint","lastCheckpointReal","performance","now","Clock","preset","callback","cache","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","text","split","partial"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","declare const Button: any;\r\ndeclare const Canvas: any;\r\ndeclare const Checkbox: any;\r\ndeclare const Controls: any;\r\ndeclare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\ndeclare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    SPEED: \"speed-range-id\",\r\n    LOOP: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n};\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\ntype SpeedObserver = (previousSpeed: number) => void;\r\n\r\nfunction callObservers(observersList: any[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: SpeedObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n};\r\n\r\n/* === INTERFACE ====================================================== */\r\nclass Parameters {\r\n    public static get speed(): number {\r\n        return speed;\r\n    }\r\n    public static set speed(s: number) {\r\n        speed = s;\r\n        Range.setValue(controlId.SPEED, s);\r\n    }\r\n\r\n    public static get loop(): boolean {\r\n        return loop;\r\n    }\r\n    public static set loop(l: boolean) {\r\n        if (loop !== l) {\r\n            loop = l;\r\n            Checkbox.setChecked(controlId.LOOP, l);\r\n        }\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return displayCircles;\r\n    }\r\n    public static set displayCircles(display: boolean) {\r\n        if (displayCircles !== display) {\r\n            displayCircles = display;\r\n            Checkbox.setChecked(controlId.DISPLAY_CIRCLES, display);\r\n        }\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return displaySegments;\r\n    }\r\n    public static set displaySegments(display: boolean) {\r\n        if (displaySegments !== display) {\r\n            displaySegments = display;\r\n            Checkbox.setChecked(controlId.DISPLAY_SEGMENTS, display);\r\n        }\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return displayCurve;\r\n    }\r\n    public static set displayCurve(display: boolean) {\r\n        if (displayCurve !== display) {\r\n            displayCurve = display;\r\n            Checkbox.setChecked(controlId.DISPLAY_CURVE, display);\r\n        }\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n    public static set displayOriginalCurve(display: boolean) {\r\n        if (displayOriginalCurve !== display) {\r\n            displayOriginalCurve = display;\r\n            Checkbox.setChecked(controlId.DISPLAY_ORIGINAL_CURVE, display);\r\n        }\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n    public static set order(o: number) {\r\n        order = o;\r\n        Range.setValue(controlId.ORDER, o);\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): SpeedObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    const previous = speed;\r\n    speed = s;\r\n\r\n    for (const observer of observers.speedChange) {\r\n        observer(previous);\r\n    }\r\n});\r\n\r\nlet loop: boolean = Checkbox.isChecked(controlId.LOOP);\r\nCheckbox.addObserver(controlId.LOOP, (checked: boolean) => {\r\n    loop = checked;\r\n});\r\n\r\nButton.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","import { FourierSeries } from \"./fourier-series\";\r\nimport Line from \"./line\";\r\nimport LineDrawing from \"./line-drawing\";\r\nimport IPoint from \"./point\";\r\n\r\nimport Clock from \"./clock\";\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport { EPreset, Presets } from \"./presets\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction main() {\r\n    const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n    const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n    canvas.width = 512;\r\n    canvas.height = 512;\r\n    context.lineWidth = 1;\r\n\r\n    let drawing: LineDrawing;\r\n    let fourier: FourierSeries;\r\n    let fourierCurve: Line;\r\n\r\n    function display(t: number): void {\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (Parameters.displayCircles) {\r\n            context.strokeStyle = \"rgba(255,255,255,0.3)\";\r\n            fourier.drawCircles(context, Parameters.order, t);\r\n        }\r\n\r\n        if (Parameters.displayCurve && fourierCurve) {\r\n            context.strokeStyle = \"white\";\r\n            fourierCurve.draw(context, t);\r\n        }\r\n\r\n        if (Parameters.displayOriginalCurve) {\r\n            context.strokeStyle = \"green\";\r\n            drawing.draw(context, t);\r\n        }\r\n\r\n        if (Parameters.displaySegments) {\r\n            context.strokeStyle = \"red\";\r\n            fourier.drawPathToPoint(context, Parameters.order, t);\r\n        }\r\n    }\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart: boolean = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n\r\n    let needToRedraw: boolean = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    const wantedLength = 2000; // milliseconds\r\n    function mainLoop() {\r\n        let t = clock.current / wantedLength;\r\n\r\n        if (t >= 1 && Parameters.loop) {\r\n            needToRestart = true;\r\n        }\r\n\r\n        if (needToRestart) {\r\n            needToRestart = false;\r\n            clock.reset();\r\n            t = 0;\r\n            Canvas.setIndicatorText(\"fourier-order\", Parameters.order.toLocaleString());\r\n\r\n            const nbPoints = Math.max(2, Math.ceil(Parameters.curvePrecision * drawing.pathLength));\r\n            const fourierPoints: IPoint[] = [];\r\n            for (let iP = 0; iP < nbPoints; iP++) {\r\n                let iT: number = iP / (nbPoints + 1);\r\n                let point: IPoint = fourier.computePoint(Parameters.order, iT);\r\n                fourierPoints.push(point);\r\n            }\r\n            fourierCurve = new Line(fourierPoints);\r\n        }\r\n\r\n        if (needToRedraw) {\r\n            display(t);\r\n        }\r\n\r\n        needToRedraw = t < 1;\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    Presets.getPreset(EPreset.ARLEQUIN, (points: IPoint[]) => {\r\n        drawing = new LineDrawing(points);\r\n        fourier = drawing.computeFourierSeries(300);\r\n        clock.reset();\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    });\r\n}\r\n\r\nmain();\r\n","import IPoint from \"./point\";\r\n\r\n/**\r\n * Class for drawing a 2D line.\r\n * The line is paramaterized by a variable t in [0, 1].\r\n */\r\nclass Line {\r\n    private readonly points: IPoint[];\r\n    private readonly nbSegments: number;\r\n\r\n    public constructor(points: IPoint[]) {\r\n        if (points.length < 2) {\r\n            throw \"A line must have at least 2 points.\";\r\n        }\r\n\r\n        this.points = points;\r\n        this.nbSegments = points.length -  1;\r\n    }\r\n\r\n    /**\r\n     * Draws the line portion between 0 and t.\r\n     */\r\n    public draw(context: CanvasRenderingContext2D, t: number): void {\r\n        t = Math.min(1, Math.max(0, t)); // clamp t between 0 and 1\r\n\r\n        const targetPointIndex = t * this.nbSegments;\r\n        const nbOfFullSegments = Math.floor(targetPointIndex);\r\n\r\n        context.beginPath();\r\n        context.moveTo(this.points[0].x, this.points[0].y);\r\n        for (let i = 0; i < nbOfFullSegments; i++) {\r\n            context.lineTo(this.points[i + 1].x, this.points[i + 1].y);\r\n        }\r\n\r\n        if (nbOfFullSegments < this.nbSegments) {\r\n            const lastSectionPortion = targetPointIndex % 1;\r\n            const lastX = Line.interpolate(this.points[nbOfFullSegments].x, this.points[nbOfFullSegments + 1].x, lastSectionPortion);\r\n            const lastY = Line.interpolate(this.points[nbOfFullSegments].y, this.points[nbOfFullSegments + 1].y, lastSectionPortion);\r\n            context.lineTo(lastX, lastY);\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    private static interpolate(a: number, b: number, x: number): number {\r\n        return a * (1 -x) + b * x;\r\n    }\r\n}\r\n\r\nexport default Line;\r\n","import { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport { Parameters } from \"./parameters\";\r\nimport IPoint from \"./point\";\r\n\r\nclass LineDrawing {\r\n    /* Assumes t is between 0 and 1 included. */\r\n    private static interpolate(p1: IPoint, p2: IPoint, t: number): IPoint {\r\n        return {\r\n            x: p1.x * (1 - t) + p2.x * t,\r\n            y: p1.y * (1 - t) + p2.y * t,\r\n        };\r\n    }\r\n\r\n    private static distance(p1: IPoint, p2: IPoint): number {\r\n        const dX = p1.x - p2.x;\r\n        const dY = p1.y - p2.y;\r\n        return Math.sqrt(dX * dX + dY * dY);\r\n    }\r\n\r\n    public readonly pathLength: number; // length of the input path\r\n    private readonly points: IPoint[];\r\n    private readonly extendedPathLength: number; // length of the actual path, potentially extended to make it periodic\r\n\r\n    public constructor(points: IPoint[]) {\r\n        this.points = points;\r\n\r\n        this.pathLength = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            this.pathLength += LineDrawing.distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        this.extendedPathLength = this.pathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (firstPoint.x !== lastPoint.x || firstPoint.y !== lastPoint.y) {\r\n            this.extendedPathLength += LineDrawing.distance(lastPoint, firstPoint);\r\n            this.points.push({\r\n                x: firstPoint.x,\r\n                y: firstPoint.y,\r\n            });\r\n        }\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public draw(context: CanvasRenderingContext2D, t: number) {\r\n        context.beginPath();\r\n        context.moveTo(this.points[0].x, this.points[0].y);\r\n\r\n        const desiredLength = t * this.pathLength;\r\n\r\n        let currentLength = 0;\r\n\r\n        let i: number;\r\n        for (i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = LineDrawing.distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                context.lineTo(nextPoint.x, nextPoint.y);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = LineDrawing.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                context.lineTo(finalPoint.x, finalPoint.y);\r\n                currentLength += LineDrawing.distance(lastPoint, finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const nbSteps = Math.ceil(Parameters.integrationPrecision * this.extendedPathLength);\r\n        const stepSize = this.extendedPathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = LineDrawing.distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = LineDrawing.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        return new FourierSeries(coefficients, this.pathLength / this.extendedPathLength);\r\n    }\r\n}\r\n\r\nexport default LineDrawing;\r\n","import IPoint from \"./point\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\nclass FourierSeries {\r\n    private readonly _coefficients: IFourierCoefficient[];\r\n    private readonly _length: number;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], length: number) {\r\n        this._coefficients = coefficients;\r\n        this._length = length;\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public computePoint(order: number, t: number): IPoint {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        t = this.computeRealT(t);\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        return { x, y };\r\n    }\r\n\r\n    public drawPathToPoint(context: CanvasRenderingContext2D, order: number, t: number): void {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        t = this.computeRealT(t);\r\n\r\n        context.beginPath();\r\n        context.moveTo(x, y);\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n\r\n            context.lineTo(x, y);\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public drawCircles(context: CanvasRenderingContext2D, order: number, t: number): void {\r\n        function drawCircle(centerX: number, centerY: number, radius: number) {\r\n            context.beginPath();\r\n            context.arc(centerX, centerY, radius, 0, TWO_PI);\r\n            context.closePath();\r\n            context.stroke();\r\n        }\r\n\r\n        t = this.computeRealT(t);\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            drawCircle(x, y, coefficient.magnitude);\r\n\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n    }\r\n\r\n    private computeAmountOfCoefficients(order: number): number {\r\n        return Math.min(this._coefficients.length, 1 + 2 * order);\r\n    }\r\n\r\n    private computeRealT(t: number): number {\r\n        return t * this._length;\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\n\r\nclass Clock {\r\n    private speed: number;\r\n    private lastCheckpoint: DOMHighResTimeStamp;\r\n    private lastCheckpointReal: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        Parameters.speedChangeObservers.push(() => this.setSpeed(Parameters.speed));\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.lastCheckpoint = 0;\r\n        this.lastCheckpointReal = performance.now();\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.lastCheckpoint = this.current;\r\n        this.lastCheckpointReal = performance.now();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        return this.lastCheckpoint + this.speed * (performance.now() - this.lastCheckpointReal);\r\n    }\r\n}\r\n\r\nexport default Clock;\r\n","import IPoint from \"./point\";\r\n\r\nenum EPreset {\r\n    ARLEQUIN = \"arlequin\",\r\n    DOG = \"dog\",\r\n    ROUND = \"round\",\r\n    TRIANGLE = \"triangle\",\r\n}\r\n\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, callback: (array: IPoint[]) => any): void {\r\n        if (typeof Presets.cache === \"undefined\") {\r\n            Presets.cache = {};\r\n        } else if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            callback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"readystatechange\", () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    callback(retrievedArray);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open(\"GET\", \"resources/\" + preset + \".txt\");\r\n        xhr.send(null);\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: IPoint[];\r\n    };\r\n\r\n    private static tryParsePointsArray(text: string): IPoint[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const points: IPoint[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n"],"sourceRoot":""}