{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/log.ts","webpack:///./src/ts/stopwatch.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/clock.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/point.ts","webpack:///./src/ts/presets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","controlId","callObservers","observersList","observer","preset","observers","clear","redraw","speedChange","presetChange","tryParsePreset","previousValue","Picker","addObserver","getValue","speed","Range","previous","persistence","Checkbox","isChecked","checked","closeLoop","repeat","Button","displayCircles","displaySegments","displayCurve","displayOriginalCurve","order","Parameters","enabled","setEnabled","e","message","console","log","this","start","performance","now","Math","ceil","StopWatch","canvas","document","getElementById","context","getContext","lineWidth","drawing","fourier","clock","Clock","needToRestart","clearObservers","push","needToRedraw","redrawObservers","wantedLength","loadPreset","canvasSize","Canvas","getSize","showLoader","Presets","getPreset","points","LineDrawing","computeFourierSeries","reset","presetObservers","Observers","canvasResize","requestAnimationFrame","mainLoop","current","maxT","originalPathLength","min","resetCurve","setIndicatorText","toLocaleString","clearRect","width","height","clientWidth","clientHeight","strokeStyle","previousWidth","draw","drawCircles","drawCurve","drawPathToPoint","main","speedChangeObservers","setSpeed","lastCheckpoint","lastCheckpointReal","length","distance","totalPathLength","firstPoint","lastPoint","equals","x","y","pathLength","beginPath","moveTo","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","interpolate","lineTo","stroke","closePath","stopwatch","nbSteps","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","PI","coefficients","floor","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","sqrt","phase","atan2","Log","milliseconds","FourierSeries","TWO_PI","totalLength","partialCurve","curveStepSize","curvePrecision","partialCurveOrder","point","currentPointIndex","lastConsolidatedPointIndex","nextConsolidatedPointIndex","computePoint","max","computeAmountOfCoefficients","TWO_PI_T","coefficient","centerX","centerY","radius","arc","p1","p2","dX","dY","EPreset","PRESET_SIZE","wantedSize","callback","fromCache","safelyCallCallback","scaling","offsetX","offsetY","copy","cache","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","text","split","partial"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import { EPreset } from \"./presets\";\r\n\r\ndeclare const Button: any;\r\n// declare const Canvas: any;\r\ndeclare const Checkbox: any;\r\n// declare const Controls: any;\r\n// declare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\n// declare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRESET: \"preset-picker-id\",\r\n    SPEED: \"speed-range-id\",\r\n    PERSISTENCE: \"persistence-checkbox-id\",\r\n    CLOSE_LOOP: \"close-loop-checkbox-id\",\r\n    REPEAT: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n};\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\ntype SpeedObserver = (previousSpeed: number) => void;\r\n\r\nfunction callObservers(observersList: GenericObserver[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: SpeedObserver[];\r\n    presetChange: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n    presetChange: [],\r\n};\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet preset: EPreset;\r\nfunction tryParsePreset(p: string): void {\r\n    const previousValue = preset;\r\n    preset = p as EPreset;\r\n\r\n    if (preset !== previousValue) {\r\n        callObservers(observers.presetChange);\r\n    }\r\n}\r\nPicker.addObserver(controlId.PRESET, tryParsePreset);\r\ntryParsePreset(Picker.getValue(controlId.PRESET));\r\n\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    const previous = speed;\r\n    speed = s;\r\n\r\n    for (const observer of observers.speedChange) {\r\n        observer(previous);\r\n    }\r\n});\r\n\r\nlet persistence: boolean = Checkbox.isChecked(controlId.PERSISTENCE);\r\nCheckbox.addObserver(controlId.PERSISTENCE, (checked: boolean) => {\r\n    persistence = checked;\r\n});\r\n\r\nlet closeLoop: boolean = Checkbox.isChecked(controlId.CLOSE_LOOP);\r\nCheckbox.addObserver(controlId.CLOSE_LOOP, (checked: boolean) => {\r\n    closeLoop = checked;\r\n    callObservers(observers.clear);\r\n});\r\n\r\nlet repeat: boolean = Checkbox.isChecked(controlId.REPEAT);\r\nCheckbox.addObserver(controlId.REPEAT, (checked: boolean) => {\r\n    repeat = checked;\r\n});\r\n\r\nButton.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\n/* === INTERFACE ====================================================== */\r\n/**\r\n * Class giving access to all the parameters of the application. Also gives access to event handlers.\r\n */\r\nclass Parameters {\r\n    public static get preset(): EPreset {\r\n        return preset;\r\n    }\r\n\r\n    public static get speed(): number {\r\n        return speed;\r\n    }\r\n\r\n    public static get persistence(): boolean {\r\n        return persistence;\r\n    }\r\n\r\n    public static get closeLoop(): boolean {\r\n        return closeLoop;\r\n    }\r\n\r\n    public static get repeat(): boolean {\r\n        return repeat;\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return displayCircles;\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return displaySegments;\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return displayCurve;\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): SpeedObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n    public static get presetObservers(): GenericObserver[] {\r\n        return observers.presetChange;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","let enabled = true;\r\n\r\nfunction setEnabled(e: boolean): void {\r\n    enabled = e;\r\n}\r\n\r\nfunction message(m: string): void {\r\n    if (enabled) {\r\n        console.log(m);\r\n    }\r\n}\r\n\r\nexport {\r\n    setEnabled,\r\n    message,\r\n};\r\n","/**\r\n * Class for measuring execution performance.\r\n */\r\nclass StopWatch {\r\n    private readonly start: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.start = performance.now();\r\n    }\r\n\r\n    public get milliseconds(): number {\r\n        return Math.ceil(performance.now() - this.start);\r\n    }\r\n}\r\n\r\nexport {\r\n    StopWatch,\r\n};\r\n","import { Clock } from \"./clock\";\r\nimport { FourierSeries } from \"./fourier-series\";\r\nimport { LineDrawing } from \"./line-drawing\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { IPoint } from \"./point\";\r\nimport { Presets } from \"./presets\";\r\nimport { TimeUnit } from \"./units\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction main(): void {\r\n    const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n    const context: CanvasRenderingContext2D = canvas.getContext(\"2d\");\r\n\r\n    function adjustCanvasSize(): void {\r\n        if (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight) {\r\n            canvas.width = canvas.clientWidth;\r\n            canvas.height = canvas.clientHeight;\r\n        }\r\n    }\r\n\r\n    context.lineWidth = 1;\r\n\r\n    let drawing: LineDrawing = null;\r\n    let fourier: FourierSeries = null;\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n\r\n    let needToRedraw = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    const wantedLength = 2000; // milliseconds\r\n    function mainLoop(): void {\r\n        if (drawing !== null && fourier !== null) { // checks that preset is loaded\r\n            let t: TimeUnit = clock.current / wantedLength;\r\n            const maxT: TimeUnit = Parameters.closeLoop ? 1 : drawing.originalPathLength;\r\n\r\n            t = Math.min(t, maxT);\r\n\r\n            if (t >= maxT && Parameters.repeat) {\r\n                needToRestart = true;\r\n            }\r\n\r\n            if (needToRestart) {\r\n                needToRestart = false;\r\n                clock.reset();\r\n                fourier.resetCurve();\r\n                t = 0;\r\n                Canvas.setIndicatorText(\"fourier-order\", Parameters.order.toLocaleString());\r\n                context.clearRect(0, 0, canvas.width, canvas.height);\r\n            }\r\n\r\n            if (needToRedraw) {\r\n                adjustCanvasSize();\r\n\r\n                if (!Parameters.persistence) {\r\n                    context.clearRect(0, 0, canvas.width, canvas.height);\r\n                }\r\n\r\n                if (Parameters.displayOriginalCurve) {\r\n                    context.strokeStyle = \"rgb(0,128,0)\";\r\n                    const previousWidth = context.lineWidth;\r\n                    context.lineWidth = 2;\r\n\r\n                    drawing.draw(context, t);\r\n\r\n                    context.lineWidth = previousWidth;\r\n                }\r\n\r\n                if (Parameters.displayCircles) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"rgba(255,255,255,0.3)\";\r\n                    fourier.drawCircles(context, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displayCurve) {\r\n                    context.strokeStyle = \"white\";\r\n                    fourier.drawCurve(context, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displaySegments) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,0,0,0.01)\" : \"red\";\r\n                    fourier.drawPathToPoint(context, Parameters.order, t);\r\n                }\r\n            }\r\n\r\n            needToRedraw = t < maxT;\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    function loadPreset(): void {\r\n        drawing = null;\r\n        fourier = null;\r\n\r\n        const canvasSize: number[] = Canvas.getSize();\r\n        Canvas.showLoader(true);\r\n        Presets.getPreset(Parameters.preset, canvasSize, (points: IPoint[]) => {\r\n            drawing = new LineDrawing(points);\r\n            fourier = drawing.computeFourierSeries(300);\r\n            needToRestart = true;\r\n            clock.reset();\r\n            Canvas.showLoader(false);\r\n        });\r\n    }\r\n\r\n    Parameters.presetObservers.push(loadPreset);\r\n    Canvas.Observers.canvasResize.push(loadPreset);\r\n\r\n    loadPreset();\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","import { Parameters } from \"./parameters\";\r\n\r\n/**\r\n * This class handles the measuring of time at a variable speed.\r\n */\r\nclass Clock {\r\n    private lastCheckpoint: DOMHighResTimeStamp;\r\n    private lastCheckpointReal: DOMHighResTimeStamp;\r\n    private speed: number;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        Parameters.speedChangeObservers.push(() => this.setSpeed(Parameters.speed));\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.lastCheckpoint = 0;\r\n        this.lastCheckpointReal = performance.now();\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.lastCheckpoint = this.current;\r\n        this.lastCheckpointReal = performance.now();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        return this.lastCheckpoint + this.speed * (performance.now() - this.lastCheckpointReal);\r\n    }\r\n}\r\n\r\nexport {\r\n    Clock,\r\n};\r\n","import { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport * as Log from \"./log\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { distance, equals, interpolate, IPoint } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\n/**\r\n * Represents a 2D line parametrized by a 1D input.\r\n * The line is 1-periodic: [0,1] -> RxR.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass LineDrawing {\r\n    public readonly pathLength: SpaceUnit; // Length of the total path in space-units\r\n    public readonly originalPathLength: TimeUnit; // Length of the original path in time-units\r\n    private readonly points: IPoint[];\r\n\r\n    /**\r\n     * Builds a LineDrawing from the input points.\r\n     * If the input is not periodic, then we extend it with a last point to make the LineDrawing periodic.\r\n     */\r\n    public constructor(points: IPoint[]) {\r\n        this.points = points;\r\n\r\n        let originalPathLength: SpaceUnit = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            originalPathLength += distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        let totalPathLength: SpaceUnit = originalPathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (!equals(firstPoint, lastPoint)) {\r\n            totalPathLength += distance(lastPoint, firstPoint);\r\n            this.points.push({\r\n                x: firstPoint.x,\r\n                y: firstPoint.y,\r\n            });\r\n        }\r\n\r\n        this.pathLength = totalPathLength;\r\n        this.originalPathLength = originalPathLength / totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Draws the line portion between 0 and t.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public draw(context: CanvasRenderingContext2D, t: TimeUnit): void {\r\n        context.beginPath();\r\n        context.moveTo(this.points[0].x, this.points[0].y);\r\n\r\n        const desiredLength: SpaceUnit = t * this.pathLength;\r\n\r\n        let currentLength: SpaceUnit = 0;\r\n\r\n        let i: number;\r\n        for (i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                context.lineTo(nextPoint.x, nextPoint.y);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                context.lineTo(finalPoint.x, finalPoint.y);\r\n                currentLength += distance(lastPoint, finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const stopwatch = new StopWatch();\r\n\r\n        const nbSteps = Math.ceil(Parameters.integrationPrecision * this.pathLength);\r\n        const stepSize = this.pathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        Log.message(`Computed ${order} Fourier coefficient with ${nbSteps} integration steps ` +\r\n            `in ${stopwatch.milliseconds} ms.`);\r\n        return new FourierSeries(coefficients, this.pathLength);\r\n    }\r\n}\r\n\r\nexport {\r\n    LineDrawing,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\nimport { IPoint } from \"./point\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Represents the Fourier development of a 1-periodic [0,1] -> RxR signal.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass FourierSeries {\r\n    private readonly coefficients: IFourierCoefficient[];\r\n\r\n    private readonly curveStepSize: SpaceUnit;\r\n    private partialCurve: IPoint[];\r\n    private partialCurveOrder: number;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], totalLength: SpaceUnit) {\r\n        this.coefficients = coefficients;\r\n\r\n        this.partialCurve = [];\r\n        this.curveStepSize = 1 / (Parameters.curvePrecision * totalLength);\r\n    }\r\n\r\n    public resetCurve(): void {\r\n        this.partialCurve = [];\r\n    }\r\n\r\n    public drawCurve(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        if (order !== this.partialCurveOrder) {\r\n            this.partialCurveOrder = order;\r\n            this.resetCurve();\r\n        }\r\n\r\n        // Compute partial curve\r\n        const currentPointIndex = t / this.curveStepSize;\r\n        const lastConsolidatedPointIndex = Math.floor(currentPointIndex);\r\n        const nextConsolidatedPointIndex = Math.ceil(currentPointIndex);\r\n        let point: IPoint;\r\n\r\n        for (let i = this.partialCurve.length; i <= lastConsolidatedPointIndex; i++) {\r\n            point = this.computePoint(order, i * this.curveStepSize);\r\n            this.partialCurve.push(point);\r\n        }\r\n\r\n        // Draw partial curve\r\n        context.beginPath();\r\n        context.moveTo(this.partialCurve[0].x, this.partialCurve[0].y);\r\n        for (let i = 1; i < nextConsolidatedPointIndex; i++) {\r\n            context.lineTo(this.partialCurve[i].x, this.partialCurve[i].y);\r\n        }\r\n\r\n        point = this.computePoint(order, t);\r\n        context.lineTo(point.x, point.y);\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, t] portion of the approximated curve.\r\n     * @param order Maximum Fourier order to use. Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawPathToPoint(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        if (max <= 0) {\r\n            return;\r\n        }\r\n\r\n        let x = this.coefficients[0].magnitude * Math.cos(this.coefficients[0].phase);\r\n        let y = this.coefficients[0].magnitude * Math.sin(this.coefficients[0].phase);\r\n\r\n        const TWO_PI_T = TWO_PI * t;\r\n\r\n        context.beginPath();\r\n        context.moveTo(x, y);\r\n\r\n        for (let i = 1; i < max; i++) {\r\n            const coefficient = this.coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI_T * coefficient.n;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n\r\n            context.lineTo(x, y);\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    /**\r\n     * Draws the circles representing the Fourier coefficients used to compute the point position at t.\r\n     * @param order Maximum Fourier order to use. Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCircles(context: CanvasRenderingContext2D, order: number, t: TimeUnit): void {\r\n        function drawCircle(centerX: number, centerY: number, radius: number): void {\r\n            context.beginPath();\r\n            context.arc(centerX, centerY, radius, 0, TWO_PI);\r\n            context.closePath();\r\n            context.stroke();\r\n        }\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        if (max < 2) {\r\n            return;\r\n        }\r\n\r\n        const TWO_PI_T = TWO_PI * t;\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this.coefficients[i];\r\n\r\n            if (i > 1) {\r\n                drawCircle(x, y, coefficient.magnitude);\r\n            }\r\n\r\n            const TWO_PI_N_T = TWO_PI_T * coefficient.n;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    private computePoint(order: number, t: number): IPoint {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this.coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        return { x, y };\r\n    }\r\n\r\n    private computeAmountOfCoefficients(order: number): number {\r\n        return Math.min(this.coefficients.length, 1 + 2 * order);\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\n/* Assumes t is between 0 and 1 included. */\r\nfunction interpolate(p1: IPoint, p2: IPoint, t: number): IPoint {\r\n    return {\r\n        x: p1.x * (1 - t) + p2.x * t,\r\n        y: p1.y * (1 - t) + p2.y * t,\r\n    };\r\n}\r\n\r\nfunction distance(p1: IPoint, p2: IPoint): number {\r\n    const dX = p1.x - p2.x;\r\n    const dY = p1.y - p2.y;\r\n    return Math.sqrt(dX * dX + dY * dY);\r\n}\r\n\r\nfunction equals(p1: IPoint, p2: IPoint): boolean {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\nexport {\r\n    distance,\r\n    equals,\r\n    interpolate,\r\n    IPoint,\r\n};\r\n","import * as Log from \"./log\";\r\nimport { IPoint } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\n\r\n/* Enum values must match the values of the controls */\r\nenum EPreset {\r\n    ARLEQUIN = \"arlequin\",\r\n    BULL = \"bull\",\r\n    CAMEL = \"camel\",\r\n    DOG = \"dog\",\r\n    DOVE = \"dove\",\r\n    FLAMINGO = \"flamingo\",\r\n    HORSE = \"horse\",\r\n    MOUSE = \"mouse\",\r\n    WOMAN1 = \"woman1\",\r\n    WOMAN2 = \"woman2\",\r\n}\r\n\r\nconst PRESET_SIZE = 512; // a preset should be dimensionned for a 512 x 512 canvas\r\n\r\n/**\r\n * Class for retrieving on demand the preset drawings with AJAX requests.\r\n * Tries to minimize the request by using a memory cache.\r\n */\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, wantedSize: number[], callback: (array: IPoint[]) => any): void {\r\n        const stopwatch = new StopWatch();\r\n        let fromCache = false;\r\n\r\n        function safelyCallCallback(points: IPoint[]): void {\r\n            const scaling = Math.min(wantedSize[0] / PRESET_SIZE, wantedSize[1] / PRESET_SIZE);\r\n            const offsetX = 0.5 * (wantedSize[0] - PRESET_SIZE * scaling);\r\n            const offsetY = 0.5 * (wantedSize[1] - PRESET_SIZE * scaling);\r\n\r\n            /* Create a deep copy to keep the cache clean */\r\n            const copy: IPoint[] = [];\r\n            for (const point of points) {\r\n                copy.push({\r\n                    x: point.x * scaling + offsetX,\r\n                    y: point.y * scaling + offsetY,\r\n                });\r\n            }\r\n\r\n            if (fromCache) {\r\n                Log.message(`Retrieved preset '${preset}' from cache in ${stopwatch.milliseconds} ms`);\r\n            } else {\r\n                Log.message(`Downloaded preset '${preset}' in ${stopwatch.milliseconds} ms.`);\r\n            }\r\n\r\n            callback(copy);\r\n        }\r\n\r\n        if (typeof Presets.cache === \"undefined\") {\r\n            Presets.cache = {};\r\n        } else if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            fromCache = true;\r\n            safelyCallCallback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"readystatechange\", () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray !== null) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    safelyCallCallback(Presets.cache[preset]);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open(\"GET\", `resources/${preset}.txt`);\r\n        xhr.send();\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: IPoint[];\r\n    };\r\n\r\n    private static tryParsePointsArray(text: string): IPoint[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const stopwatch = new StopWatch();\r\n\r\n        const points: IPoint[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        Log.message(`Parsed preset in ${stopwatch.milliseconds} ms.`);\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n"],"sourceRoot":""}