{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/point.ts","webpack:///./src/ts/log.ts","webpack:///./src/ts/stopwatch.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/canvas-2d.ts","webpack:///./src/ts/clock.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/presets.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EMode","controlId","PRESET","MODE","SPEED","PERSISTENCE","CLOSE_LOOP","REPEAT","RESET","DISPLAY_CIRCLES","DISPLAY_SEGMENTS","DISPLAY_CURVE","DISPLAY_ORIGINAL_CURVE","ORDER","callObservers","observersList","observer","preset","observers","clear","redraw","speedChange","presetChange","tryParsePreset","previousValue","parseAndApplyMode","newModes","length","newMode","isInstant","INSTANT","Controls","setVisibility","Picker","addObserver","getValue","Tabs","getValues","speed","Range","previous","persistence","Checkbox","isChecked","checked","closeLoop","PROGRESSIVE","repeat","Button","displayCircles","displaySegments","displayCurve","displayOriginalCurve","order","this","isProgressiveMode","Parameters","interpolate","p1","p2","x","y","distance","dX","dY","Math","sqrt","equals","copy","point","Point","enabled","setEnabled","e","message","console","log","start","performance","now","ceil","StopWatch","setOrderIndicator","round","Canvas","setIndicatorText","toLocaleString","canvas2D","Canvas2D","context","lineWidth","drawing","fourier","clock","Clock","needToRestart","clearObservers","push","needToRedraw","redrawObservers","loopDuration","loadPreset","canvasSize","getSize","showLoader","Presets","getPreset","points","LineDrawing","computeFourierSeries","reset","presetObservers","Observers","canvasResize","requestAnimationFrame","mainLoop","current","maxT","originalPathDuration","finishedLoop","isPaused","resume","min","pause","resetCurve","adjustSize","strokeStyle","previousWidth","draw","drawCirclesToPoint","drawCurve","drawSegmentsToPoint","drawCurvePartialOrder","main","TWO_PI","PI","canvasElementId","isDrawingLine","nbPointsInLine","canvas","document","getElementById","getContext","width","clientWidth","height","clientHeight","clearRect","drawCircle","center","radius","beginPath","arc","closePath","stroke","startLine","endLine","addPointToLine","moveTo","lineTo","paused","lastCheckpoint","clockTime","realTime","speedChangeObservers","setSpeed","createCheckpoint","originalPathLength","totalPathLength","firstPoint","lastPoint","pathLength","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","stopwatch","nbSteps","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","coefficients","floor","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","phase","atan2","Log","milliseconds","FourierSeries","applyCoefficient","coefficient","currentPhase","applyCoefficientsArray","totalLength","partialCurve","partialCurveOrder","Error","sort","a","b","absA","abs","absB","curveStepSize","curvePrecision","computePartialCurve","f","interpolatedPoint","additionalCoefficients","getCoefficients","localT","missingCoefficients","currentPointIndex","nextPointIndex","neededCoefficients","orderFrom","orderTo","firstIndex","max","lastIndex","slice","EPreset","PRESET_SIZE","wantedSize","callback","fromCache","safelyCallCallback","scaling","offsetX","offsetY","cache","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","text","split","partial"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { EPreset } from \"./presets\";\r\n\r\ndeclare const Button: any;\r\n// declare const Canvas: any;\r\ndeclare const Checkbox: any;\r\ndeclare const Controls: any;\r\n// declare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\ndeclare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRESET: \"preset-picker-id\",\r\n    MODE: \"mode-picker-id\",\r\n    SPEED: \"speed-range-id\",\r\n    PERSISTENCE: \"persistence-checkbox-id\",\r\n    CLOSE_LOOP: \"close-loop-checkbox-id\",\r\n    REPEAT: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n};\r\n\r\nenum EMode {\r\n    INSTANT = \"0\",\r\n    PROGRESSIVE = \"1\",\r\n}\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\ntype SpeedObserver = (previousSpeed: number) => void;\r\n\r\nfunction callObservers(observersList: GenericObserver[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: SpeedObserver[];\r\n    presetChange: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n    presetChange: [],\r\n};\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet preset: EPreset;\r\nfunction tryParsePreset(p: string): void {\r\n    const previousValue = preset;\r\n    preset = p as EPreset;\r\n\r\n    if (preset !== previousValue) {\r\n        callObservers(observers.presetChange);\r\n    }\r\n}\r\nPicker.addObserver(controlId.PRESET, tryParsePreset);\r\ntryParsePreset(Picker.getValue(controlId.PRESET));\r\n\r\nlet mode: EMode;\r\nfunction parseAndApplyMode(newModes: string[]): void {\r\n    if (newModes.length !== 1) {\r\n        return;\r\n    }\r\n\r\n    const newMode = newModes[0] as EMode;\r\n    if (newMode !== mode) {\r\n        mode = newMode;\r\n\r\n        const isInstant = (mode === EMode.INSTANT);\r\n        Controls.setVisibility(controlId.DISPLAY_CIRCLES, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_SEGMENTS, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_CURVE, isInstant);\r\n\r\n        callObservers(observers.clear);\r\n    }\r\n}\r\nparseAndApplyMode(Tabs.getValues(controlId.MODE));\r\nTabs.addObserver(controlId.MODE, parseAndApplyMode);\r\n\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    const previous = speed;\r\n    speed = s;\r\n\r\n    for (const observer of observers.speedChange) {\r\n        observer(previous);\r\n    }\r\n});\r\n\r\nlet persistence: boolean = Checkbox.isChecked(controlId.PERSISTENCE);\r\nCheckbox.addObserver(controlId.PERSISTENCE, (checked: boolean) => {\r\n    persistence = checked;\r\n});\r\n\r\nlet closeLoop: boolean = Checkbox.isChecked(controlId.CLOSE_LOOP);\r\nCheckbox.addObserver(controlId.CLOSE_LOOP, (checked: boolean) => {\r\n    closeLoop = checked;\r\n\r\n    if (mode === EMode.PROGRESSIVE) {\r\n        callObservers(observers.clear);\r\n    }\r\n});\r\n\r\nlet repeat: boolean = Checkbox.isChecked(controlId.REPEAT);\r\nCheckbox.addObserver(controlId.REPEAT, (checked: boolean) => {\r\n    repeat = checked;\r\n});\r\n\r\nButton.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\n/* === INTERFACE ====================================================== */\r\n/**\r\n * Class giving access to all the parameters of the application. Also gives access to event handlers.\r\n */\r\nclass Parameters {\r\n    public static get preset(): EPreset {\r\n        return preset;\r\n    }\r\n\r\n    public static get isProgressiveMode(): boolean {\r\n        return mode === EMode.PROGRESSIVE;\r\n    }\r\n\r\n    public static get speed(): number {\r\n        if (this.isProgressiveMode) {\r\n            return 0.1 * speed;\r\n        }\r\n        return speed;\r\n    }\r\n\r\n    public static get persistence(): boolean {\r\n        return persistence;\r\n    }\r\n\r\n    public static get closeLoop(): boolean {\r\n        return closeLoop;\r\n    }\r\n\r\n    public static get repeat(): boolean {\r\n        return repeat;\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return mode === EMode.INSTANT && displayCircles;\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return mode === EMode.INSTANT && displaySegments;\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return mode === EMode.INSTANT && displayCurve;\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): SpeedObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n    public static get presetObservers(): GenericObserver[] {\r\n        return observers.presetChange;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","/**\r\n * Simple data class representing a 2D point.\r\n */\r\nclass Point {\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public static interpolate(p1: Point, p2: Point, t: number): Point {\r\n        return {\r\n            x: p1.x * (1 - t) + p2.x * t,\r\n            y: p1.y * (1 - t) + p2.y * t,\r\n        };\r\n    }\r\n\r\n    public static distance(p1: Point, p2: Point): number {\r\n        const dX = p1.x - p2.x;\r\n        const dY = p1.y - p2.y;\r\n        return Math.sqrt(dX * dX + dY * dY);\r\n    }\r\n\r\n    public static equals(p1: Point, p2: Point): boolean {\r\n        return p1.x === p2.x && p1.y === p2.y;\r\n    }\r\n\r\n    public static copy(point: Point): Point {\r\n        return {\r\n            x: point.x,\r\n            y: point.y,\r\n        };\r\n    }\r\n\r\n    public x: number;\r\n    public y: number;\r\n}\r\n\r\nexport {\r\n    Point,\r\n};\r\n","let enabled = true;\r\n\r\nfunction setEnabled(e: boolean): void {\r\n    enabled = e;\r\n}\r\n\r\nfunction message(m: string): void {\r\n    if (enabled) {\r\n        console.log(m);\r\n    }\r\n}\r\n\r\nexport {\r\n    setEnabled,\r\n    message,\r\n};\r\n","/**\r\n * Class for measuring execution performance.\r\n */\r\nclass StopWatch {\r\n    private readonly start: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.start = performance.now();\r\n    }\r\n\r\n    public get milliseconds(): number {\r\n        return Math.ceil(performance.now() - this.start);\r\n    }\r\n}\r\n\r\nexport {\r\n    StopWatch,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Clock } from \"./clock\";\r\nimport { FourierSeries } from \"./fourier-series\";\r\nimport { LineDrawing } from \"./line-drawing\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point } from \"./point\";\r\nimport { Presets } from \"./presets\";\r\nimport { TimeUnit } from \"./units\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction setOrderIndicator(value: number): void {\r\n    value = Math.round(100 * value) / 100; // 2 digits max\r\n    Canvas.setIndicatorText(\"fourier-order\", value.toLocaleString());\r\n}\r\n\r\nfunction main(): void {\r\n    const canvas2D = new Canvas2D(\"canvas\");\r\n    const context = canvas2D.context;\r\n    context.lineWidth = 1;\r\n\r\n    let drawing: LineDrawing = null;\r\n    let fourier: FourierSeries = null;\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n\r\n    let needToRedraw = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    const loopDuration = 2000; // milliseconds, at normal speed\r\n    function mainLoop(): void {\r\n        if (drawing !== null && fourier !== null) { // checks that preset is loaded\r\n            let t: TimeUnit = clock.current / loopDuration;\r\n            const maxT: TimeUnit = Parameters.closeLoop ? 1 : drawing.originalPathDuration;\r\n            let finishedLoop = (t >= maxT);\r\n\r\n            if (!finishedLoop && clock.isPaused) {\r\n                clock.resume();\r\n            }\r\n\r\n            t = Math.min(t, maxT);\r\n\r\n            if (finishedLoop) {\r\n                if (Parameters.repeat) {\r\n                    needToRestart = true;\r\n                } else {\r\n                    clock.pause();\r\n                }\r\n            }\r\n\r\n            if (needToRestart) {\r\n                needToRestart = false;\r\n                clock.reset();\r\n                fourier.resetCurve();\r\n                t = 0;\r\n                finishedLoop = false;\r\n                setOrderIndicator(Parameters.order);\r\n                canvas2D.clear();\r\n            }\r\n\r\n            if (needToRedraw) {\r\n                canvas2D.adjustSize();\r\n\r\n                if (!Parameters.persistence) {\r\n                    canvas2D.clear();\r\n                }\r\n\r\n                if (Parameters.displayOriginalCurve) {\r\n                    context.strokeStyle = \"rgb(0,128,0)\";\r\n                    const previousWidth = context.lineWidth;\r\n                    context.lineWidth = 2;\r\n\r\n                    drawing.draw(canvas2D, Parameters.isProgressiveMode ? maxT : t);\r\n\r\n                    context.lineWidth = previousWidth;\r\n                }\r\n\r\n                if (Parameters.displayCircles) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"rgba(255,255,255,0.3)\";\r\n                    fourier.drawCirclesToPoint(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displayCurve) {\r\n                    context.strokeStyle = \"white\";\r\n                    fourier.drawCurve(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displaySegments) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,0,0,0.01)\" : \"red\";\r\n                    fourier.drawSegmentsToPoint(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.isProgressiveMode) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"white\";\r\n                    const order = Parameters.order * t / maxT;\r\n                    fourier.drawCurvePartialOrder(canvas2D, order, maxT);\r\n                    setOrderIndicator(order);\r\n                }\r\n            }\r\n\r\n            needToRedraw = !finishedLoop && Parameters.speed > 0;\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    function loadPreset(): void {\r\n        drawing = null;\r\n        fourier = null;\r\n\r\n        const canvasSize: number[] = Canvas.getSize();\r\n        Canvas.showLoader(true);\r\n        Presets.getPreset(Parameters.preset, canvasSize, (points: Point[]) => {\r\n            drawing = new LineDrawing(points);\r\n            fourier = drawing.computeFourierSeries(300 + 1); // one more to avoid out of bounds exceptions\r\n            needToRestart = true;\r\n            clock.reset();\r\n            Canvas.showLoader(false);\r\n        });\r\n    }\r\n\r\n    Parameters.presetObservers.push(loadPreset);\r\n    Canvas.Observers.canvasResize.push(loadPreset);\r\n\r\n    loadPreset();\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","import { Point } from \"./point\";\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Class for instancing and using a 2D HTML Canvas.\r\n */\r\nclass Canvas2D {\r\n    public readonly context: CanvasRenderingContext2D;\r\n\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private isDrawingLine: boolean = false;\r\n    private nbPointsInLine: number = 0;\r\n\r\n    public constructor(canvasElementId: string) {\r\n        this.canvas = document.getElementById(canvasElementId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext(\"2d\");\r\n    }\r\n\r\n    public adjustSize(): void {\r\n        if (this.canvas.width !== this.canvas.clientWidth || this.canvas.height !== this.canvas.clientHeight) {\r\n            this.canvas.width = this.canvas.clientWidth;\r\n            this.canvas.height = this.canvas.clientHeight;\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    public drawCircle(center: Point, radius: number): void {\r\n        if (radius > 0.5) {\r\n            this.context.beginPath();\r\n            this.context.arc(center.x, center.y, radius, 0, TWO_PI);\r\n            this.context.closePath();\r\n            this.context.stroke();\r\n        }\r\n    }\r\n\r\n    public startLine(): void {\r\n        if (this.isDrawingLine) {\r\n            this.endLine();\r\n        }\r\n\r\n        this.context.beginPath();\r\n        this.isDrawingLine = true;\r\n        this.nbPointsInLine = 0;\r\n    }\r\n\r\n    public addPointToLine(point: Point): void {\r\n        if (this.nbPointsInLine === 0) {\r\n            this.context.moveTo(point.x, point.y);\r\n        } else {\r\n            this.context.lineTo(point.x, point.y);\r\n        }\r\n\r\n        this.nbPointsInLine++;\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.isDrawingLine) {\r\n            this.context.stroke();\r\n            this.context.closePath();\r\n            this.isDrawingLine = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Canvas2D,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\n\r\ninterface IClockCheckpoint {\r\n    clockTime: DOMHighResTimeStamp; // in the clock temporality\r\n    realTime: DOMHighResTimeStamp; // in the Javascript temporality\r\n}\r\n\r\n/**\r\n * This class handles the measuring of time at a variable speed.\r\n */\r\nclass Clock {\r\n    private speed: number;\r\n    private paused: boolean;\r\n\r\n    /* This checkpoint system is used to avoid floating point approximations when computing current time. */\r\n    private lastCheckpoint: IClockCheckpoint;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        this.paused = false;\r\n        this.lastCheckpoint = {\r\n            clockTime: 0,\r\n            realTime: 0,\r\n        };\r\n\r\n        Parameters.speedChangeObservers.push(() => this.setSpeed(Parameters.speed));\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.paused = false;\r\n        this.lastCheckpoint.clockTime = 0;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n        this.setSpeed(Parameters.speed);\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.createCheckpoint();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = true;\r\n        }\r\n    }\r\n\r\n    public resume(): void {\r\n        if (this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = false;\r\n        }\r\n    }\r\n\r\n    public get isPaused(): boolean {\r\n        return this.paused;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        if (this.paused) {\r\n            return this.lastCheckpoint.clockTime;\r\n        }\r\n\r\n        return this.lastCheckpoint.clockTime + this.speed * (performance.now() - this.lastCheckpoint.realTime);\r\n    }\r\n\r\n    private createCheckpoint(): void {\r\n        this.lastCheckpoint.clockTime = this.current;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n    }\r\n}\r\n\r\nexport {\r\n    Clock,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport * as Log from \"./log\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\n/**\r\n * Represents a 2D line parametrized by a 1D input.\r\n * The line is 1-periodic: [0,1] -> RxR.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass LineDrawing {\r\n    public readonly pathLength: SpaceUnit; // Length of the total path in space-units\r\n    public readonly originalPathDuration: TimeUnit; // Length of the original path in time-units\r\n    private readonly points: Point[];\r\n\r\n    /**\r\n     * Builds a LineDrawing from the input points.\r\n     * If the input is not periodic, then we extend it with a last point to make the LineDrawing periodic.\r\n     */\r\n    public constructor(points: Point[]) {\r\n        this.points = points;\r\n\r\n        let originalPathLength: SpaceUnit = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            originalPathLength += Point.distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        let totalPathLength: SpaceUnit = originalPathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (!Point.equals(firstPoint, lastPoint)) {\r\n            totalPathLength += Point.distance(lastPoint, firstPoint);\r\n            this.points.push(Point.copy(firstPoint));\r\n        }\r\n\r\n        this.pathLength = totalPathLength;\r\n        this.originalPathDuration = originalPathLength / totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Draws the line portion between 0 and t.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public draw(canvas: Canvas2D, t: TimeUnit): void {\r\n        const desiredLength: SpaceUnit = t * this.pathLength;\r\n        let currentLength: SpaceUnit = 0;\r\n\r\n        canvas.startLine();\r\n        canvas.addPointToLine(this.points[0]);\r\n\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = Point.distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                canvas.addPointToLine(nextPoint);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = Point.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                canvas.addPointToLine(finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const stopwatch = new StopWatch();\r\n\r\n        const nbSteps = Math.ceil(Parameters.integrationPrecision * this.pathLength);\r\n        const stepSize = this.pathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = Point.distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = Point.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        Log.message(`Computed ${order} Fourier coefficient with ${nbSteps} integration steps ` +\r\n            `in ${stopwatch.milliseconds} ms.`);\r\n        return new FourierSeries(coefficients, this.pathLength);\r\n    }\r\n}\r\n\r\nexport {\r\n    LineDrawing,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point} from \"./point\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Modifies the point given as argument by applying to it the provided Fourier Coefficient at the provided location.\r\n */\r\nfunction applyCoefficient(point: Point, coefficient: IFourierCoefficient, t: TimeUnit): void {\r\n    const currentPhase = TWO_PI * t * coefficient.n + coefficient.phase;\r\n    point.x += coefficient.magnitude * Math.cos(currentPhase);\r\n    point.y += coefficient.magnitude * Math.sin(currentPhase);\r\n}\r\n\r\n/**\r\n * Modifies the point given as argument by applying to it the provided Fourier Coefficients at the provided location.\r\n */\r\nfunction applyCoefficientsArray(point: Point, coefficients: IFourierCoefficient[], t: TimeUnit): void {\r\n    for (const coefficient of coefficients) {\r\n        applyCoefficient(point, coefficient, t);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the Fourier development of a 1-periodic [0,1] -> RxR signal.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass FourierSeries {\r\n    private readonly coefficients: IFourierCoefficient[];\r\n    private readonly curveStepSize: SpaceUnit;\r\n\r\n    private partialCurve: Point[] = [];\r\n    private partialCurveOrder: number = -1;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], totalLength: SpaceUnit) {\r\n        if (coefficients.length % 2 !== 0) { // coefficients must go in pairs of 2: 0, 1, -1, 2, -2, ...\r\n            coefficients.length--;\r\n        }\r\n        if (coefficients.length === 0) {\r\n            throw new Error(\"Fourier series must have at least one coefficient.\");\r\n        }\r\n\r\n        // Sort the coefs in that order: 0, 1, -1, 2, -2, 3, -3, ...\r\n        coefficients.sort((a: IFourierCoefficient, b: IFourierCoefficient) => {\r\n            const absA = Math.abs(a.n);\r\n            const absB = Math.abs(b.n);\r\n            if (absA !== absB) {\r\n                return absA - absB;\r\n            }\r\n            return b.n - a.n;\r\n        });\r\n        this.coefficients = coefficients;\r\n\r\n        this.curveStepSize = 1 / (Parameters.curvePrecision * totalLength);\r\n    }\r\n\r\n    /**\r\n     * Purges the internal cache of the class. Should not be called too often.\r\n     */\r\n    public resetCurve(): void {\r\n        this.partialCurve = [];\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, t] curve portion at the specified integer Fourier order.\r\n     * @param order Expected to be an integer\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCurve(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const lastPointIndex = this.computePartialCurve(order, t);\r\n\r\n        // Draw partial curve\r\n        canvas.startLine();\r\n        for (let i = 0; i < lastPointIndex; i++) {\r\n            canvas.addPointToLine(this.partialCurve[i]);\r\n        }\r\n\r\n        const f = lastPointIndex % 1;\r\n        const lastPoint = this.partialCurve[Math.floor(lastPointIndex)];\r\n        const nextPoint = this.partialCurve[Math.floor(lastPointIndex) + 1];\r\n\r\n        const interpolatedPoint = Point.interpolate(lastPoint, nextPoint, f);\r\n        canvas.addPointToLine(interpolatedPoint);\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, approx. t] curve portion at the specified Fourier order.\r\n     * The order is linearily interpolated between the nearest coefficients.\r\n     * The curve's end (t parameter) is rounded to nearest.\r\n     * @param order If not an integer, then an intterpolation is performed to make sense of decimal Fourier order.\r\n     * @param t Expected to be in [0, 1]. Is not garanteed to be respected, approximations will be performed.\r\n     */\r\n    public drawCurvePartialOrder(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        this.computePartialCurve(order, t);\r\n\r\n        let additionalCoefficients = this.getCoefficients(Math.floor(order) + 1, Math.floor(order) + 1);\r\n        let f = order % 1;\r\n        if (f < 0.5) {\r\n            additionalCoefficients = [additionalCoefficients[0]];\r\n            f *= 2;\r\n        } else {\r\n            f = 2 * f - 1;\r\n        }\r\n\r\n        canvas.startLine();\r\n\r\n        const nbSteps = t / this.curveStepSize;\r\n        for (let i = 0; i < nbSteps; i++) {\r\n            const localT = i * this.curveStepSize;\r\n\r\n            const nextPoint = Point.copy(this.partialCurve[i]);\r\n            applyCoefficient(nextPoint, additionalCoefficients[0], localT);\r\n\r\n            let lastPoint: Point;\r\n            if (additionalCoefficients.length === 1) {\r\n                lastPoint = this.partialCurve[i];\r\n            } else { // additionalCoefficients.length === 2\r\n                lastPoint = Point.copy(nextPoint);\r\n                applyCoefficient(nextPoint, additionalCoefficients[1], localT);\r\n            }\r\n\r\n            const interpolatedPoint = Point.interpolate(lastPoint, nextPoint, f);\r\n            canvas.addPointToLine(interpolatedPoint);\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws a path to the wanted point, in the form of segments representing the action of each coefficient.\r\n     * @param order Maximum Fourier order to use. Must be an integer.\r\n     *              Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawSegmentsToPoint(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const point: Point = { x: 0, y: 0 };\r\n\r\n        canvas.startLine();\r\n\r\n        const coefficients = this.getCoefficients(0, order);\r\n        for (const coefficient of coefficients) {\r\n            applyCoefficient(point, coefficient, t);\r\n            canvas.addPointToLine(point);\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws a path to the wanted point, in the form of circles representing the magnitude of each coefficient.\r\n     * @param order Maximum Fourier order to use. Must be an integer.\r\n     *              Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCirclesToPoint(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const coefficients = this.getCoefficients(0, order);\r\n        if (coefficients.length < 2) {\r\n            return;\r\n        }\r\n\r\n        const point: Point = { x: 0, y: 0 };\r\n\r\n        for (const coefficient of coefficients) {\r\n            if (coefficient.n !== 0 && coefficient.n !== 1) {\r\n                canvas.drawCircle(point, coefficient.magnitude);\r\n            }\r\n            applyCoefficient(point, coefficient, t);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes the partial curve between 0 and t in the given order.\r\n     * The partial curve serves as cache and is as reused as possible.\r\n     * Returns the index of the 't' point in the partial curve.\r\n     * If this index is not an integer, it means an interpolation should be performed.\r\n     */\r\n    private computePartialCurve(order: number, t: TimeUnit): number {\r\n        order = Math.floor(order);\r\n\r\n        if (order < this.partialCurveOrder) {\r\n            // Existing points are computed with too high order. Restart from scratch.\r\n            this.resetCurve();\r\n        } else if (order > this.partialCurveOrder) {\r\n            // Existing points are computed with too low order. Complete existing points with missing orders.\r\n            const missingCoefficients = this.getCoefficients(this.partialCurveOrder + 1, order);\r\n\r\n            for (let i = 0; i < this.partialCurve.length; i++) {\r\n                const localT = i * this.curveStepSize;\r\n                applyCoefficientsArray(this.partialCurve[i], missingCoefficients, localT);\r\n            }\r\n        }\r\n\r\n        // Compute new points if needed\r\n        const currentPointIndex = t / this.curveStepSize;\r\n        const nextPointIndex = Math.ceil(currentPointIndex);\r\n\r\n        const neededCoefficients = this.getCoefficients(0, order);\r\n        for (let i = this.partialCurve.length; i <= nextPointIndex + 1; i++) {\r\n            const point: Point = { x: 0, y: 0 };\r\n            applyCoefficientsArray(point, neededCoefficients, i * this.curveStepSize);\r\n            this.partialCurve.push(point);\r\n        }\r\n\r\n        this.partialCurveOrder = order;\r\n        return currentPointIndex;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of coefficients containing, in that order:\r\n     * if orderFrom > 0: orderFrom, -orderFrom, orderFrom+1, -(orderFrom+1), ..., orderTo, -orderTo\r\n     * if orderFrom == 0: 0, 1, -1, ... orderTo, -orderTo\r\n     * If orderFrom > orderTo, or if one of the parameters is out of range, only returns the valid coefficients.\r\n     */\r\n    private getCoefficients(orderFrom: number, orderTo: number): IFourierCoefficient[] {\r\n        orderFrom = Math.min(orderFrom, orderTo);\r\n\r\n        const firstIndex = Math.max(0, 2 * orderFrom - 1);\r\n        const lastIndex = Math.min(this.coefficients.length, 2 * orderTo + 1);\r\n\r\n        return this.coefficients.slice(firstIndex, lastIndex);\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","import * as Log from \"./log\";\r\nimport { Point } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\n\r\n/* Enum values must match the values of the controls */\r\nenum EPreset {\r\n    ARLEQUIN = \"arlequin\",\r\n    BULL = \"bull\",\r\n    CAMEL = \"camel\",\r\n    DOG = \"dog\",\r\n    DOVE = \"dove\",\r\n    FLAMINGO = \"flamingo\",\r\n    HORSE = \"horse\",\r\n    MOUSE = \"mouse\",\r\n    WOMAN1 = \"woman1\",\r\n    WOMAN2 = \"woman2\",\r\n}\r\n\r\nconst PRESET_SIZE = 512; // a preset should be dimensionned for a 512 x 512 canvas\r\n\r\n/**\r\n * Class for retrieving on demand the preset drawings with AJAX requests.\r\n * Tries to minimize the request by using a memory cache.\r\n */\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, wantedSize: number[], callback: (array: Point[]) => any): void {\r\n        const stopwatch = new StopWatch();\r\n        let fromCache = false;\r\n\r\n        function safelyCallCallback(points: Point[]): void {\r\n            const scaling = Math.min(wantedSize[0] / PRESET_SIZE, wantedSize[1] / PRESET_SIZE);\r\n            const offsetX = 0.5 * (wantedSize[0] - PRESET_SIZE * scaling);\r\n            const offsetY = 0.5 * (wantedSize[1] - PRESET_SIZE * scaling);\r\n\r\n            /* Create a deep copy to keep the cache clean */\r\n            const copy: Point[] = [];\r\n            for (const point of points) {\r\n                copy.push({\r\n                    x: point.x * scaling + offsetX,\r\n                    y: point.y * scaling + offsetY,\r\n                });\r\n            }\r\n\r\n            if (fromCache) {\r\n                Log.message(`Retrieved preset '${preset}' from cache in ${stopwatch.milliseconds} ms`);\r\n            } else {\r\n                Log.message(`Downloaded preset '${preset}' in ${stopwatch.milliseconds} ms.`);\r\n            }\r\n\r\n            callback(copy);\r\n        }\r\n\r\n        if (typeof Presets.cache === \"undefined\") {\r\n            Presets.cache = {};\r\n        } else if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            fromCache = true;\r\n            safelyCallCallback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"readystatechange\", () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray !== null) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    safelyCallCallback(Presets.cache[preset]);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open(\"GET\", `resources/${preset}.txt`);\r\n        xhr.send();\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: Point[];\r\n    };\r\n\r\n    private static tryParsePointsArray(text: string): Point[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const stopwatch = new StopWatch();\r\n\r\n        const points: Point[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        Log.message(`Parsed preset in ${stopwatch.milliseconds} ms.`);\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n"],"sourceRoot":""}