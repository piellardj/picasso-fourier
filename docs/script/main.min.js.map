{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/point.ts","webpack:///./src/ts/presets.ts","webpack:///./src/ts/log.ts","webpack:///./src/ts/stopwatch.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/canvas-2d.ts","webpack:///./src/ts/clock.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/user-input.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EMode","controlId","callObservers","observersList","observer","preset","observers","tryParsePreset","previousValue","parseAndApplyMode","newModes","length","newMode","isInstant","INSTANT","Page","Controls","setVisibility","Picker","addObserver","getValue","Tabs","getValues","speed","Range","persistence","Checkbox","isChecked","checked","smooth","closeLoop","PROGRESSIVE","repeat","Button","displayCircles","displaySegments","displayCurve","displayOriginalCurve","order","zoom","updateIndicatorVisibility","visible","Canvas","setIndicatorsVisibility","z","FileControl","addDownloadObserver","setCustomPreset","setValue","EPreset","CUSTOM","this","isProgressiveMode","resetZoom","Parameters","interpolate","p1","p2","x","y","distance","dX","dY","Math","sqrt","equals","copy","point","Point","EState","getPreset","wantedSize","callback","interalCallback","stopWatchResize","StopWatch","Presets","resizePreset","cache","points","Log","message","milliseconds","state","LOADED","internalCallbacks","push","LOADING","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","internalCallback","open","send","canvasSize","center","scaling","min","width","height","offsetX","offsetY","text","split","partial","enabled","setEnabled","e","console","log","start","performance","now","ceil","setOrderIndicator","round","setIndicatorText","toLocaleString","canvas2D","Canvas2D","lineWidth","downloadObservers","download","drawing","fourier","clock","Clock","needToRestart","clearObservers","UserInput","finishedAcquisitionCallbacks","isValid","showLoader","recordedPath","getSize","needToRedraw","loadPoints","LineDrawing","computeFourierSeries","reset","loadPreset","redrawObservers","presetObservers","Observers","canvasResize","requestAnimationFrame","mainLoop","isRecording","clear","setFullViewport","strokeStyle","drawCurrentPath","current","maxT","originalPathDuration","finishedLoop","isPaused","resume","pause","resetCurve","adjustSize","computePoint","draw","drawCirclesToPoint","drawCurve","drawSegmentsToPoint","drawCurvePartialOrder","floor","main","TWO_PI","PI","wantedLineWidth","isDrawingLine","nbPointsInLine","canvas","getCanvas","context","getContext","cssPixel","window","devicePixelRatio","viewportZoom","viewportCenter","precomputeTransformation","style","actualWidth","clientWidth","actualHeight","clientHeight","clearRect","drawCircle","radius","visibleRadius","scale","translateX","translateY","beginPath","arc","closePath","stroke","startLine","endLine","addPointToLine","moveTo","lineTo","filename","msToBlob","blob","navigator","msSaveBlob","toBlob","link","document","createElement","href","URL","createObjectURL","click","paused","lastCheckpoint","clockTime","realTime","speedChangeObservers","updateSpeed","setSpeed","createCheckpoint","originalPathLength","totalPathLength","firstPoint","lastPoint","pathLength","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","stopwatch","nbSteps","max","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","coefficients","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","phase","atan2","FourierSeries","applyCoefficient","coefficient","currentPhase","applyCoefficientsArray","totalLength","partialCurve","partialCurveOrder","Error","sort","a","b","absA","abs","absB","curveStepSize","curvePrecision","computePartialCurve","f","interpolatedPoint","additionalCoefficients","getCoefficients","localT","missingCoefficients","currentPointIndex","nextPointIndex","neededCoefficients","orderFrom","orderTo","firstIndex","lastIndex","slice","currentPoints","isRecordingUserInput","getMousePosition","mousePosition","mouseDown","currentPosition","mouseUp","mouseMove"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","import { EPreset } from \"./presets\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRESET: \"preset-picker-id\",\r\n    MODE: \"mode-picker-id\",\r\n    SPEED: \"speed-range-id\",\r\n    PERSISTENCE: \"persistence-checkbox-id\",\r\n    SMOOTH: \"smooth-checkbox-id\",\r\n    CLOSE_LOOP: \"close-loop-checkbox-id\",\r\n    REPEAT: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n    ZOOM: \"zoom-range-id\",\r\n    INDICATOR: \"indicator-checkbox-id\",\r\n    DOWNLOAD: \"download-button-id\",\r\n};\r\n\r\nenum EMode {\r\n    INSTANT = \"0\",\r\n    PROGRESSIVE = \"1\",\r\n}\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\n\r\nfunction callObservers(observersList: GenericObserver[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: GenericObserver[];\r\n    presetChange: GenericObserver[];\r\n    download: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n    presetChange: [],\r\n    download: [],\r\n};\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet preset: EPreset;\r\nfunction tryParsePreset(p: string): void {\r\n    const previousValue = preset;\r\n    preset = p as EPreset;\r\n\r\n    if (preset !== previousValue) {\r\n        callObservers(observers.presetChange);\r\n    }\r\n}\r\nPage.Picker.addObserver(controlId.PRESET, tryParsePreset);\r\ntryParsePreset(Page.Picker.getValue(controlId.PRESET));\r\n\r\nlet mode: EMode;\r\nfunction parseAndApplyMode(newModes: string[]): void {\r\n    if (newModes.length !== 1) {\r\n        return;\r\n    }\r\n\r\n    const newMode = newModes[0] as EMode;\r\n    if (newMode !== mode) {\r\n        mode = newMode;\r\n\r\n        const isInstant = (mode === EMode.INSTANT);\r\n        Page.Controls.setVisibility(controlId.SMOOTH, !isInstant);\r\n        Page.Controls.setVisibility(controlId.DISPLAY_CIRCLES, isInstant);\r\n        Page.Controls.setVisibility(controlId.DISPLAY_SEGMENTS, isInstant);\r\n        Page.Controls.setVisibility(controlId.DISPLAY_CURVE, isInstant);\r\n        Page.Controls.setVisibility(controlId.ZOOM, isInstant);\r\n\r\n        callObservers(observers.clear);\r\n    }\r\n}\r\nparseAndApplyMode(Page.Tabs.getValues(controlId.MODE));\r\nPage.Tabs.addObserver(controlId.MODE, parseAndApplyMode);\r\n\r\nlet speed: number = Page.Range.getValue(controlId.SPEED);\r\nPage.Range.addObserver(controlId.SPEED, (s: number) => {\r\n    speed = s;\r\n    callObservers(observers.speedChange);\r\n});\r\n\r\nlet persistence: boolean = Page.Checkbox.isChecked(controlId.PERSISTENCE);\r\nPage.Checkbox.addObserver(controlId.PERSISTENCE, (checked: boolean) => {\r\n    persistence = checked;\r\n});\r\n\r\nlet smooth: boolean = Page.Checkbox.isChecked(controlId.SMOOTH);\r\nPage.Checkbox.addObserver(controlId.SMOOTH, (checked: boolean) => {\r\n    smooth = checked;\r\n});\r\n\r\nlet closeLoop: boolean = Page.Checkbox.isChecked(controlId.CLOSE_LOOP);\r\nPage.Checkbox.addObserver(controlId.CLOSE_LOOP, (checked: boolean) => {\r\n    closeLoop = checked;\r\n\r\n    if (mode === EMode.PROGRESSIVE) {\r\n        callObservers(observers.clear);\r\n    }\r\n});\r\n\r\nlet repeat: boolean = Page.Checkbox.isChecked(controlId.REPEAT);\r\nPage.Checkbox.addObserver(controlId.REPEAT, (checked: boolean) => {\r\n    repeat = checked;\r\n});\r\n\r\nPage.Button.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Page.Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nPage.Checkbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Page.Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nPage.Checkbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Page.Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nPage.Checkbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Page.Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nPage.Checkbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Page.Range.getValue(controlId.ORDER);\r\nPage.Range.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\nlet zoom: number = Page.Range.getValue(controlId.ZOOM);\r\nPage.Range.addObserver(controlId.ZOOM, (z: number) => {\r\n    zoom = z;\r\n    callObservers(observers.redraw);\r\n    callObservers(observers.speedChange);\r\n});\r\n\r\nfunction updateIndicatorVisibility(): void {\r\n    const visible = Page.Checkbox.isChecked(controlId.INDICATOR);\r\n    Page.Canvas.setIndicatorsVisibility(visible);\r\n}\r\nupdateIndicatorVisibility();\r\nPage.Checkbox.addObserver(controlId.INDICATOR, updateIndicatorVisibility);\r\n\r\nPage.FileControl.addDownloadObserver(controlId.DOWNLOAD, () => callObservers(observers.download));\r\n\r\n/* === INTERFACE ====================================================== */\r\n/**\r\n * Class giving access to all the parameters of the application. Also gives access to event handlers.\r\n */\r\nclass Parameters {\r\n    public static get preset(): EPreset {\r\n        return preset;\r\n    }\r\n    public static setCustomPreset(): void {\r\n        Page.Picker.setValue(controlId.PRESET, null);\r\n        preset = EPreset.CUSTOM;\r\n        callObservers(observers.presetChange);\r\n    }\r\n\r\n    public static get isProgressiveMode(): boolean {\r\n        return mode === EMode.PROGRESSIVE;\r\n    }\r\n\r\n    public static get speed(): number {\r\n        if (this.isProgressiveMode) {\r\n            return 0.1 * speed;\r\n        }\r\n        return speed;\r\n    }\r\n\r\n    public static get persistence(): boolean {\r\n        return persistence;\r\n    }\r\n\r\n    public static get smooth(): boolean {\r\n        return smooth;\r\n    }\r\n\r\n    public static get closeLoop(): boolean {\r\n        return closeLoop;\r\n    }\r\n\r\n    public static get repeat(): boolean {\r\n        return repeat;\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return mode === EMode.INSTANT && displayCircles;\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return mode === EMode.INSTANT && displaySegments;\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return mode === EMode.INSTANT && displayCurve;\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n\r\n    public static get zoom(): number {\r\n        return zoom;\r\n    }\r\n    public static resetZoom(): void {\r\n        zoom = 1;\r\n        Page.Range.setValue(controlId.ZOOM, zoom);\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): GenericObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n    public static get presetObservers(): GenericObserver[] {\r\n        return observers.presetChange;\r\n    }\r\n    public static get downloadObservers(): GenericObserver[] {\r\n        return observers.download;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","/**\r\n * Simple data class representing a 2D point.\r\n */\r\nclass Point {\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public static interpolate(p1: Point, p2: Point, t: number): Point {\r\n        return {\r\n            x: p1.x * (1 - t) + p2.x * t,\r\n            y: p1.y * (1 - t) + p2.y * t,\r\n        };\r\n    }\r\n\r\n    public static distance(p1: Point, p2: Point): number {\r\n        const dX = p1.x - p2.x;\r\n        const dY = p1.y - p2.y;\r\n        return Math.sqrt(dX * dX + dY * dY);\r\n    }\r\n\r\n    public static equals(p1: Point, p2: Point): boolean {\r\n        return p1.x === p2.x && p1.y === p2.y;\r\n    }\r\n\r\n    public static copy(point: Point): Point {\r\n        return {\r\n            x: point.x,\r\n            y: point.y,\r\n        };\r\n    }\r\n\r\n    public x: number;\r\n    public y: number;\r\n}\r\n\r\nexport {\r\n    Point,\r\n};\r\n","import * as Log from \"./log\";\r\nimport { Point } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\n\r\n/* Enum values must match the values of the controls */\r\nenum EPreset {\r\n    ARLEQUIN1 = \"arlequin1\",\r\n    ARLEQUIN2 = \"arlequin2\",\r\n    BULL = \"bull\",\r\n    CAMEL = \"camel\",\r\n    CUSTOM = \"<none>\", // not available via interface\r\n    DOG = \"dog\",\r\n    DOVE = \"dove\",\r\n    FLAMINGO = \"flamingo\",\r\n    HORSE = \"horse\",\r\n    MOUSE = \"mouse\",\r\n    PENGUIN = \"penguin\",\r\n    WOMAN1 = \"woman1\",\r\n    WOMAN2 = \"woman2\",\r\n}\r\n\r\nconst PRESET_SIZE = 512; // a preset should be dimensionned for a 512 x 512 canvas\r\n\r\nenum EState {\r\n    LOADING,\r\n    LOADED,\r\n}\r\n\r\ntype InternalCallback = () => unknown;\r\n\r\ninterface ICachedPreset {\r\n    state: EState;\r\n    points: Point[];\r\n    internalCallbacks: InternalCallback[];\r\n}\r\n\r\n/**\r\n * Class for retrieving on demand the preset drawings with AJAX requests.\r\n * Tries to minimize the request by using a memory cache.\r\n */\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, wantedSize: number[], callback: (array: Point[]) => unknown): void {\r\n        const interalCallback = () => {\r\n            const stopWatchResize = new StopWatch();\r\n            const copy = Presets.resizePreset(Presets.cache[preset].points, wantedSize[0], wantedSize[1]);\r\n            Log.message(`Resized preset '${preset}' in ${stopWatchResize.milliseconds} ms`);\r\n\r\n            callback(copy);\r\n        };\r\n\r\n        if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            if (Presets.cache[preset].state === EState.LOADED) {\r\n                interalCallback();\r\n            } else {\r\n                Presets.cache[preset].internalCallbacks.push(interalCallback);\r\n            }\r\n        } else {\r\n            Presets.cache[preset] = {\r\n                state: EState.LOADING,\r\n                points: [],\r\n                internalCallbacks: [interalCallback],\r\n            };\r\n\r\n            const stopWatchDownload = new StopWatch();\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.addEventListener(\"readystatechange\", () => {\r\n                if (xhr.readyState === XMLHttpRequest.DONE) {\r\n                    if (xhr.status === 200) {\r\n                        Log.message(`Downloaded preset '${preset}' in ${stopWatchDownload.milliseconds} ms`);\r\n\r\n                        const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                        if (retrievedArray !== null) {\r\n                            Presets.cache[preset].points = retrievedArray;\r\n                            Presets.cache[preset].state = EState.LOADED;\r\n                            for (const internalCallback of Presets.cache[preset].internalCallbacks) {\r\n                                internalCallback();\r\n                            }\r\n                        } else {\r\n                            Log.message(`Failed to parse download preset '${preset}'`);\r\n                        }\r\n                    } else {\r\n                        Log.message(`Failed to download preset '${preset}'`);\r\n                    }\r\n                }\r\n            });\r\n            xhr.open(\"GET\", `resources/${preset}.txt`);\r\n            xhr.send();\r\n        }\r\n    }\r\n\r\n    public static setCustomPreset(points: Point[], canvasSize: number[]): void {\r\n        // Scale path to a PRESET_SIZE*PRESET_SIZE canvas.\r\n        // Depending on canvas aspect ratio it may not fit but it doesn't matter\r\n        const center: Point = {\r\n            x: 0.5 * canvasSize[0],\r\n            y: 0.5 * canvasSize[1],\r\n        };\r\n\r\n        const scaling = PRESET_SIZE / Math.min(canvasSize[0], canvasSize[1]);\r\n\r\n        for (const point of points) {\r\n            point.x = 0.5 * PRESET_SIZE + (point.x - center.x) * scaling;\r\n            point.y = 0.5 * PRESET_SIZE + (point.y - center.y) * scaling;\r\n        }\r\n\r\n        Presets.cache[EPreset.CUSTOM] = {\r\n            state: EState.LOADED,\r\n            points,\r\n            internalCallbacks: [],\r\n        };\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: ICachedPreset;\r\n    } = {};\r\n\r\n    private static resizePreset(points: Point[], width: number, height: number): Point[] {\r\n        const scaling = Math.min(width, height) / PRESET_SIZE;\r\n        const offsetX = 0.5 * (width - PRESET_SIZE * scaling);\r\n        const offsetY = 0.5 * (height - PRESET_SIZE * scaling);\r\n\r\n        /* Create a deep copy to keep the cache clean */\r\n        const copy: Point[] = [];\r\n        for (const point of points) {\r\n            copy.push({\r\n                x: point.x * scaling + offsetX,\r\n                y: point.y * scaling + offsetY,\r\n            });\r\n        }\r\n\r\n        return copy;\r\n    }\r\n\r\n    private static tryParsePointsArray(text: string): Point[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const points: Point[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n","let enabled = true;\r\n\r\nfunction setEnabled(e: boolean): void {\r\n    enabled = e;\r\n}\r\n\r\nfunction message(m: string): void {\r\n    if (enabled) {\r\n        console.log(m);\r\n    }\r\n}\r\n\r\nexport {\r\n    setEnabled,\r\n    message,\r\n};\r\n","/**\r\n * Class for measuring execution performance.\r\n */\r\nclass StopWatch {\r\n    private readonly start: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.start = performance.now();\r\n    }\r\n\r\n    public get milliseconds(): number {\r\n        return Math.ceil(performance.now() - this.start);\r\n    }\r\n}\r\n\r\nexport {\r\n    StopWatch,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Clock } from \"./clock\";\r\nimport { FourierSeries } from \"./fourier-series\";\r\nimport { LineDrawing } from \"./line-drawing\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point } from \"./point\";\r\nimport { Presets } from \"./presets\";\r\nimport { TimeUnit } from \"./units\";\r\nimport * as UserInput from \"./user-input\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nfunction setOrderIndicator(value: number): void {\r\n    value = Math.round(100 * value) / 100; // 2 digits max\r\n    Page.Canvas.setIndicatorText(\"fourier-order\", value.toLocaleString());\r\n}\r\n\r\nfunction main(): void {\r\n    const canvas2D = new Canvas2D();\r\n    canvas2D.lineWidth = 1;\r\n\r\n    Parameters.downloadObservers.push(() => canvas2D.download(\"picasso-fourier.png\"));\r\n\r\n    let drawing: LineDrawing = null;\r\n    let fourier: FourierSeries = null;\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n    UserInput.finishedAcquisitionCallbacks.push((isValid: boolean) => {\r\n        if (isValid) {\r\n            drawing = null;\r\n            fourier = null;\r\n            Page.Canvas.showLoader(true);\r\n\r\n            Presets.setCustomPreset(UserInput.recordedPath, Page.Canvas.getSize());\r\n            Parameters.setCustomPreset();\r\n        }\r\n        needToRedraw = true;\r\n    });\r\n\r\n    let needToRedraw = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    function loadPoints(points: Point[]): void {\r\n        drawing = new LineDrawing(points);\r\n        fourier = drawing.computeFourierSeries(300 + 1); // one more to avoid out of bounds exceptions\r\n        needToRestart = true;\r\n        clock.reset();\r\n        Page.Canvas.showLoader(false);\r\n    }\r\n\r\n    function loadPreset(): void {\r\n        drawing = null;\r\n        fourier = null;\r\n\r\n        const canvasSize: number[] = Page.Canvas.getSize();\r\n        Page.Canvas.showLoader(true);\r\n        Presets.getPreset(Parameters.preset, canvasSize, loadPoints);\r\n    }\r\n\r\n    Parameters.presetObservers.push(loadPreset);\r\n    Page.Canvas.Observers.canvasResize.push(loadPreset);\r\n\r\n    const loopDuration = 2000; // milliseconds, at normal speed\r\n    function mainLoop(): void {\r\n        if (UserInput.isRecording()) {\r\n            canvas2D.clear();\r\n            canvas2D.setFullViewport();\r\n            Parameters.resetZoom();\r\n            canvas2D.strokeStyle = \"white\";\r\n            UserInput.drawCurrentPath(canvas2D);\r\n        } else if (drawing !== null && fourier !== null) { // checks that preset is loaded\r\n            let t: TimeUnit = clock.current / loopDuration;\r\n            const maxT: TimeUnit = Parameters.closeLoop ? 1 : drawing.originalPathDuration;\r\n            let finishedLoop = (t >= maxT);\r\n\r\n            if (!finishedLoop && clock.isPaused) {\r\n                clock.resume();\r\n            }\r\n\r\n            t = Math.min(t, maxT);\r\n\r\n            if (finishedLoop) {\r\n                if (Parameters.repeat) {\r\n                    needToRestart = true;\r\n                } else {\r\n                    clock.pause();\r\n                }\r\n            }\r\n\r\n            if (needToRestart) {\r\n                if (Parameters.isProgressiveMode) {\r\n                    Parameters.resetZoom();\r\n                }\r\n\r\n                needToRestart = false;\r\n                clock.reset();\r\n                fourier.resetCurve();\r\n                t = 0;\r\n                finishedLoop = false;\r\n                setOrderIndicator(Parameters.order);\r\n                canvas2D.clear();\r\n            }\r\n\r\n            if (needToRedraw) {\r\n                canvas2D.adjustSize();\r\n\r\n                if (Parameters.isProgressiveMode || Parameters.zoom === 1) {\r\n                    canvas2D.setFullViewport();\r\n                } else {\r\n                    canvas2D.zoom = Parameters.zoom;\r\n                    canvas2D.center = fourier.computePoint(Parameters.order, t);\r\n                }\r\n\r\n                if (!Parameters.persistence) {\r\n                    canvas2D.clear();\r\n                }\r\n\r\n                if (Parameters.displayOriginalCurve) {\r\n                    canvas2D.strokeStyle = \"rgb(0,128,0)\";\r\n                    canvas2D.lineWidth = 3;\r\n                    drawing.draw(canvas2D, Parameters.isProgressiveMode ? maxT : t);\r\n                    canvas2D.lineWidth = 1;\r\n                }\r\n\r\n                if (Parameters.displayCircles) {\r\n                    canvas2D.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"rgba(255,255,255,0.3)\";\r\n                    fourier.drawCirclesToPoint(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displayCurve) {\r\n                    canvas2D.strokeStyle = \"white\";\r\n                    fourier.drawCurve(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displaySegments) {\r\n                    canvas2D.strokeStyle = Parameters.persistence ? \"rgba(255,0,0,0.01)\" : \"red\";\r\n                    fourier.drawSegmentsToPoint(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.isProgressiveMode) {\r\n                    let order = Parameters.order * t / maxT;\r\n\r\n                    if (!Parameters.persistence) {\r\n                        canvas2D.strokeStyle = \"white\";\r\n                    } else if (Parameters.smooth) {\r\n                        canvas2D.strokeStyle = \"rgba(255,255,255,0.01)\";\r\n                    } else {\r\n                        canvas2D.strokeStyle = \"rgba(255,255,255,0.03)\";\r\n                    }\r\n\r\n                    if (!Parameters.smooth) {\r\n                        order = Math.floor(order);\r\n                        fourier.drawCurve(canvas2D, order, maxT);\r\n                    } else {\r\n                        fourier.drawCurvePartialOrder(canvas2D, order, maxT);\r\n                    }\r\n\r\n                    setOrderIndicator(order);\r\n                }\r\n            }\r\n\r\n            needToRedraw = !finishedLoop && Parameters.speed > 0;\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    loadPreset();\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","import { Point } from \"./point\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Class for instancing and using a 2D HTML Canvas.\r\n */\r\nclass Canvas2D {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n    private readonly cssPixel: number;\r\n\r\n    private wantedLineWidth: number = 1;\r\n    private isDrawingLine: boolean = false;\r\n    private nbPointsInLine: number = 0;\r\n\r\n    private viewportZoom: number;\r\n    private viewportCenter: Point; // point that should be at the center of the viewport\r\n\r\n    private scale: number;\r\n    private translateX: number;\r\n    private translateY: number;\r\n\r\n    public constructor() {\r\n        this.canvas = Page.Canvas.getCanvas();\r\n        this.context = this.canvas.getContext(\"2d\");\r\n        this.cssPixel = window.devicePixelRatio ?? 1;\r\n\r\n        this.viewportZoom = 1;\r\n        this.viewportCenter = { x: 0, y: 0 };\r\n        this.precomputeTransformation();\r\n    }\r\n\r\n    public set center(p: Point) {\r\n        this.viewportCenter.x = p.x;\r\n        this.viewportCenter.y = p.y;\r\n        this.precomputeTransformation();\r\n    }\r\n\r\n    public set zoom(z: number) {\r\n        this.viewportZoom = z;\r\n        this.precomputeTransformation();\r\n    }\r\n\r\n    public setFullViewport(): void {\r\n        this.viewportZoom = 1;\r\n        this.viewportCenter.x = 0.5 * this.canvas.width / this.cssPixel;\r\n        this.viewportCenter.y = 0.5 * this.canvas.height / this.cssPixel;\r\n        this.precomputeTransformation();\r\n    }\r\n\r\n    public set lineWidth(width: number) {\r\n        this.wantedLineWidth = this.cssPixel * width;\r\n        this.context.lineWidth = this.wantedLineWidth;\r\n    }\r\n\r\n    public set strokeStyle(style: string) {\r\n        this.context.strokeStyle = style;\r\n    }\r\n\r\n    public adjustSize(): void {\r\n        const actualWidth = this.cssPixel * this.canvas.clientWidth;\r\n        const actualHeight = this.cssPixel * this.canvas.clientHeight;\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n            this.setFullViewport();\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    public drawCircle(center: Point, radius: number): void {\r\n        const visibleRadius = this.viewportZoom * radius;\r\n        const x = this.scale * center.x + this.translateX;\r\n        const y = this.scale * center.y + this.translateY;\r\n\r\n        if (visibleRadius > 0.5) {\r\n            this.context.beginPath();\r\n            this.context.arc(x, y, visibleRadius, 0, TWO_PI);\r\n            this.context.closePath();\r\n            this.context.stroke();\r\n        }\r\n    }\r\n\r\n    public startLine(): void {\r\n        if (this.isDrawingLine) {\r\n            this.endLine();\r\n        }\r\n\r\n        this.context.lineWidth = this.wantedLineWidth;\r\n        this.context.beginPath();\r\n        this.isDrawingLine = true;\r\n        this.nbPointsInLine = 0;\r\n    }\r\n\r\n    public addPointToLine(point: Point): void {\r\n        const x = this.scale * point.x + this.translateX;\r\n        const y = this.scale * point.y + this.translateY;\r\n\r\n        if (this.nbPointsInLine === 0) {\r\n            this.context.moveTo(x, y);\r\n        } else {\r\n            this.context.lineTo(x, y);\r\n        }\r\n\r\n        this.nbPointsInLine++;\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.isDrawingLine) {\r\n            this.context.stroke();\r\n            this.context.closePath();\r\n            this.isDrawingLine = false;\r\n        }\r\n    }\r\n\r\n    public download(filename: string): void {\r\n        if ((this.canvas as any).msToBlob) { // for IE\r\n            const blob = (this.canvas as any).msToBlob();\r\n            window.navigator.msSaveBlob(blob, filename);\r\n        } else {\r\n            this.canvas.toBlob((blob: Blob | null) => {\r\n                if (blob !== null) {\r\n                    const link = document.createElement(\"a\");\r\n                    link.download = filename;\r\n                    link.href = URL.createObjectURL(blob);\r\n                    link.click();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private precomputeTransformation(): void {\r\n        this.scale = this.cssPixel * this.viewportZoom;\r\n        this.translateX = this.cssPixel * (-this.viewportZoom * this.viewportCenter.x) + 0.5 * this.canvas.width;\r\n        this.translateY = this.cssPixel * (-this.viewportZoom * this.viewportCenter.y) + 0.5 * this.canvas.height;\r\n    }\r\n}\r\n\r\nexport {\r\n    Canvas2D,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\n\r\ninterface IClockCheckpoint {\r\n    clockTime: DOMHighResTimeStamp; // in the clock temporality\r\n    realTime: DOMHighResTimeStamp; // in the Javascript temporality\r\n}\r\n\r\n/**\r\n * This class handles the measuring of time at a variable speed.\r\n */\r\nclass Clock {\r\n    private speed: number;\r\n    private paused: boolean;\r\n\r\n    /* This checkpoint system is used to avoid floating point approximations when computing current time. */\r\n    private lastCheckpoint: IClockCheckpoint;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        this.paused = false;\r\n        this.lastCheckpoint = {\r\n            clockTime: 0,\r\n            realTime: 0,\r\n        };\r\n\r\n        Parameters.speedChangeObservers.push(() => this.updateSpeed());\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.paused = false;\r\n        this.lastCheckpoint.clockTime = 0;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n        this.updateSpeed();\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.createCheckpoint();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = true;\r\n        }\r\n    }\r\n\r\n    public resume(): void {\r\n        if (this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = false;\r\n        }\r\n    }\r\n\r\n    public get isPaused(): boolean {\r\n        return this.paused;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        if (this.paused) {\r\n            return this.lastCheckpoint.clockTime;\r\n        }\r\n\r\n        return this.lastCheckpoint.clockTime + this.speed * (performance.now() - this.lastCheckpoint.realTime);\r\n    }\r\n\r\n    private createCheckpoint(): void {\r\n        this.lastCheckpoint.clockTime = this.current;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n    }\r\n\r\n    private updateSpeed(): void {\r\n        this.setSpeed(Parameters.speed / Parameters.zoom);\r\n    }\r\n}\r\n\r\nexport {\r\n    Clock,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport * as Log from \"./log\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\n/**\r\n * Represents a 2D line parametrized by a 1D input.\r\n * The line is 1-periodic: [0,1] -> RxR.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass LineDrawing {\r\n    public readonly pathLength: SpaceUnit; // Length of the total path in space-units\r\n    public readonly originalPathDuration: TimeUnit; // Length of the original path in time-units\r\n    private readonly points: Point[];\r\n\r\n    /**\r\n     * Builds a LineDrawing from the input points.\r\n     * If the input is not periodic, then we extend it with a last point to make the LineDrawing periodic.\r\n     */\r\n    public constructor(points: Point[]) {\r\n        this.points = points;\r\n\r\n        let originalPathLength: SpaceUnit = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            originalPathLength += Point.distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        let totalPathLength: SpaceUnit = originalPathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (!Point.equals(firstPoint, lastPoint)) {\r\n            totalPathLength += Point.distance(lastPoint, firstPoint);\r\n            this.points.push(Point.copy(firstPoint));\r\n        }\r\n\r\n        this.pathLength = totalPathLength;\r\n        this.originalPathDuration = originalPathLength / totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Draws the line portion between 0 and t.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public draw(canvas: Canvas2D, t: TimeUnit): void {\r\n        const desiredLength: SpaceUnit = t * this.pathLength;\r\n        let currentLength: SpaceUnit = 0;\r\n\r\n        canvas.startLine();\r\n        canvas.addPointToLine(this.points[0]);\r\n\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = Point.distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                canvas.addPointToLine(nextPoint);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = Point.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                canvas.addPointToLine(finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const stopwatch = new StopWatch();\r\n\r\n        const nbSteps = Math.max(200, Math.ceil(Parameters.integrationPrecision * this.pathLength));\r\n        const stepSize = this.pathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = Point.distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = Point.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        Log.message(`Computed ${order} Fourier coefficient with ${nbSteps} integration steps ` +\r\n            `in ${stopwatch.milliseconds} ms.`);\r\n        return new FourierSeries(coefficients, this.pathLength);\r\n    }\r\n}\r\n\r\nexport {\r\n    LineDrawing,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point} from \"./point\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Modifies the point given as argument by applying to it the provided Fourier Coefficient at the provided location.\r\n */\r\nfunction applyCoefficient(point: Point, coefficient: IFourierCoefficient, t: TimeUnit): void {\r\n    const currentPhase = TWO_PI * t * coefficient.n + coefficient.phase;\r\n    point.x += coefficient.magnitude * Math.cos(currentPhase);\r\n    point.y += coefficient.magnitude * Math.sin(currentPhase);\r\n}\r\n\r\n/**\r\n * Modifies the point given as argument by applying to it the provided Fourier Coefficients at the provided location.\r\n */\r\nfunction applyCoefficientsArray(point: Point, coefficients: IFourierCoefficient[], t: TimeUnit): void {\r\n    for (const coefficient of coefficients) {\r\n        applyCoefficient(point, coefficient, t);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the Fourier development of a 1-periodic [0,1] -> RxR signal.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass FourierSeries {\r\n    private readonly coefficients: IFourierCoefficient[];\r\n    private readonly curveStepSize: SpaceUnit;\r\n\r\n    private partialCurve: Point[] = [];\r\n    private partialCurveOrder: number = -1;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], totalLength: SpaceUnit) {\r\n        if (coefficients.length % 2 !== 0) { // coefficients must go in pairs of 2: 0, 1, -1, 2, -2, ...\r\n            coefficients.length--;\r\n        }\r\n        if (coefficients.length === 0) {\r\n            throw new Error(\"Fourier series must have at least one coefficient.\");\r\n        }\r\n\r\n        // Sort the coefs in that order: 0, 1, -1, 2, -2, 3, -3, ...\r\n        coefficients.sort((a: IFourierCoefficient, b: IFourierCoefficient) => {\r\n            const absA = Math.abs(a.n);\r\n            const absB = Math.abs(b.n);\r\n            if (absA !== absB) {\r\n                return absA - absB;\r\n            }\r\n            return b.n - a.n;\r\n        });\r\n        this.coefficients = coefficients;\r\n\r\n        this.curveStepSize = 1 / (Parameters.curvePrecision * totalLength);\r\n    }\r\n\r\n    /**\r\n     * Purges the internal cache of the class. Should not be called too often.\r\n     */\r\n    public resetCurve(): void {\r\n        this.partialCurve = [];\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, t] curve portion at the specified integer Fourier order.\r\n     * @param order Expected to be an integer\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCurve(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const lastPointIndex = this.computePartialCurve(order, t);\r\n\r\n        // Draw partial curve\r\n        canvas.startLine();\r\n        for (let i = 0; i < lastPointIndex; i++) {\r\n            canvas.addPointToLine(this.partialCurve[i]);\r\n        }\r\n\r\n        const f = lastPointIndex % 1;\r\n        const lastPoint = this.partialCurve[Math.floor(lastPointIndex)];\r\n        const nextPoint = this.partialCurve[Math.floor(lastPointIndex) + 1];\r\n\r\n        const interpolatedPoint = Point.interpolate(lastPoint, nextPoint, f);\r\n        canvas.addPointToLine(interpolatedPoint);\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, approx. t] curve portion at the specified Fourier order.\r\n     * The order is linearily interpolated between the nearest coefficients.\r\n     * The curve's end (t parameter) is rounded to nearest.\r\n     * @param order If not an integer, then an intterpolation is performed to make sense of decimal Fourier order.\r\n     * @param t Expected to be in [0, 1]. Is not garanteed to be respected, approximations will be performed.\r\n     */\r\n    public drawCurvePartialOrder(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        this.computePartialCurve(order, t);\r\n\r\n        let additionalCoefficients = this.getCoefficients(Math.floor(order) + 1, Math.floor(order) + 1);\r\n        let f = order % 1;\r\n        if (f < 0.5) {\r\n            additionalCoefficients = [additionalCoefficients[0]];\r\n            f *= 2;\r\n        } else {\r\n            f = 2 * f - 1;\r\n        }\r\n\r\n        canvas.startLine();\r\n\r\n        const nbSteps = t / this.curveStepSize;\r\n        for (let i = 0; i < nbSteps; i++) {\r\n            const localT = i * this.curveStepSize;\r\n\r\n            const nextPoint = Point.copy(this.partialCurve[i]);\r\n            applyCoefficient(nextPoint, additionalCoefficients[0], localT);\r\n\r\n            let lastPoint: Point;\r\n            if (additionalCoefficients.length === 1) {\r\n                lastPoint = this.partialCurve[i];\r\n            } else { // additionalCoefficients.length === 2\r\n                lastPoint = Point.copy(nextPoint);\r\n                applyCoefficient(nextPoint, additionalCoefficients[1], localT);\r\n            }\r\n\r\n            const interpolatedPoint = Point.interpolate(lastPoint, nextPoint, f);\r\n            canvas.addPointToLine(interpolatedPoint);\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws a path to the wanted point, in the form of segments representing the action of each coefficient.\r\n     * @param order Maximum Fourier order to use. Must be an integer.\r\n     *              Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawSegmentsToPoint(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const point: Point = { x: 0, y: 0 };\r\n\r\n        canvas.startLine();\r\n\r\n        const coefficients = this.getCoefficients(0, order);\r\n        for (const coefficient of coefficients) {\r\n            applyCoefficient(point, coefficient, t);\r\n            canvas.addPointToLine(point);\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws a path to the wanted point, in the form of circles representing the magnitude of each coefficient.\r\n     * @param order Maximum Fourier order to use. Must be an integer.\r\n     *              Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCirclesToPoint(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const coefficients = this.getCoefficients(0, order);\r\n        if (coefficients.length < 2) {\r\n            return;\r\n        }\r\n\r\n        const point: Point = { x: 0, y: 0 };\r\n\r\n        for (const coefficient of coefficients) {\r\n            if (coefficient.n !== 0 && coefficient.n !== 1) {\r\n                canvas.drawCircle(point, coefficient.magnitude);\r\n            }\r\n            applyCoefficient(point, coefficient, t);\r\n        }\r\n    }\r\n\r\n    public computePoint(order: number, t: TimeUnit): Point {\r\n        const point: Point = { x: 0, y: 0 };\r\n        const coefficients = this.getCoefficients(0, order);\r\n        applyCoefficientsArray(point, coefficients, t);\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Computes the partial curve between 0 and t in the given order.\r\n     * The partial curve serves as cache and is as reused as possible.\r\n     * Returns the index of the 't' point in the partial curve.\r\n     * If this index is not an integer, it means an interpolation should be performed.\r\n     */\r\n    private computePartialCurve(order: number, t: TimeUnit): number {\r\n        order = Math.floor(order);\r\n\r\n        if (order < this.partialCurveOrder) {\r\n            // Existing points are computed with too high order. Restart from scratch.\r\n            this.resetCurve();\r\n        } else if (order > this.partialCurveOrder) {\r\n            // Existing points are computed with too low order. Complete existing points with missing orders.\r\n            const missingCoefficients = this.getCoefficients(this.partialCurveOrder + 1, order);\r\n\r\n            for (let i = 0; i < this.partialCurve.length; i++) {\r\n                const localT = i * this.curveStepSize;\r\n                applyCoefficientsArray(this.partialCurve[i], missingCoefficients, localT);\r\n            }\r\n        }\r\n\r\n        // Compute new points if needed\r\n        const currentPointIndex = t / this.curveStepSize;\r\n        const nextPointIndex = Math.ceil(currentPointIndex);\r\n\r\n        const neededCoefficients = this.getCoefficients(0, order);\r\n        for (let i = this.partialCurve.length; i <= nextPointIndex + 1; i++) {\r\n            const point: Point = { x: 0, y: 0 };\r\n            applyCoefficientsArray(point, neededCoefficients, i * this.curveStepSize);\r\n            this.partialCurve.push(point);\r\n        }\r\n\r\n        this.partialCurveOrder = order;\r\n        return currentPointIndex;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of coefficients containing, in that order:\r\n     * if orderFrom > 0: orderFrom, -orderFrom, orderFrom+1, -(orderFrom+1), ..., orderTo, -orderTo\r\n     * if orderFrom == 0: 0, 1, -1, ... orderTo, -orderTo\r\n     * If orderFrom > orderTo, or if one of the parameters is out of range, only returns the valid coefficients.\r\n     */\r\n    private getCoefficients(orderFrom: number, orderTo: number): IFourierCoefficient[] {\r\n        orderFrom = Math.min(orderFrom, orderTo);\r\n\r\n        const firstIndex = Math.max(0, 2 * orderFrom - 1);\r\n        const lastIndex = Math.min(this.coefficients.length, 2 * orderTo + 1);\r\n\r\n        return this.coefficients.slice(firstIndex, lastIndex);\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Point } from \"./point\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\ntype Callback = (isValid: boolean) => unknown;\r\n\r\nlet currentPoints: Point[] = [];\r\nlet isRecordingUserInput = false;\r\nconst finishedAcquisitionCallbacks: Callback[] = [];\r\n\r\nfunction getMousePosition(): Point {\r\n    const canvasSize: number[] = Page.Canvas.getSize();\r\n    const mousePosition: number[] = Page.Canvas.getMousePosition();\r\n    return {\r\n        x: canvasSize[0] * mousePosition[0],\r\n        y: canvasSize[1] * mousePosition[1],\r\n    };\r\n}\r\n\r\nPage.Canvas.Observers.mouseDown.push(() => {\r\n    isRecordingUserInput = true;\r\n    const currentPosition = getMousePosition();\r\n    currentPoints = [currentPosition];\r\n});\r\n\r\nPage.Canvas.Observers.mouseUp.push(() => {\r\n    if (isRecordingUserInput) {\r\n        isRecordingUserInput = false;\r\n\r\n        for (const callback of finishedAcquisitionCallbacks) {\r\n            callback(currentPoints.length >= 2);\r\n        }\r\n    }\r\n});\r\n\r\nPage.Canvas.Observers.mouseMove.push(() => {\r\n    if (isRecordingUserInput) {\r\n        const currentPosition = getMousePosition();\r\n        const isPointFarEnough = Point.distance(currentPoints[currentPoints.length - 1], currentPosition) > 2;\r\n        if (isPointFarEnough) {\r\n            currentPoints.push(currentPosition);\r\n        }\r\n    }\r\n});\r\n\r\nfunction isRecording(): boolean {\r\n    return isRecordingUserInput;\r\n}\r\n\r\nfunction drawCurrentPath(canvas: Canvas2D): void {\r\n    canvas.startLine();\r\n\r\n    for (const point of currentPoints) {\r\n        canvas.addPointToLine(point);\r\n    }\r\n\r\n    canvas.endLine();\r\n}\r\n\r\nexport {\r\n    drawCurrentPath,\r\n    finishedAcquisitionCallbacks,\r\n    isRecording,\r\n    currentPoints as recordedPath,\r\n};\r\n"],"sourceRoot":""}