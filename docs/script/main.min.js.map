{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/point.ts","webpack:///./src/ts/presets.ts","webpack:///./src/ts/log.ts","webpack:///./src/ts/stopwatch.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/canvas-2d.ts","webpack:///./src/ts/clock.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/user-input.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EMode","controlId","PRESET","MODE","SPEED","PERSISTENCE","SMOOTH","CLOSE_LOOP","REPEAT","RESET","DISPLAY_CIRCLES","DISPLAY_SEGMENTS","DISPLAY_CURVE","DISPLAY_ORIGINAL_CURVE","ORDER","ZOOM","INDICATOR","DOWNLOAD","callObservers","observersList","observer","preset","observers","clear","redraw","speedChange","presetChange","download","tryParsePreset","previousValue","parseAndApplyMode","newModes","length","newMode","isInstant","INSTANT","Controls","setVisibility","Picker","addObserver","getValue","Tabs","getValues","speed","Range","persistence","Checkbox","isChecked","checked","smooth","closeLoop","PROGRESSIVE","repeat","Button","displayCircles","displaySegments","displayCurve","displayOriginalCurve","order","zoom","updateIndicatorVisibility","visible","Canvas","setIndicatorsVisibility","z","setCustomPreset","setValue","EPreset","CUSTOM","this","isProgressiveMode","Parameters","interpolate","p1","p2","x","y","distance","dX","dY","Math","sqrt","equals","copy","point","Point","PRESET_SIZE","getPreset","wantedSize","callback","stopwatch","StopWatch","fromCache","safelyCallCallback","points","scaling","min","offsetX","offsetY","push","Log","message","milliseconds","Presets","cache","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","canvasSize","center","text","split","partial","enabled","setEnabled","e","console","log","start","performance","now","ceil","setOrderIndicator","round","setIndicatorText","toLocaleString","canvas2D","Canvas2D","context","lineWidth","downloadObservers","drawing","fourier","clock","Clock","needToRestart","clearObservers","UserInput","finishedAcquisitionCallbacks","isValid","showLoader","recordedPath","getSize","needToRedraw","redrawObservers","loopDuration","loadPoints","LineDrawing","computeFourierSeries","reset","loadPreset","presetObservers","Observers","canvasResize","requestAnimationFrame","mainLoop","isRecording","strokeStyle","drawCurrentPath","current","maxT","originalPathDuration","finishedLoop","isPaused","resume","pause","resetCurve","adjustSize","setFullViewport","computePoint","previousWidth","draw","drawCirclesToPoint","drawCurve","drawSegmentsToPoint","drawCurvePartialOrder","floor","main","TWO_PI","PI","canvasElementId","isDrawingLine","nbPointsInLine","canvas","document","getElementById","getContext","viewportZoom","viewportCenter","viewportHalfWidth","width","viewportHalfHeight","height","clientWidth","clientHeight","clearRect","drawCircle","radius","visibleRadius","beginPath","arc","closePath","stroke","startLine","endLine","addPointToLine","moveTo","lineTo","filename","msToBlob","blob","window","navigator","msSaveBlob","toBlob","link","createElement","href","URL","createObjectURL","click","paused","lastCheckpoint","clockTime","realTime","speedChangeObservers","updateSpeed","setSpeed","createCheckpoint","originalPathLength","totalPathLength","firstPoint","lastPoint","pathLength","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","nbSteps","max","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","coefficients","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","phase","atan2","FourierSeries","applyCoefficient","coefficient","currentPhase","applyCoefficientsArray","totalLength","partialCurve","partialCurveOrder","Error","sort","a","b","absA","abs","absB","curveStepSize","curvePrecision","computePartialCurve","f","interpolatedPoint","additionalCoefficients","getCoefficients","localT","missingCoefficients","currentPointIndex","nextPointIndex","neededCoefficients","orderFrom","orderTo","firstIndex","lastIndex","slice","currentPoints","isRecordingUserInput","getMousePosition","mousePosition","mouseDown","currentPosition","mouseUp","mouseMove"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import { EPreset } from \"./presets\";\r\n\r\ndeclare const Button: any;\r\ndeclare const Canvas: any;\r\ndeclare const Checkbox: any;\r\ndeclare const Controls: any;\r\n// declare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\ndeclare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRESET: \"preset-picker-id\",\r\n    MODE: \"mode-picker-id\",\r\n    SPEED: \"speed-range-id\",\r\n    PERSISTENCE: \"persistence-checkbox-id\",\r\n    SMOOTH: \"smooth-checkbox-id\",\r\n    CLOSE_LOOP: \"close-loop-checkbox-id\",\r\n    REPEAT: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n    ZOOM: \"zoom-range-id\",\r\n    INDICATOR: \"indicator-checkbox-id\",\r\n    DOWNLOAD: \"download-button-id\",\r\n};\r\n\r\nenum EMode {\r\n    INSTANT = \"0\",\r\n    PROGRESSIVE = \"1\",\r\n}\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\n\r\nfunction callObservers(observersList: GenericObserver[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: GenericObserver[];\r\n    presetChange: GenericObserver[];\r\n    download: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n    presetChange: [],\r\n    download: [],\r\n};\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet preset: EPreset;\r\nfunction tryParsePreset(p: string): void {\r\n    const previousValue = preset;\r\n    preset = p as EPreset;\r\n\r\n    if (preset !== previousValue) {\r\n        callObservers(observers.presetChange);\r\n    }\r\n}\r\nPicker.addObserver(controlId.PRESET, tryParsePreset);\r\ntryParsePreset(Picker.getValue(controlId.PRESET));\r\n\r\nlet mode: EMode;\r\nfunction parseAndApplyMode(newModes: string[]): void {\r\n    if (newModes.length !== 1) {\r\n        return;\r\n    }\r\n\r\n    const newMode = newModes[0] as EMode;\r\n    if (newMode !== mode) {\r\n        mode = newMode;\r\n\r\n        const isInstant = (mode === EMode.INSTANT);\r\n        Controls.setVisibility(controlId.SMOOTH, !isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_CIRCLES, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_SEGMENTS, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_CURVE, isInstant);\r\n        Controls.setVisibility(controlId.ZOOM, isInstant);\r\n\r\n        callObservers(observers.clear);\r\n    }\r\n}\r\nparseAndApplyMode(Tabs.getValues(controlId.MODE));\r\nTabs.addObserver(controlId.MODE, parseAndApplyMode);\r\n\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    speed = s;\r\n    callObservers(observers.speedChange);\r\n});\r\n\r\nlet persistence: boolean = Checkbox.isChecked(controlId.PERSISTENCE);\r\nCheckbox.addObserver(controlId.PERSISTENCE, (checked: boolean) => {\r\n    persistence = checked;\r\n});\r\n\r\nlet smooth: boolean = Checkbox.isChecked(controlId.SMOOTH);\r\nCheckbox.addObserver(controlId.SMOOTH, (checked: boolean) => {\r\n    smooth = checked;\r\n});\r\n\r\nlet closeLoop: boolean = Checkbox.isChecked(controlId.CLOSE_LOOP);\r\nCheckbox.addObserver(controlId.CLOSE_LOOP, (checked: boolean) => {\r\n    closeLoop = checked;\r\n\r\n    if (mode === EMode.PROGRESSIVE) {\r\n        callObservers(observers.clear);\r\n    }\r\n});\r\n\r\nlet repeat: boolean = Checkbox.isChecked(controlId.REPEAT);\r\nCheckbox.addObserver(controlId.REPEAT, (checked: boolean) => {\r\n    repeat = checked;\r\n});\r\n\r\nButton.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\nlet zoom: number = Range.getValue(controlId.ZOOM);\r\nRange.addObserver(controlId.ZOOM, (z: number) => {\r\n    zoom = z;\r\n    callObservers(observers.redraw);\r\n    callObservers(observers.speedChange);\r\n});\r\n\r\nfunction updateIndicatorVisibility(): void {\r\n    const visible = Checkbox.isChecked(controlId.INDICATOR);\r\n    Canvas.setIndicatorsVisibility(visible);\r\n}\r\nupdateIndicatorVisibility();\r\nCheckbox.addObserver(controlId.INDICATOR, updateIndicatorVisibility);\r\n\r\nButton.addObserver(controlId.DOWNLOAD, () => callObservers(observers.download));\r\n\r\n/* === INTERFACE ====================================================== */\r\n/**\r\n * Class giving access to all the parameters of the application. Also gives access to event handlers.\r\n */\r\nclass Parameters {\r\n    public static get preset(): EPreset {\r\n        return preset;\r\n    }\r\n    public static setCustomPreset(): void {\r\n        Picker.setValue(controlId.PRESET, null);\r\n        preset = EPreset.CUSTOM;\r\n        callObservers(observers.presetChange);\r\n    }\r\n\r\n    public static get isProgressiveMode(): boolean {\r\n        return mode === EMode.PROGRESSIVE;\r\n    }\r\n\r\n    public static get speed(): number {\r\n        if (this.isProgressiveMode) {\r\n            return 0.1 * speed;\r\n        }\r\n        return speed;\r\n    }\r\n\r\n    public static get persistence(): boolean {\r\n        return persistence;\r\n    }\r\n\r\n    public static get smooth(): boolean {\r\n        return smooth;\r\n    }\r\n\r\n    public static get closeLoop(): boolean {\r\n        return closeLoop;\r\n    }\r\n\r\n    public static get repeat(): boolean {\r\n        return repeat;\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return mode === EMode.INSTANT && displayCircles;\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return mode === EMode.INSTANT && displaySegments;\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return mode === EMode.INSTANT && displayCurve;\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n\r\n    public static get zoom(): number {\r\n        return zoom;\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): GenericObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n    public static get presetObservers(): GenericObserver[] {\r\n        return observers.presetChange;\r\n    }\r\n    public static get downloadObservers(): GenericObserver[] {\r\n        return observers.download;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","/**\r\n * Simple data class representing a 2D point.\r\n */\r\nclass Point {\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public static interpolate(p1: Point, p2: Point, t: number): Point {\r\n        return {\r\n            x: p1.x * (1 - t) + p2.x * t,\r\n            y: p1.y * (1 - t) + p2.y * t,\r\n        };\r\n    }\r\n\r\n    public static distance(p1: Point, p2: Point): number {\r\n        const dX = p1.x - p2.x;\r\n        const dY = p1.y - p2.y;\r\n        return Math.sqrt(dX * dX + dY * dY);\r\n    }\r\n\r\n    public static equals(p1: Point, p2: Point): boolean {\r\n        return p1.x === p2.x && p1.y === p2.y;\r\n    }\r\n\r\n    public static copy(point: Point): Point {\r\n        return {\r\n            x: point.x,\r\n            y: point.y,\r\n        };\r\n    }\r\n\r\n    public x: number;\r\n    public y: number;\r\n}\r\n\r\nexport {\r\n    Point,\r\n};\r\n","import * as Log from \"./log\";\r\nimport { Point } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\n\r\n/* Enum values must match the values of the controls */\r\nenum EPreset {\r\n    ARLEQUIN1 = \"arlequin1\",\r\n    ARLEQUIN2 = \"arlequin2\",\r\n    BULL = \"bull\",\r\n    CAMEL = \"camel\",\r\n    CUSTOM = \"<none>\", // not available via interface\r\n    DOG = \"dog\",\r\n    DOVE = \"dove\",\r\n    FLAMINGO = \"flamingo\",\r\n    HORSE = \"horse\",\r\n    MOUSE = \"mouse\",\r\n    PENGUIN = \"penguin\",\r\n    WOMAN1 = \"woman1\",\r\n    WOMAN2 = \"woman2\",\r\n}\r\n\r\nconst PRESET_SIZE = 512; // a preset should be dimensionned for a 512 x 512 canvas\r\n\r\n/**\r\n * Class for retrieving on demand the preset drawings with AJAX requests.\r\n * Tries to minimize the request by using a memory cache.\r\n */\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, wantedSize: number[], callback: (array: Point[]) => any): void {\r\n        const stopwatch = new StopWatch();\r\n        let fromCache = false;\r\n\r\n        function safelyCallCallback(points: Point[]): void {\r\n            const scaling = Math.min(wantedSize[0] / PRESET_SIZE, wantedSize[1] / PRESET_SIZE);\r\n            const offsetX = 0.5 * (wantedSize[0] - PRESET_SIZE * scaling);\r\n            const offsetY = 0.5 * (wantedSize[1] - PRESET_SIZE * scaling);\r\n\r\n            /* Create a deep copy to keep the cache clean */\r\n            const copy: Point[] = [];\r\n            for (const point of points) {\r\n                copy.push({\r\n                    x: point.x * scaling + offsetX,\r\n                    y: point.y * scaling + offsetY,\r\n                });\r\n            }\r\n\r\n            if (fromCache) {\r\n                Log.message(`Retrieved preset '${preset}' from cache in ${stopwatch.milliseconds} ms`);\r\n            } else {\r\n                Log.message(`Downloaded preset '${preset}' in ${stopwatch.milliseconds} ms.`);\r\n            }\r\n\r\n            callback(copy);\r\n        }\r\n\r\n        if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            fromCache = true;\r\n            safelyCallCallback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"readystatechange\", () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray !== null) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    safelyCallCallback(Presets.cache[preset]);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open(\"GET\", `resources/${preset}.txt`);\r\n        xhr.send();\r\n    }\r\n\r\n    public static setCustomPreset(points: Point[], canvasSize: number[]): void {\r\n        // Scale path to a PRESET_SIZE*PRESET_SIZE canvas.\r\n        // Depending on canvas aspect ratio it may not fit but it doesn't matter\r\n        const center: Point = {\r\n            x: 0.5 * canvasSize[0],\r\n            y: 0.5 * canvasSize[1],\r\n        };\r\n\r\n        const scaling = PRESET_SIZE / Math.min(canvasSize[0], canvasSize[1]);\r\n\r\n        for (const point of points) {\r\n            point.x = 0.5 * PRESET_SIZE + (point.x - center.x) * scaling;\r\n            point.y = 0.5 * PRESET_SIZE + (point.y - center.y) * scaling;\r\n        }\r\n\r\n        Presets.cache[EPreset.CUSTOM] = points;\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: Point[];\r\n    } = {};\r\n\r\n    private static tryParsePointsArray(text: string): Point[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const stopwatch = new StopWatch();\r\n\r\n        const points: Point[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        Log.message(`Parsed preset in ${stopwatch.milliseconds} ms.`);\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n","let enabled = true;\r\n\r\nfunction setEnabled(e: boolean): void {\r\n    enabled = e;\r\n}\r\n\r\nfunction message(m: string): void {\r\n    if (enabled) {\r\n        console.log(m);\r\n    }\r\n}\r\n\r\nexport {\r\n    setEnabled,\r\n    message,\r\n};\r\n","/**\r\n * Class for measuring execution performance.\r\n */\r\nclass StopWatch {\r\n    private readonly start: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.start = performance.now();\r\n    }\r\n\r\n    public get milliseconds(): number {\r\n        return Math.ceil(performance.now() - this.start);\r\n    }\r\n}\r\n\r\nexport {\r\n    StopWatch,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Clock } from \"./clock\";\r\nimport { FourierSeries } from \"./fourier-series\";\r\nimport { LineDrawing } from \"./line-drawing\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point } from \"./point\";\r\nimport { Presets } from \"./presets\";\r\nimport { TimeUnit } from \"./units\";\r\nimport * as UserInput from \"./user-input\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction setOrderIndicator(value: number): void {\r\n    value = Math.round(100 * value) / 100; // 2 digits max\r\n    Canvas.setIndicatorText(\"fourier-order\", value.toLocaleString());\r\n}\r\n\r\nfunction main(): void {\r\n    const canvas2D = new Canvas2D(\"canvas\");\r\n    const context = canvas2D.context;\r\n    context.lineWidth = 1;\r\n\r\n    Parameters.downloadObservers.push(() => canvas2D.download(\"picasso-fourier.png\"));\r\n\r\n    let drawing: LineDrawing = null;\r\n    let fourier: FourierSeries = null;\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n    UserInput.finishedAcquisitionCallbacks.push((isValid: boolean) => {\r\n        if (isValid) {\r\n            drawing = null;\r\n            fourier = null;\r\n            Canvas.showLoader(true);\r\n\r\n            Presets.setCustomPreset(UserInput.recordedPath, Canvas.getSize());\r\n            Parameters.setCustomPreset();\r\n        }\r\n        needToRedraw = true;\r\n    });\r\n\r\n    let needToRedraw = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    const loopDuration = 2000; // milliseconds, at normal speed\r\n    function mainLoop(): void {\r\n        if (UserInput.isRecording()) {\r\n            canvas2D.clear();\r\n            context.strokeStyle = \"white\";\r\n            UserInput.drawCurrentPath(canvas2D);\r\n        } else if (drawing !== null && fourier !== null) { // checks that preset is loaded\r\n            let t: TimeUnit = clock.current / loopDuration;\r\n            const maxT: TimeUnit = Parameters.closeLoop ? 1 : drawing.originalPathDuration;\r\n            let finishedLoop = (t >= maxT);\r\n\r\n            if (!finishedLoop && clock.isPaused) {\r\n                clock.resume();\r\n            }\r\n\r\n            t = Math.min(t, maxT);\r\n\r\n            if (finishedLoop) {\r\n                if (Parameters.repeat) {\r\n                    needToRestart = true;\r\n                } else {\r\n                    clock.pause();\r\n                }\r\n            }\r\n\r\n            if (needToRestart) {\r\n                needToRestart = false;\r\n                clock.reset();\r\n                fourier.resetCurve();\r\n                t = 0;\r\n                finishedLoop = false;\r\n                setOrderIndicator(Parameters.order);\r\n                canvas2D.clear();\r\n            }\r\n\r\n            if (needToRedraw) {\r\n                canvas2D.adjustSize();\r\n\r\n                if (Parameters.isProgressiveMode || Parameters.zoom === 1) {\r\n                    canvas2D.setFullViewport();\r\n                } else {\r\n                    canvas2D.zoom = Parameters.zoom;\r\n                    canvas2D.center = fourier.computePoint(Parameters.order, t);\r\n                }\r\n\r\n                if (!Parameters.persistence) {\r\n                    canvas2D.clear();\r\n                }\r\n\r\n                if (Parameters.displayOriginalCurve) {\r\n                    context.strokeStyle = \"rgb(0,128,0)\";\r\n                    const previousWidth = context.lineWidth;\r\n                    context.lineWidth = 2;\r\n\r\n                    drawing.draw(canvas2D, Parameters.isProgressiveMode ? maxT : t);\r\n\r\n                    context.lineWidth = previousWidth;\r\n                }\r\n\r\n                if (Parameters.displayCircles) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"rgba(255,255,255,0.3)\";\r\n                    fourier.drawCirclesToPoint(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displayCurve) {\r\n                    context.strokeStyle = \"white\";\r\n                    fourier.drawCurve(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displaySegments) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,0,0,0.01)\" : \"red\";\r\n                    fourier.drawSegmentsToPoint(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.isProgressiveMode) {\r\n                    let order = Parameters.order * t / maxT;\r\n\r\n                    if (!Parameters.persistence) {\r\n                        context.strokeStyle = \"white\";\r\n                    } else if (Parameters.smooth) {\r\n                        context.strokeStyle = \"rgba(255,255,255,0.01)\";\r\n                    } else {\r\n                        context.strokeStyle = \"rgba(255,255,255,0.03)\";\r\n                    }\r\n\r\n                    if (!Parameters.smooth) {\r\n                        order = Math.floor(order);\r\n                        fourier.drawCurve(canvas2D, order, maxT);\r\n                    } else {\r\n                        fourier.drawCurvePartialOrder(canvas2D, order, maxT);\r\n                    }\r\n\r\n                    setOrderIndicator(order);\r\n                }\r\n            }\r\n\r\n            needToRedraw = !finishedLoop && Parameters.speed > 0;\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    function loadPoints(points: Point[]): void {\r\n        drawing = new LineDrawing(points);\r\n        fourier = drawing.computeFourierSeries(300 + 1); // one more to avoid out of bounds exceptions\r\n        needToRestart = true;\r\n        clock.reset();\r\n        Canvas.showLoader(false);\r\n    }\r\n\r\n    function loadPreset(): void {\r\n        drawing = null;\r\n        fourier = null;\r\n\r\n        const canvasSize: number[] = Canvas.getSize();\r\n        Canvas.showLoader(true);\r\n        Presets.getPreset(Parameters.preset, canvasSize, loadPoints);\r\n    }\r\n\r\n    Parameters.presetObservers.push(loadPreset);\r\n    Canvas.Observers.canvasResize.push(loadPreset);\r\n\r\n    loadPreset();\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","import { Point } from \"./point\";\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Class for instancing and using a 2D HTML Canvas.\r\n */\r\nclass Canvas2D {\r\n    public readonly context: CanvasRenderingContext2D;\r\n\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private isDrawingLine: boolean = false;\r\n    private nbPointsInLine: number = 0;\r\n\r\n    private viewportZoom: number;\r\n    private viewportCenter: Point; // point that should be at the center of the viewport\r\n    private viewportHalfWidth: number;\r\n    private viewportHalfHeight: number;\r\n\r\n    public constructor(canvasElementId: string) {\r\n        this.canvas = document.getElementById(canvasElementId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext(\"2d\");\r\n\r\n        this.viewportZoom = 1;\r\n        this.viewportCenter = { x: 0, y: 0 };\r\n        this.viewportHalfWidth = 0.5 * this.canvas.width;\r\n        this.viewportHalfHeight = 0.5 * this.canvas.height;\r\n    }\r\n\r\n    public set center(p: Point) {\r\n        this.viewportCenter.x = p.x;\r\n        this.viewportCenter.y = p.y;\r\n    }\r\n\r\n    public set zoom(z: number) {\r\n        this.viewportZoom = z;\r\n    }\r\n\r\n    public setFullViewport(): void {\r\n        this.viewportZoom = 1;\r\n        this.viewportCenter.x = this.viewportHalfWidth;\r\n        this.viewportCenter.y = this.viewportHalfHeight;\r\n    }\r\n\r\n    public adjustSize(): void {\r\n        if (this.canvas.width !== this.canvas.clientWidth || this.canvas.height !== this.canvas.clientHeight) {\r\n            this.canvas.width = this.canvas.clientWidth;\r\n            this.canvas.height = this.canvas.clientHeight;\r\n            this.viewportHalfWidth = 0.5 * this.canvas.width;\r\n            this.viewportHalfHeight = 0.5 * this.canvas.height;\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    public drawCircle(center: Point, radius: number): void {\r\n        const visibleRadius = this.viewportZoom * radius\r\n        const x = this.viewportZoom * (center.x - this.viewportCenter.x) + this.viewportHalfWidth;\r\n        const y = this.viewportZoom * (center.y - this.viewportCenter.y) + this.viewportHalfHeight;\r\n\r\n        if (visibleRadius > 0.5) {\r\n            this.context.beginPath();\r\n            this.context.arc(x, y, visibleRadius, 0, TWO_PI);\r\n            this.context.closePath();\r\n            this.context.stroke();\r\n        }\r\n    }\r\n\r\n    public startLine(): void {\r\n        if (this.isDrawingLine) {\r\n            this.endLine();\r\n        }\r\n\r\n        this.context.beginPath();\r\n        this.isDrawingLine = true;\r\n        this.nbPointsInLine = 0;\r\n    }\r\n\r\n    public addPointToLine(point: Point): void {\r\n        const x = this.viewportZoom * (point.x - this.viewportCenter.x) + this.viewportHalfWidth;\r\n        const y = this.viewportZoom * (point.y - this.viewportCenter.y) + this.viewportHalfHeight;\r\n\r\n        if (this.nbPointsInLine === 0) {\r\n            this.context.moveTo(x, y);\r\n        } else {\r\n            this.context.lineTo(x, y);\r\n        }\r\n\r\n        this.nbPointsInLine++;\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.isDrawingLine) {\r\n            this.context.stroke();\r\n            this.context.closePath();\r\n            this.isDrawingLine = false;\r\n        }\r\n    }\r\n\r\n    public download(filename: string): void {\r\n        if ((this.canvas as any).msToBlob) { // for IE\r\n            const blob = (this.canvas as any).msToBlob();\r\n            window.navigator.msSaveBlob(blob, filename);\r\n        } else {\r\n            this.canvas.toBlob((blob: Blob | null) => {\r\n                if (blob !== null) {\r\n                    const link = document.createElement(\"a\");\r\n                    link.download = filename;\r\n                    link.href = URL.createObjectURL(blob);\r\n                    link.click();\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Canvas2D,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\n\r\ninterface IClockCheckpoint {\r\n    clockTime: DOMHighResTimeStamp; // in the clock temporality\r\n    realTime: DOMHighResTimeStamp; // in the Javascript temporality\r\n}\r\n\r\n/**\r\n * This class handles the measuring of time at a variable speed.\r\n */\r\nclass Clock {\r\n    private speed: number;\r\n    private paused: boolean;\r\n\r\n    /* This checkpoint system is used to avoid floating point approximations when computing current time. */\r\n    private lastCheckpoint: IClockCheckpoint;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        this.paused = false;\r\n        this.lastCheckpoint = {\r\n            clockTime: 0,\r\n            realTime: 0,\r\n        };\r\n\r\n        Parameters.speedChangeObservers.push(() => this.updateSpeed());\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.paused = false;\r\n        this.lastCheckpoint.clockTime = 0;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n        this.updateSpeed();\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.createCheckpoint();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = true;\r\n        }\r\n    }\r\n\r\n    public resume(): void {\r\n        if (this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = false;\r\n        }\r\n    }\r\n\r\n    public get isPaused(): boolean {\r\n        return this.paused;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        if (this.paused) {\r\n            return this.lastCheckpoint.clockTime;\r\n        }\r\n\r\n        return this.lastCheckpoint.clockTime + this.speed * (performance.now() - this.lastCheckpoint.realTime);\r\n    }\r\n\r\n    private createCheckpoint(): void {\r\n        this.lastCheckpoint.clockTime = this.current;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n    }\r\n\r\n    private updateSpeed(): void {\r\n        this.setSpeed(Parameters.speed / Parameters.zoom);\r\n    }\r\n}\r\n\r\nexport {\r\n    Clock,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport * as Log from \"./log\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\n/**\r\n * Represents a 2D line parametrized by a 1D input.\r\n * The line is 1-periodic: [0,1] -> RxR.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass LineDrawing {\r\n    public readonly pathLength: SpaceUnit; // Length of the total path in space-units\r\n    public readonly originalPathDuration: TimeUnit; // Length of the original path in time-units\r\n    private readonly points: Point[];\r\n\r\n    /**\r\n     * Builds a LineDrawing from the input points.\r\n     * If the input is not periodic, then we extend it with a last point to make the LineDrawing periodic.\r\n     */\r\n    public constructor(points: Point[]) {\r\n        this.points = points;\r\n\r\n        let originalPathLength: SpaceUnit = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            originalPathLength += Point.distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        let totalPathLength: SpaceUnit = originalPathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (!Point.equals(firstPoint, lastPoint)) {\r\n            totalPathLength += Point.distance(lastPoint, firstPoint);\r\n            this.points.push(Point.copy(firstPoint));\r\n        }\r\n\r\n        this.pathLength = totalPathLength;\r\n        this.originalPathDuration = originalPathLength / totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Draws the line portion between 0 and t.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public draw(canvas: Canvas2D, t: TimeUnit): void {\r\n        const desiredLength: SpaceUnit = t * this.pathLength;\r\n        let currentLength: SpaceUnit = 0;\r\n\r\n        canvas.startLine();\r\n        canvas.addPointToLine(this.points[0]);\r\n\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = Point.distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                canvas.addPointToLine(nextPoint);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = Point.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                canvas.addPointToLine(finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const stopwatch = new StopWatch();\r\n\r\n        const nbSteps = Math.max(200, Math.ceil(Parameters.integrationPrecision * this.pathLength));\r\n        const stepSize = this.pathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = Point.distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = Point.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        Log.message(`Computed ${order} Fourier coefficient with ${nbSteps} integration steps ` +\r\n            `in ${stopwatch.milliseconds} ms.`);\r\n        return new FourierSeries(coefficients, this.pathLength);\r\n    }\r\n}\r\n\r\nexport {\r\n    LineDrawing,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point} from \"./point\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Modifies the point given as argument by applying to it the provided Fourier Coefficient at the provided location.\r\n */\r\nfunction applyCoefficient(point: Point, coefficient: IFourierCoefficient, t: TimeUnit): void {\r\n    const currentPhase = TWO_PI * t * coefficient.n + coefficient.phase;\r\n    point.x += coefficient.magnitude * Math.cos(currentPhase);\r\n    point.y += coefficient.magnitude * Math.sin(currentPhase);\r\n}\r\n\r\n/**\r\n * Modifies the point given as argument by applying to it the provided Fourier Coefficients at the provided location.\r\n */\r\nfunction applyCoefficientsArray(point: Point, coefficients: IFourierCoefficient[], t: TimeUnit): void {\r\n    for (const coefficient of coefficients) {\r\n        applyCoefficient(point, coefficient, t);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the Fourier development of a 1-periodic [0,1] -> RxR signal.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass FourierSeries {\r\n    private readonly coefficients: IFourierCoefficient[];\r\n    private readonly curveStepSize: SpaceUnit;\r\n\r\n    private partialCurve: Point[] = [];\r\n    private partialCurveOrder: number = -1;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], totalLength: SpaceUnit) {\r\n        if (coefficients.length % 2 !== 0) { // coefficients must go in pairs of 2: 0, 1, -1, 2, -2, ...\r\n            coefficients.length--;\r\n        }\r\n        if (coefficients.length === 0) {\r\n            throw new Error(\"Fourier series must have at least one coefficient.\");\r\n        }\r\n\r\n        // Sort the coefs in that order: 0, 1, -1, 2, -2, 3, -3, ...\r\n        coefficients.sort((a: IFourierCoefficient, b: IFourierCoefficient) => {\r\n            const absA = Math.abs(a.n);\r\n            const absB = Math.abs(b.n);\r\n            if (absA !== absB) {\r\n                return absA - absB;\r\n            }\r\n            return b.n - a.n;\r\n        });\r\n        this.coefficients = coefficients;\r\n\r\n        this.curveStepSize = 1 / (Parameters.curvePrecision * totalLength);\r\n    }\r\n\r\n    /**\r\n     * Purges the internal cache of the class. Should not be called too often.\r\n     */\r\n    public resetCurve(): void {\r\n        this.partialCurve = [];\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, t] curve portion at the specified integer Fourier order.\r\n     * @param order Expected to be an integer\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCurve(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const lastPointIndex = this.computePartialCurve(order, t);\r\n\r\n        // Draw partial curve\r\n        canvas.startLine();\r\n        for (let i = 0; i < lastPointIndex; i++) {\r\n            canvas.addPointToLine(this.partialCurve[i]);\r\n        }\r\n\r\n        const f = lastPointIndex % 1;\r\n        const lastPoint = this.partialCurve[Math.floor(lastPointIndex)];\r\n        const nextPoint = this.partialCurve[Math.floor(lastPointIndex) + 1];\r\n\r\n        const interpolatedPoint = Point.interpolate(lastPoint, nextPoint, f);\r\n        canvas.addPointToLine(interpolatedPoint);\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, approx. t] curve portion at the specified Fourier order.\r\n     * The order is linearily interpolated between the nearest coefficients.\r\n     * The curve's end (t parameter) is rounded to nearest.\r\n     * @param order If not an integer, then an intterpolation is performed to make sense of decimal Fourier order.\r\n     * @param t Expected to be in [0, 1]. Is not garanteed to be respected, approximations will be performed.\r\n     */\r\n    public drawCurvePartialOrder(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        this.computePartialCurve(order, t);\r\n\r\n        let additionalCoefficients = this.getCoefficients(Math.floor(order) + 1, Math.floor(order) + 1);\r\n        let f = order % 1;\r\n        if (f < 0.5) {\r\n            additionalCoefficients = [additionalCoefficients[0]];\r\n            f *= 2;\r\n        } else {\r\n            f = 2 * f - 1;\r\n        }\r\n\r\n        canvas.startLine();\r\n\r\n        const nbSteps = t / this.curveStepSize;\r\n        for (let i = 0; i < nbSteps; i++) {\r\n            const localT = i * this.curveStepSize;\r\n\r\n            const nextPoint = Point.copy(this.partialCurve[i]);\r\n            applyCoefficient(nextPoint, additionalCoefficients[0], localT);\r\n\r\n            let lastPoint: Point;\r\n            if (additionalCoefficients.length === 1) {\r\n                lastPoint = this.partialCurve[i];\r\n            } else { // additionalCoefficients.length === 2\r\n                lastPoint = Point.copy(nextPoint);\r\n                applyCoefficient(nextPoint, additionalCoefficients[1], localT);\r\n            }\r\n\r\n            const interpolatedPoint = Point.interpolate(lastPoint, nextPoint, f);\r\n            canvas.addPointToLine(interpolatedPoint);\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws a path to the wanted point, in the form of segments representing the action of each coefficient.\r\n     * @param order Maximum Fourier order to use. Must be an integer.\r\n     *              Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawSegmentsToPoint(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const point: Point = { x: 0, y: 0 };\r\n\r\n        canvas.startLine();\r\n\r\n        const coefficients = this.getCoefficients(0, order);\r\n        for (const coefficient of coefficients) {\r\n            applyCoefficient(point, coefficient, t);\r\n            canvas.addPointToLine(point);\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws a path to the wanted point, in the form of circles representing the magnitude of each coefficient.\r\n     * @param order Maximum Fourier order to use. Must be an integer.\r\n     *              Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCirclesToPoint(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const coefficients = this.getCoefficients(0, order);\r\n        if (coefficients.length < 2) {\r\n            return;\r\n        }\r\n\r\n        const point: Point = { x: 0, y: 0 };\r\n\r\n        for (const coefficient of coefficients) {\r\n            if (coefficient.n !== 0 && coefficient.n !== 1) {\r\n                canvas.drawCircle(point, coefficient.magnitude);\r\n            }\r\n            applyCoefficient(point, coefficient, t);\r\n        }\r\n    }\r\n\r\n    public computePoint(order: number, t: TimeUnit): Point {\r\n        const point: Point = { x: 0, y: 0 };\r\n        const coefficients = this.getCoefficients(0, order);\r\n        applyCoefficientsArray(point, coefficients, t);\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Computes the partial curve between 0 and t in the given order.\r\n     * The partial curve serves as cache and is as reused as possible.\r\n     * Returns the index of the 't' point in the partial curve.\r\n     * If this index is not an integer, it means an interpolation should be performed.\r\n     */\r\n    private computePartialCurve(order: number, t: TimeUnit): number {\r\n        order = Math.floor(order);\r\n\r\n        if (order < this.partialCurveOrder) {\r\n            // Existing points are computed with too high order. Restart from scratch.\r\n            this.resetCurve();\r\n        } else if (order > this.partialCurveOrder) {\r\n            // Existing points are computed with too low order. Complete existing points with missing orders.\r\n            const missingCoefficients = this.getCoefficients(this.partialCurveOrder + 1, order);\r\n\r\n            for (let i = 0; i < this.partialCurve.length; i++) {\r\n                const localT = i * this.curveStepSize;\r\n                applyCoefficientsArray(this.partialCurve[i], missingCoefficients, localT);\r\n            }\r\n        }\r\n\r\n        // Compute new points if needed\r\n        const currentPointIndex = t / this.curveStepSize;\r\n        const nextPointIndex = Math.ceil(currentPointIndex);\r\n\r\n        const neededCoefficients = this.getCoefficients(0, order);\r\n        for (let i = this.partialCurve.length; i <= nextPointIndex + 1; i++) {\r\n            const point: Point = { x: 0, y: 0 };\r\n            applyCoefficientsArray(point, neededCoefficients, i * this.curveStepSize);\r\n            this.partialCurve.push(point);\r\n        }\r\n\r\n        this.partialCurveOrder = order;\r\n        return currentPointIndex;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of coefficients containing, in that order:\r\n     * if orderFrom > 0: orderFrom, -orderFrom, orderFrom+1, -(orderFrom+1), ..., orderTo, -orderTo\r\n     * if orderFrom == 0: 0, 1, -1, ... orderTo, -orderTo\r\n     * If orderFrom > orderTo, or if one of the parameters is out of range, only returns the valid coefficients.\r\n     */\r\n    private getCoefficients(orderFrom: number, orderTo: number): IFourierCoefficient[] {\r\n        orderFrom = Math.min(orderFrom, orderTo);\r\n\r\n        const firstIndex = Math.max(0, 2 * orderFrom - 1);\r\n        const lastIndex = Math.min(this.coefficients.length, 2 * orderTo + 1);\r\n\r\n        return this.coefficients.slice(firstIndex, lastIndex);\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Point } from \"./point\";\r\n\r\ndeclare const Canvas: any;\r\ntype Callback = (isValid: boolean) => any;\r\n\r\nlet currentPoints: Point[] = [];\r\nlet isRecordingUserInput = false;\r\nconst finishedAcquisitionCallbacks: Callback[] = [];\r\n\r\nfunction getMousePosition(): Point {\r\n    const canvasSize: number[] = Canvas.getSize();\r\n    const mousePosition: number[] = Canvas.getMousePosition();\r\n    return {\r\n        x: canvasSize[0] * mousePosition[0],\r\n        y: canvasSize[1] * mousePosition[1],\r\n    };\r\n}\r\n\r\nCanvas.Observers.mouseDown.push(() => {\r\n    isRecordingUserInput = true;\r\n    const currentPosition = getMousePosition();\r\n    currentPoints = [currentPosition];\r\n});\r\n\r\nCanvas.Observers.mouseUp.push(() => {\r\n    if (isRecordingUserInput) {\r\n        isRecordingUserInput = false;\r\n\r\n        for (const callback of finishedAcquisitionCallbacks) {\r\n            callback(currentPoints.length >= 2);\r\n        }\r\n    }\r\n});\r\n\r\nCanvas.Observers.mouseMove.push(() => {\r\n    if (isRecordingUserInput) {\r\n        const currentPosition = getMousePosition();\r\n        const isPointFarEnough = Point.distance(currentPoints[currentPoints.length - 1], currentPosition) > 2;\r\n        if (isPointFarEnough) {\r\n            currentPoints.push(currentPosition);\r\n        }\r\n    }\r\n});\r\n\r\nfunction isRecording(): boolean {\r\n    return isRecordingUserInput;\r\n}\r\n\r\nfunction drawCurrentPath(canvas: Canvas2D): void {\r\n    canvas.startLine();\r\n\r\n    for (const point of currentPoints) {\r\n        canvas.addPointToLine(point);\r\n    }\r\n\r\n    canvas.endLine();\r\n}\r\n\r\nexport {\r\n    drawCurrentPath,\r\n    finishedAcquisitionCallbacks,\r\n    isRecording,\r\n    currentPoints as recordedPath,\r\n};\r\n"],"sourceRoot":""}