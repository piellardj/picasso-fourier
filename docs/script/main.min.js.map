{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/presets.ts","webpack:///./src/ts/log.ts","webpack:///./src/ts/stopwatch.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/clock.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","controlId","callObservers","observersList","observer","preset","observers","clear","redraw","speedChange","presetChange","speed","loop","displayCircles","displaySegments","displayCurve","displayOriginalCurve","order","tryParsePreset","previousValue","EPreset","ARLEQUIN","DOG","TRIANGLE","ROUND","Parameters","Picker","addObserver","getValue","Range","previous","Checkbox","isChecked","checked","Button","getPreset","callback","stopwatch","Presets","cache","message","milliseconds","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","text","points","split","partial","length","push","x","y","enabled","e","console","log","Log","this","start","performance","now","Math","ceil","StopWatch","drawing","fourier","canvas","document","getElementById","context","getContext","width","height","lineWidth","clock","needToRestart","clearObservers","needToRedraw","redrawObservers","needToReload","presetObservers","wantedLength","mainLoop","loadPresetAndStartLoop","current","reset","Canvas","setIndicatorText","toLocaleString","clearRect","strokeStyle","drawCircles","drawCurve","draw","drawPathToPoint","requestAnimationFrame","showLoader","computeFourierSeries","main","pathLength","LineDrawing","distance","extendedPathLength","firstPoint","lastPoint","interpolate","p1","p2","dX","dY","sqrt","beginPath","moveTo","desiredLength","min","max","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","lineTo","stroke","closePath","nbSteps","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","PI","coefficients","floor","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","phase","atan2","FourierSeries","TWO_PI","_coefficients","_length","_partialCurve","_partialCurveStepSize","curvePrecision","computePoint","computeRealT","computeAmountOfCoefficients","coefficient","_partialCurveOrder","point","currentPointIndex","lastConsolidatedPointIndex","nextConsolidatedPointIndex","centerX","centerY","radius","arc","speedChangeObservers","setSpeed","lastCheckpoint","lastCheckpointReal","Clock"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { EPreset } from \"./presets\";\r\n\r\ndeclare const Button: any;\r\ndeclare const Canvas: any;\r\ndeclare const Checkbox: any;\r\ndeclare const Controls: any;\r\ndeclare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\ndeclare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRESET: \"preset-picker-id\",\r\n    SPEED: \"speed-range-id\",\r\n    LOOP: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n};\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\ntype SpeedObserver = (previousSpeed: number) => void;\r\n\r\nfunction callObservers(observersList: any[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: SpeedObserver[];\r\n    presetChange: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n    presetChange: [],\r\n};\r\n\r\n/* === INTERFACE ====================================================== */\r\nclass Parameters {\r\n    public static get preset(): EPreset {\r\n        return preset;\r\n    }\r\n\r\n    public static get speed(): number {\r\n        return speed;\r\n    }\r\n\r\n    public static get loop(): boolean {\r\n        return loop;\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return displayCircles;\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return displaySegments;\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return displayCurve;\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): SpeedObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n    public static get presetObservers(): GenericObserver[] {\r\n        return observers.presetChange;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet preset: EPreset\r\nfunction tryParsePreset(p: string): void {\r\n    const previousValue = preset;\r\n\r\n    if (p === \"arlequin\") {\r\n        preset = EPreset.ARLEQUIN;\r\n    } else if (p === \"dog\") {\r\n        preset = EPreset.DOG;\r\n    } else if (p === \"triangle\") {\r\n        preset = EPreset.TRIANGLE;\r\n    } else if (p === \"round\") {\r\n        preset = EPreset.ROUND;\r\n    }\r\n\r\n    if (preset !== previousValue) {\r\n        callObservers(observers.presetChange);\r\n    }\r\n}\r\nPicker.addObserver(controlId.PRESET, tryParsePreset);\r\ntryParsePreset(Picker.getValue(controlId.PRESET));\r\n\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    const previous = speed;\r\n    speed = s;\r\n\r\n    for (const observer of observers.speedChange) {\r\n        observer(previous);\r\n    }\r\n});\r\n\r\nlet loop: boolean = Checkbox.isChecked(controlId.LOOP);\r\nCheckbox.addObserver(controlId.LOOP, (checked: boolean) => {\r\n    loop = checked;\r\n});\r\n\r\nButton.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","import IPoint from \"./point\";\r\nimport Log from \"./log\";\r\nimport StopWatch from \"./stopwatch\";\r\n\r\nenum EPreset {\r\n    ARLEQUIN = \"arlequin\",\r\n    DOG = \"dog\",\r\n    ROUND = \"round\",\r\n    TRIANGLE = \"triangle\",\r\n}\r\n\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, callback: (array: IPoint[]) => any): void {\r\n        const stopwatch = new StopWatch();\r\n        \r\n        if (typeof Presets.cache === \"undefined\") {\r\n            Presets.cache = {};\r\n        } else if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            Log.message(\"Retrieved preset '\" + preset + \"' from cache in \" + stopwatch.milliseconds + \" ms.\");\r\n            callback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"readystatechange\", () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                Log.message(\"Downloaded preset '\" + preset + \"' in \" + stopwatch.milliseconds + \" ms.\");\r\n\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    callback(retrievedArray);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open(\"GET\", \"resources/\" + preset + \".txt\");\r\n        xhr.send(null);\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: IPoint[];\r\n    };\r\n\r\n    private static tryParsePointsArray(text: string): IPoint[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const stopwatch = new StopWatch();\r\n\r\n        const points: IPoint[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        Log.message(\"Parsed preset in \" + stopwatch.milliseconds + \" ms.\");\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n","let enabled = true;\r\n\r\nclass Log {\r\n    public static set enabled(e: boolean) {\r\n        enabled = e;\r\n    }\r\n\r\n    public static message(m: string): void {\r\n        if (enabled) {\r\n            console.log(m);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Log;\r\n","class StopWatch {\r\n    private readonly start: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.start = performance.now();\r\n    }\r\n\r\n    public get milliseconds(): number {\r\n        return Math.ceil(performance.now() - this.start);\r\n    }\r\n}\r\n\r\nexport default StopWatch;","import { FourierSeries } from \"./fourier-series\";\r\nimport LineDrawing from \"./line-drawing\";\r\nimport IPoint from \"./point\";\r\n\r\nimport Clock from \"./clock\";\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport { EPreset, Presets } from \"./presets\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction main() {\r\n    const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n    const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n    canvas.width = 512;\r\n    canvas.height = 512;\r\n    context.lineWidth = 1;\r\n\r\n    let drawing: LineDrawing;\r\n    let fourier: FourierSeries;\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart: boolean = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n\r\n    let needToRedraw: boolean = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    let needToReload: boolean = false;\r\n    Parameters.presetObservers.push(() => needToReload = true);\r\n\r\n    const wantedLength = 2000; // milliseconds\r\n    function mainLoop() {\r\n        if (needToReload) {\r\n            needToReload = false;\r\n            loadPresetAndStartLoop(Parameters.preset);\r\n            return; // exit animation frame loop, it will be reentered when preset is loaded\r\n        }\r\n\r\n        let t = clock.current / wantedLength;\r\n\r\n        if (t >= 1 && Parameters.loop) {\r\n            needToRestart = true;\r\n        }\r\n\r\n        if (needToRestart) {\r\n            needToRestart = false;\r\n            clock.reset();\r\n            t = 0;\r\n            Canvas.setIndicatorText(\"fourier-order\", Parameters.order.toLocaleString());\r\n        }\r\n\r\n        if (needToRedraw) {\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n            if (Parameters.displayCircles) {\r\n                context.strokeStyle = \"rgba(255,255,255,0.3)\";\r\n                fourier.drawCircles(context, Parameters.order, t);\r\n            }\r\n\r\n            if (Parameters.displayCurve) {\r\n                context.strokeStyle = \"white\";\r\n                fourier.drawCurve(context, Parameters.order, t);\r\n            }\r\n\r\n            if (Parameters.displayOriginalCurve) {\r\n                context.strokeStyle = \"green\";\r\n                drawing.draw(context, t);\r\n            }\r\n\r\n            if (Parameters.displaySegments) {\r\n                context.strokeStyle = \"red\";\r\n                fourier.drawPathToPoint(context, Parameters.order, t);\r\n            }\r\n        }\r\n\r\n        needToRedraw = t < 1;\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    function loadPresetAndStartLoop(preset: EPreset): void {\r\n        drawing = null;\r\n        fourier = null;\r\n\r\n        Canvas.showLoader(true);\r\n        Presets.getPreset(preset, (points: IPoint[]) => {\r\n            drawing = new LineDrawing(points);\r\n            fourier = drawing.computeFourierSeries(300);\r\n            needToRestart = true;\r\n            clock.reset();\r\n            Canvas.showLoader(false);\r\n\r\n            requestAnimationFrame(mainLoop);\r\n        });\r\n    }\r\n\r\n    loadPresetAndStartLoop(Parameters.preset);\r\n}\r\n\r\nmain();\r\n","import { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport { Parameters } from \"./parameters\";\r\nimport IPoint from \"./point\";\r\n\r\nimport Log from \"./log\";\r\nimport StopWatch from \"./stopwatch\";\r\n\r\nclass LineDrawing {\r\n    /* Assumes t is between 0 and 1 included. */\r\n    private static interpolate(p1: IPoint, p2: IPoint, t: number): IPoint {\r\n        return {\r\n            x: p1.x * (1 - t) + p2.x * t,\r\n            y: p1.y * (1 - t) + p2.y * t,\r\n        };\r\n    }\r\n\r\n    private static distance(p1: IPoint, p2: IPoint): number {\r\n        const dX = p1.x - p2.x;\r\n        const dY = p1.y - p2.y;\r\n        return Math.sqrt(dX * dX + dY * dY);\r\n    }\r\n\r\n    public readonly pathLength: number; // length of the input path\r\n    private readonly points: IPoint[];\r\n    private readonly extendedPathLength: number; // length of the actual path, potentially extended to make it periodic\r\n\r\n    public constructor(points: IPoint[]) {\r\n        this.points = points;\r\n\r\n        this.pathLength = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            this.pathLength += LineDrawing.distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        this.extendedPathLength = this.pathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (firstPoint.x !== lastPoint.x || firstPoint.y !== lastPoint.y) {\r\n            this.extendedPathLength += LineDrawing.distance(lastPoint, firstPoint);\r\n            this.points.push({\r\n                x: firstPoint.x,\r\n                y: firstPoint.y,\r\n            });\r\n        }\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public draw(context: CanvasRenderingContext2D, t: number) {\r\n        context.beginPath();\r\n        context.moveTo(this.points[0].x, this.points[0].y);\r\n\r\n        t = Math.min(1, Math.max(0, t));\r\n        const desiredLength = t * this.pathLength;\r\n\r\n        let currentLength = 0;\r\n\r\n        let i: number;\r\n        for (i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = LineDrawing.distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                context.lineTo(nextPoint.x, nextPoint.y);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = LineDrawing.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                context.lineTo(finalPoint.x, finalPoint.y);\r\n                currentLength += LineDrawing.distance(lastPoint, finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const stopwatch = new StopWatch();\r\n        \r\n        const nbSteps = Math.ceil(Parameters.integrationPrecision * this.extendedPathLength);\r\n        const stepSize = this.extendedPathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = LineDrawing.distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = LineDrawing.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        Log.message(\"Computed \" + order + \" Fourier coefficient with \" + nbSteps + \" integration steps in \" + stopwatch.milliseconds + \" ms.\");\r\n        return new FourierSeries(coefficients, this.pathLength / this.extendedPathLength, this.pathLength);\r\n    }\r\n}\r\n\r\nexport default LineDrawing;\r\n","import { Parameters } from \"./parameters\";\r\nimport IPoint from \"./point\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\nclass FourierSeries {\r\n    private readonly _coefficients: IFourierCoefficient[];\r\n    private readonly _length: number;\r\n\r\n    private _partialCurve: IPoint[];\r\n    private _partialCurveOrder: number;\r\n    private _partialCurveStepSize: number;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], length: number, pathLength: number) {\r\n        this._coefficients = coefficients;\r\n        this._length = length;\r\n\r\n        this._partialCurve = [];\r\n        this._partialCurveStepSize = length / (Parameters.curvePrecision * pathLength);\r\n    }\r\n\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public computePoint(order: number, t: number): IPoint {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        t = this.computeRealT(t);\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n\r\n        return { x, y };\r\n    }\r\n\r\n    public drawCurve(context: CanvasRenderingContext2D, order: number, t: number): void {\r\n        t = Math.min(1, Math.max(0, t));\r\n\r\n        if (order !== this._partialCurveOrder) {\r\n            this._partialCurveOrder = order;\r\n            this._partialCurve = [];\r\n        }\r\n\r\n        // Compute partial curve\r\n        const currentPointIndex = t / this._partialCurveStepSize;\r\n        const lastConsolidatedPointIndex = Math.floor(currentPointIndex);\r\n        const nextConsolidatedPointIndex = Math.ceil(currentPointIndex);\r\n        let point: IPoint;\r\n\r\n        for (let i = this._partialCurve.length; i <= lastConsolidatedPointIndex; i++) {\r\n            point = this.computePoint(order, i * this._partialCurveStepSize);\r\n            this._partialCurve.push(point);\r\n        }\r\n\r\n        // Draw partial curve\r\n        context.beginPath();\r\n        context.moveTo(this._partialCurve[0].x, this._partialCurve[0].y);\r\n        for (let i = 1; i < nextConsolidatedPointIndex; i++) {\r\n            context.lineTo(this._partialCurve[i].x, this._partialCurve[i].y);\r\n        }\r\n\r\n        point = this.computePoint(order, t);\r\n        context.lineTo(point.x, point.y);\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public drawPathToPoint(context: CanvasRenderingContext2D, order: number, t: number): void {\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        t = this.computeRealT(t);\r\n\r\n        context.beginPath();\r\n        context.moveTo(x, y);\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n\r\n            context.lineTo(x, y);\r\n        }\r\n\r\n        context.stroke();\r\n        context.closePath();\r\n    }\r\n\r\n    public drawCircles(context: CanvasRenderingContext2D, order: number, t: number): void {\r\n        function drawCircle(centerX: number, centerY: number, radius: number) {\r\n            context.beginPath();\r\n            context.arc(centerX, centerY, radius, 0, TWO_PI);\r\n            context.closePath();\r\n            context.stroke();\r\n        }\r\n\r\n        t = this.computeRealT(t);\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const max = this.computeAmountOfCoefficients(order);\r\n        for (let i = 0; i < max; i++) {\r\n            const coefficient = this._coefficients[i];\r\n            drawCircle(x, y, coefficient.magnitude);\r\n\r\n            const TWO_PI_N_T = TWO_PI * coefficient.n * t;\r\n            x += coefficient.magnitude * Math.cos(TWO_PI_N_T + coefficient.phase);\r\n            y += coefficient.magnitude * Math.sin(TWO_PI_N_T + coefficient.phase);\r\n        }\r\n    }\r\n\r\n    private computeAmountOfCoefficients(order: number): number {\r\n        return Math.min(this._coefficients.length, 1 + 2 * order);\r\n    }\r\n\r\n    private computeRealT(t: number): number {\r\n        t = Math.min(1, Math.max(0, t));\r\n        return t * this._length;\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\n\r\nclass Clock {\r\n    private speed: number;\r\n    private lastCheckpoint: DOMHighResTimeStamp;\r\n    private lastCheckpointReal: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        Parameters.speedChangeObservers.push(() => this.setSpeed(Parameters.speed));\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.lastCheckpoint = 0;\r\n        this.lastCheckpointReal = performance.now();\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.lastCheckpoint = this.current;\r\n        this.lastCheckpointReal = performance.now();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        return this.lastCheckpoint + this.speed * (performance.now() - this.lastCheckpointReal);\r\n    }\r\n}\r\n\r\nexport default Clock;\r\n"],"sourceRoot":""}