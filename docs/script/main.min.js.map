{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/parameters.ts","webpack:///./src/ts/point.ts","webpack:///./src/ts/log.ts","webpack:///./src/ts/stopwatch.ts","webpack:///./src/ts/main.ts","webpack:///./src/ts/canvas-2d.ts","webpack:///./src/ts/clock.ts","webpack:///./src/ts/line-drawing.ts","webpack:///./src/ts/fourier-series.ts","webpack:///./src/ts/presets.ts","webpack:///./src/ts/user-input.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EMode","controlId","PRESET","MODE","SPEED","PERSISTENCE","SMOOTH","CLOSE_LOOP","REPEAT","RESET","DISPLAY_CIRCLES","DISPLAY_SEGMENTS","DISPLAY_CURVE","DISPLAY_ORIGINAL_CURVE","ORDER","callObservers","observersList","observer","preset","observers","clear","redraw","speedChange","presetChange","isCustomPreset","tryParsePreset","previousValue","parseAndApplyMode","newModes","length","newMode","isInstant","INSTANT","Controls","setVisibility","Picker","addObserver","getValue","Tabs","getValues","speed","Range","previous","persistence","Checkbox","isChecked","checked","smooth","closeLoop","PROGRESSIVE","repeat","Button","displayCircles","displaySegments","displayCurve","displayOriginalCurve","order","setCustomPreset","setValue","restoreLastPreset","toString","this","isProgressiveMode","Parameters","interpolate","p1","p2","x","y","distance","dX","dY","Math","sqrt","equals","copy","point","Point","enabled","setEnabled","e","message","console","log","start","performance","now","ceil","StopWatch","setOrderIndicator","round","Canvas","setIndicatorText","toLocaleString","canvas2D","Canvas2D","context","lineWidth","drawing","fourier","clock","Clock","needToRestart","clearObservers","push","UserInput","finishedAcquisitionCallbacks","isValid","showLoader","loadPoints","recordedPath","needToRedraw","redrawObservers","loopDuration","points","LineDrawing","computeFourierSeries","reset","loadPreset","canvasSize","getSize","Presets","getPreset","presetObservers","Observers","canvasResize","requestAnimationFrame","mainLoop","isRecording","strokeStyle","drawCurrentPath","current","maxT","originalPathDuration","finishedLoop","isPaused","resume","min","pause","resetCurve","adjustSize","previousWidth","draw","drawCirclesToPoint","drawCurve","drawSegmentsToPoint","drawCurvePartialOrder","floor","main","TWO_PI","PI","canvasElementId","isDrawingLine","nbPointsInLine","canvas","document","getElementById","getContext","width","clientWidth","height","clientHeight","clearRect","drawCircle","center","radius","beginPath","arc","closePath","stroke","startLine","endLine","addPointToLine","moveTo","lineTo","paused","lastCheckpoint","clockTime","realTime","speedChangeObservers","setSpeed","createCheckpoint","originalPathLength","totalPathLength","firstPoint","lastPoint","pathLength","desiredLength","currentLength","nextPoint","segmentLength","interpolationFactor","finalPoint","stopwatch","nbSteps","integrationPrecision","stepSize","dT","samples","lastPointIndex","iStep","desiredT","iPoint","exactPoint","two_pi_t","coefficients","cx","cy","sample","TWO_PI_N_T","cos","sin","magnitude","phase","atan2","Log","milliseconds","FourierSeries","applyCoefficient","coefficient","currentPhase","applyCoefficientsArray","totalLength","partialCurve","partialCurveOrder","Error","sort","a","b","absA","abs","absB","curveStepSize","curvePrecision","computePartialCurve","f","interpolatedPoint","additionalCoefficients","getCoefficients","localT","missingCoefficients","currentPointIndex","nextPointIndex","neededCoefficients","orderFrom","orderTo","firstIndex","max","lastIndex","slice","EPreset","PRESET_SIZE","wantedSize","callback","fromCache","safelyCallCallback","scaling","offsetX","offsetY","cache","xhr","XMLHttpRequest","addEventListener","readyState","DONE","status","retrievedArray","tryParsePointsArray","responseText","open","send","text","split","partial","currentPoints","isRecordingUserInput","getMousePosition","mousePosition","mouseDown","currentPosition","mouseUp","mouseMove"],"mappings":"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","file":"main.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { EPreset } from \"./presets\";\r\n\r\ndeclare const Button: any;\r\n// declare const Canvas: any;\r\ndeclare const Checkbox: any;\r\ndeclare const Controls: any;\r\n// declare const FileControl: any;\r\ndeclare const Picker: any;\r\ndeclare const Range: any;\r\ndeclare const Tabs: any;\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PRESET: \"preset-picker-id\",\r\n    MODE: \"mode-picker-id\",\r\n    SPEED: \"speed-range-id\",\r\n    PERSISTENCE: \"persistence-checkbox-id\",\r\n    SMOOTH: \"smooth-checkbox-id\",\r\n    CLOSE_LOOP: \"close-loop-checkbox-id\",\r\n    REPEAT: \"loop-checkbox-id\",\r\n    RESET: \"reset-button-id\",\r\n    DISPLAY_CIRCLES: \"circles-checkbox-id\",\r\n    DISPLAY_SEGMENTS: \"segments-checkbox-id\",\r\n    DISPLAY_CURVE: \"curve-checkbox-id\",\r\n    DISPLAY_ORIGINAL_CURVE: \"original-curve-checkbox-id\",\r\n    ORDER: \"order-range-id\",\r\n};\r\n\r\nenum EMode {\r\n    INSTANT = \"0\",\r\n    PROGRESSIVE = \"1\",\r\n}\r\n\r\n/* === OBSERVERS ====================================================== */\r\ntype GenericObserver = () => void;\r\ntype SpeedObserver = (previousSpeed: number) => void;\r\n\r\nfunction callObservers(observersList: GenericObserver[]): void {\r\n    for (const observer of observersList) {\r\n        observer();\r\n    }\r\n}\r\n\r\nconst observers: {\r\n    clear: GenericObserver[];\r\n    redraw: GenericObserver[];\r\n    speedChange: SpeedObserver[];\r\n    presetChange: GenericObserver[];\r\n} = {\r\n    clear: [],\r\n    redraw: [],\r\n    speedChange: [],\r\n    presetChange: [],\r\n};\r\n\r\n/* === EVENTS BINDING ================================================= */\r\n\r\n/* --- PARAMETERS ----------------------------------------------------- */\r\nlet isCustomPreset: boolean = false;\r\nlet preset: EPreset;\r\nfunction tryParsePreset(p: string): void {\r\n    const previousValue = preset;\r\n    preset = p as EPreset;\r\n\r\n    if (isCustomPreset || preset !== previousValue) {\r\n        callObservers(observers.presetChange);\r\n    }\r\n}\r\nPicker.addObserver(controlId.PRESET, tryParsePreset);\r\ntryParsePreset(Picker.getValue(controlId.PRESET));\r\n\r\nlet mode: EMode;\r\nfunction parseAndApplyMode(newModes: string[]): void {\r\n    if (newModes.length !== 1) {\r\n        return;\r\n    }\r\n\r\n    const newMode = newModes[0] as EMode;\r\n    if (newMode !== mode) {\r\n        mode = newMode;\r\n\r\n        const isInstant = (mode === EMode.INSTANT);\r\n        Controls.setVisibility(controlId.SMOOTH, !isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_CIRCLES, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_SEGMENTS, isInstant);\r\n        Controls.setVisibility(controlId.DISPLAY_CURVE, isInstant);\r\n\r\n        callObservers(observers.clear);\r\n    }\r\n}\r\nparseAndApplyMode(Tabs.getValues(controlId.MODE));\r\nTabs.addObserver(controlId.MODE, parseAndApplyMode);\r\n\r\nlet speed: number = Range.getValue(controlId.SPEED);\r\nRange.addObserver(controlId.SPEED, (s: number) => {\r\n    const previous = speed;\r\n    speed = s;\r\n\r\n    for (const observer of observers.speedChange) {\r\n        observer(previous);\r\n    }\r\n});\r\n\r\nlet persistence: boolean = Checkbox.isChecked(controlId.PERSISTENCE);\r\nCheckbox.addObserver(controlId.PERSISTENCE, (checked: boolean) => {\r\n    persistence = checked;\r\n});\r\n\r\nlet smooth: boolean = Checkbox.isChecked(controlId.SMOOTH);\r\nCheckbox.addObserver(controlId.SMOOTH, (checked: boolean) => {\r\n    smooth = checked;\r\n});\r\n\r\nlet closeLoop: boolean = Checkbox.isChecked(controlId.CLOSE_LOOP);\r\nCheckbox.addObserver(controlId.CLOSE_LOOP, (checked: boolean) => {\r\n    closeLoop = checked;\r\n\r\n    if (mode === EMode.PROGRESSIVE) {\r\n        callObservers(observers.clear);\r\n    }\r\n});\r\n\r\nlet repeat: boolean = Checkbox.isChecked(controlId.REPEAT);\r\nCheckbox.addObserver(controlId.REPEAT, (checked: boolean) => {\r\n    repeat = checked;\r\n});\r\n\r\nButton.addObserver(controlId.RESET, () => callObservers(observers.clear));\r\n\r\nlet displayCircles: boolean = Checkbox.isChecked(controlId.DISPLAY_CIRCLES);\r\nCheckbox.addObserver(controlId.DISPLAY_CIRCLES, (checked: boolean) => {\r\n    displayCircles = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displaySegments: boolean = Checkbox.isChecked(controlId.DISPLAY_SEGMENTS);\r\nCheckbox.addObserver(controlId.DISPLAY_SEGMENTS, (checked: boolean) => {\r\n    displaySegments = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_CURVE, (checked: boolean) => {\r\n    displayCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet displayOriginalCurve: boolean = Checkbox.isChecked(controlId.DISPLAY_ORIGINAL_CURVE);\r\nCheckbox.addObserver(controlId.DISPLAY_ORIGINAL_CURVE, (checked: boolean) => {\r\n    displayOriginalCurve = checked;\r\n    callObservers(observers.redraw);\r\n});\r\n\r\nlet order: number = Range.getValue(controlId.ORDER);\r\nRange.addObserver(controlId.ORDER, (o: number) => {\r\n    order = o;\r\n    callObservers(observers.clear);\r\n});\r\n\r\n/* === INTERFACE ====================================================== */\r\n/**\r\n * Class giving access to all the parameters of the application. Also gives access to event handlers.\r\n */\r\nclass Parameters {\r\n    public static get preset(): EPreset {\r\n        return preset;\r\n    }\r\n    public static setCustomPreset(): void {\r\n        Picker.setValue(controlId.PRESET, null);\r\n        isCustomPreset = true;\r\n    }\r\n    public static restoreLastPreset(): void {\r\n        Picker.setValue(controlId.PRESET, preset.toString());\r\n        isCustomPreset = false;\r\n    }\r\n\r\n    public static get isProgressiveMode(): boolean {\r\n        return mode === EMode.PROGRESSIVE;\r\n    }\r\n\r\n    public static get speed(): number {\r\n        if (this.isProgressiveMode) {\r\n            return 0.1 * speed;\r\n        }\r\n        return speed;\r\n    }\r\n\r\n    public static get persistence(): boolean {\r\n        return persistence;\r\n    }\r\n\r\n    public static get smooth(): boolean {\r\n        return smooth;\r\n    }\r\n\r\n    public static get closeLoop(): boolean {\r\n        return closeLoop;\r\n    }\r\n\r\n    public static get repeat(): boolean {\r\n        return repeat;\r\n    }\r\n\r\n    public static get displayCircles(): boolean {\r\n        return mode === EMode.INSTANT && displayCircles;\r\n    }\r\n\r\n    public static get displaySegments(): boolean {\r\n        return mode === EMode.INSTANT && displaySegments;\r\n    }\r\n\r\n    public static get displayCurve(): boolean {\r\n        return mode === EMode.INSTANT && displayCurve;\r\n    }\r\n\r\n    public static get displayOriginalCurve(): boolean {\r\n        return displayOriginalCurve;\r\n    }\r\n\r\n    public static get order(): number {\r\n        return order;\r\n    }\r\n\r\n    public static get integrationPrecision(): number {\r\n        const integrationStepSize = 1; // one space-unit per integration step\r\n        return 1 / integrationStepSize;\r\n    }\r\n\r\n    public static get curvePrecision(): number {\r\n        const stepSize = 2; // sampling every two space-units\r\n        return 1 / stepSize;\r\n    }\r\n\r\n    public static get clearObservers(): GenericObserver[] {\r\n        return observers.clear;\r\n    }\r\n    public static get redrawObservers(): GenericObserver[] {\r\n        return observers.redraw;\r\n    }\r\n    public static get speedChangeObservers(): SpeedObserver[] {\r\n        return observers.speedChange;\r\n    }\r\n    public static get presetObservers(): GenericObserver[] {\r\n        return observers.presetChange;\r\n    }\r\n\r\n    private constructor() {}\r\n}\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","/**\r\n * Simple data class representing a 2D point.\r\n */\r\nclass Point {\r\n    /* Assumes t is between 0 and 1 included. */\r\n    public static interpolate(p1: Point, p2: Point, t: number): Point {\r\n        return {\r\n            x: p1.x * (1 - t) + p2.x * t,\r\n            y: p1.y * (1 - t) + p2.y * t,\r\n        };\r\n    }\r\n\r\n    public static distance(p1: Point, p2: Point): number {\r\n        const dX = p1.x - p2.x;\r\n        const dY = p1.y - p2.y;\r\n        return Math.sqrt(dX * dX + dY * dY);\r\n    }\r\n\r\n    public static equals(p1: Point, p2: Point): boolean {\r\n        return p1.x === p2.x && p1.y === p2.y;\r\n    }\r\n\r\n    public static copy(point: Point): Point {\r\n        return {\r\n            x: point.x,\r\n            y: point.y,\r\n        };\r\n    }\r\n\r\n    public x: number;\r\n    public y: number;\r\n}\r\n\r\nexport {\r\n    Point,\r\n};\r\n","let enabled = true;\r\n\r\nfunction setEnabled(e: boolean): void {\r\n    enabled = e;\r\n}\r\n\r\nfunction message(m: string): void {\r\n    if (enabled) {\r\n        console.log(m);\r\n    }\r\n}\r\n\r\nexport {\r\n    setEnabled,\r\n    message,\r\n};\r\n","/**\r\n * Class for measuring execution performance.\r\n */\r\nclass StopWatch {\r\n    private readonly start: DOMHighResTimeStamp;\r\n\r\n    public constructor() {\r\n        this.start = performance.now();\r\n    }\r\n\r\n    public get milliseconds(): number {\r\n        return Math.ceil(performance.now() - this.start);\r\n    }\r\n}\r\n\r\nexport {\r\n    StopWatch,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Clock } from \"./clock\";\r\nimport { FourierSeries } from \"./fourier-series\";\r\nimport { LineDrawing } from \"./line-drawing\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point } from \"./point\";\r\nimport { Presets } from \"./presets\";\r\nimport { TimeUnit } from \"./units\";\r\nimport * as UserInput from \"./user-input\";\r\n\r\ndeclare const Canvas: any;\r\n\r\nfunction setOrderIndicator(value: number): void {\r\n    value = Math.round(100 * value) / 100; // 2 digits max\r\n    Canvas.setIndicatorText(\"fourier-order\", value.toLocaleString());\r\n}\r\n\r\nfunction main(): void {\r\n    const canvas2D = new Canvas2D(\"canvas\");\r\n    const context = canvas2D.context;\r\n    context.lineWidth = 1;\r\n\r\n    let drawing: LineDrawing = null;\r\n    let fourier: FourierSeries = null;\r\n\r\n    const clock = new Clock();\r\n\r\n    let needToRestart = true;\r\n    Parameters.clearObservers.push(() => needToRestart = true);\r\n    UserInput.finishedAcquisitionCallbacks.push((isValid: boolean) => {\r\n        if (isValid) {\r\n            drawing = null;\r\n            fourier = null;\r\n            Canvas.showLoader(true);\r\n\r\n            Parameters.setCustomPreset();\r\n            loadPoints(UserInput.recordedPath);\r\n        }\r\n        needToRedraw = true;\r\n    });\r\n\r\n    let needToRedraw = true;\r\n    Parameters.redrawObservers.push(() => needToRedraw = true);\r\n\r\n    const loopDuration = 2000; // milliseconds, at normal speed\r\n    function mainLoop(): void {\r\n        if (UserInput.isRecording()) {\r\n            canvas2D.clear();\r\n            context.strokeStyle = \"white\";\r\n            UserInput.drawCurrentPath(canvas2D);\r\n        } else if (drawing !== null && fourier !== null) { // checks that preset is loaded\r\n            let t: TimeUnit = clock.current / loopDuration;\r\n            const maxT: TimeUnit = Parameters.closeLoop ? 1 : drawing.originalPathDuration;\r\n            let finishedLoop = (t >= maxT);\r\n\r\n            if (!finishedLoop && clock.isPaused) {\r\n                clock.resume();\r\n            }\r\n\r\n            t = Math.min(t, maxT);\r\n\r\n            if (finishedLoop) {\r\n                if (Parameters.repeat) {\r\n                    needToRestart = true;\r\n                } else {\r\n                    clock.pause();\r\n                }\r\n            }\r\n\r\n            if (needToRestart) {\r\n                needToRestart = false;\r\n                clock.reset();\r\n                fourier.resetCurve();\r\n                t = 0;\r\n                finishedLoop = false;\r\n                setOrderIndicator(Parameters.order);\r\n                canvas2D.clear();\r\n            }\r\n\r\n            if (needToRedraw) {\r\n                canvas2D.adjustSize();\r\n\r\n                if (!Parameters.persistence) {\r\n                    canvas2D.clear();\r\n                }\r\n\r\n                if (Parameters.displayOriginalCurve) {\r\n                    context.strokeStyle = \"rgb(0,128,0)\";\r\n                    const previousWidth = context.lineWidth;\r\n                    context.lineWidth = 2;\r\n\r\n                    drawing.draw(canvas2D, Parameters.isProgressiveMode ? maxT : t);\r\n\r\n                    context.lineWidth = previousWidth;\r\n                }\r\n\r\n                if (Parameters.displayCircles) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,255,255,0.01)\" : \"rgba(255,255,255,0.3)\";\r\n                    fourier.drawCirclesToPoint(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displayCurve) {\r\n                    context.strokeStyle = \"white\";\r\n                    fourier.drawCurve(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.displaySegments) {\r\n                    context.strokeStyle = Parameters.persistence ? \"rgba(255,0,0,0.01)\" : \"red\";\r\n                    fourier.drawSegmentsToPoint(canvas2D, Parameters.order, t);\r\n                }\r\n\r\n                if (Parameters.isProgressiveMode) {\r\n                    let order = Parameters.order * t / maxT;\r\n\r\n                    if (!Parameters.persistence) {\r\n                        context.strokeStyle = \"white\";\r\n                    } else if (Parameters.smooth) {\r\n                        context.strokeStyle = \"rgba(255,255,255,0.01)\";\r\n                    } else {\r\n                        context.strokeStyle = \"rgba(255,255,255,0.03)\";\r\n                    }\r\n\r\n                    if (!Parameters.smooth) {\r\n                        order = Math.floor(order);\r\n                        fourier.drawCurve(canvas2D, order, maxT);\r\n                    } else {\r\n                        fourier.drawCurvePartialOrder(canvas2D, order, maxT);\r\n                    }\r\n\r\n                    setOrderIndicator(order);\r\n                }\r\n            }\r\n\r\n            needToRedraw = !finishedLoop && Parameters.speed > 0;\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    function loadPoints(points: Point[]): void {\r\n        drawing = new LineDrawing(points);\r\n        fourier = drawing.computeFourierSeries(300 + 1); // one more to avoid out of bounds exceptions\r\n        needToRestart = true;\r\n        clock.reset();\r\n        Canvas.showLoader(false);\r\n    }\r\n\r\n    function loadPreset(): void {\r\n        drawing = null;\r\n        fourier = null;\r\n\r\n        const canvasSize: number[] = Canvas.getSize();\r\n        Canvas.showLoader(true);\r\n        Parameters.restoreLastPreset(); // in case we're exiting user input mode\r\n        Presets.getPreset(Parameters.preset, canvasSize, loadPoints);\r\n    }\r\n\r\n    Parameters.presetObservers.push(loadPreset);\r\n    Canvas.Observers.canvasResize.push(loadPreset);\r\n\r\n    loadPreset();\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","import { Point } from \"./point\";\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Class for instancing and using a 2D HTML Canvas.\r\n */\r\nclass Canvas2D {\r\n    public readonly context: CanvasRenderingContext2D;\r\n\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private isDrawingLine: boolean = false;\r\n    private nbPointsInLine: number = 0;\r\n\r\n    public constructor(canvasElementId: string) {\r\n        this.canvas = document.getElementById(canvasElementId) as HTMLCanvasElement;\r\n        this.context = this.canvas.getContext(\"2d\");\r\n    }\r\n\r\n    public adjustSize(): void {\r\n        if (this.canvas.width !== this.canvas.clientWidth || this.canvas.height !== this.canvas.clientHeight) {\r\n            this.canvas.width = this.canvas.clientWidth;\r\n            this.canvas.height = this.canvas.clientHeight;\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    public drawCircle(center: Point, radius: number): void {\r\n        if (radius > 0.5) {\r\n            this.context.beginPath();\r\n            this.context.arc(center.x, center.y, radius, 0, TWO_PI);\r\n            this.context.closePath();\r\n            this.context.stroke();\r\n        }\r\n    }\r\n\r\n    public startLine(): void {\r\n        if (this.isDrawingLine) {\r\n            this.endLine();\r\n        }\r\n\r\n        this.context.beginPath();\r\n        this.isDrawingLine = true;\r\n        this.nbPointsInLine = 0;\r\n    }\r\n\r\n    public addPointToLine(point: Point): void {\r\n        if (this.nbPointsInLine === 0) {\r\n            this.context.moveTo(point.x, point.y);\r\n        } else {\r\n            this.context.lineTo(point.x, point.y);\r\n        }\r\n\r\n        this.nbPointsInLine++;\r\n    }\r\n\r\n    public endLine(): void {\r\n        if (this.isDrawingLine) {\r\n            this.context.stroke();\r\n            this.context.closePath();\r\n            this.isDrawingLine = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Canvas2D,\r\n};\r\n","import { Parameters } from \"./parameters\";\r\n\r\ninterface IClockCheckpoint {\r\n    clockTime: DOMHighResTimeStamp; // in the clock temporality\r\n    realTime: DOMHighResTimeStamp; // in the Javascript temporality\r\n}\r\n\r\n/**\r\n * This class handles the measuring of time at a variable speed.\r\n */\r\nclass Clock {\r\n    private speed: number;\r\n    private paused: boolean;\r\n\r\n    /* This checkpoint system is used to avoid floating point approximations when computing current time. */\r\n    private lastCheckpoint: IClockCheckpoint;\r\n\r\n    public constructor() {\r\n        this.speed = Parameters.speed;\r\n        this.paused = false;\r\n        this.lastCheckpoint = {\r\n            clockTime: 0,\r\n            realTime: 0,\r\n        };\r\n\r\n        Parameters.speedChangeObservers.push(() => this.setSpeed(Parameters.speed));\r\n\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.paused = false;\r\n        this.lastCheckpoint.clockTime = 0;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n        this.setSpeed(Parameters.speed);\r\n    }\r\n\r\n    public setSpeed(speed: number): void {\r\n        this.createCheckpoint();\r\n        this.speed = speed;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = true;\r\n        }\r\n    }\r\n\r\n    public resume(): void {\r\n        if (this.paused) {\r\n            this.createCheckpoint();\r\n            this.paused = false;\r\n        }\r\n    }\r\n\r\n    public get isPaused(): boolean {\r\n        return this.paused;\r\n    }\r\n\r\n    public get current(): DOMHighResTimeStamp {\r\n        if (this.paused) {\r\n            return this.lastCheckpoint.clockTime;\r\n        }\r\n\r\n        return this.lastCheckpoint.clockTime + this.speed * (performance.now() - this.lastCheckpoint.realTime);\r\n    }\r\n\r\n    private createCheckpoint(): void {\r\n        this.lastCheckpoint.clockTime = this.current;\r\n        this.lastCheckpoint.realTime = performance.now();\r\n    }\r\n}\r\n\r\nexport {\r\n    Clock,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { FourierSeries, IFourierCoefficient } from \"./fourier-series\";\r\nimport * as Log from \"./log\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\n/**\r\n * Represents a 2D line parametrized by a 1D input.\r\n * The line is 1-periodic: [0,1] -> RxR.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass LineDrawing {\r\n    public readonly pathLength: SpaceUnit; // Length of the total path in space-units\r\n    public readonly originalPathDuration: TimeUnit; // Length of the original path in time-units\r\n    private readonly points: Point[];\r\n\r\n    /**\r\n     * Builds a LineDrawing from the input points.\r\n     * If the input is not periodic, then we extend it with a last point to make the LineDrawing periodic.\r\n     */\r\n    public constructor(points: Point[]) {\r\n        this.points = points;\r\n\r\n        let originalPathLength: SpaceUnit = 0;\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            originalPathLength += Point.distance(this.points[i], this.points[i + 1]);\r\n        }\r\n\r\n        let totalPathLength: SpaceUnit = originalPathLength;\r\n\r\n        // For Fourier series computing, artificially make the path periodic\r\n        const firstPoint = this.points[0];\r\n        const lastPoint = this.points[this.points.length - 1];\r\n        if (!Point.equals(firstPoint, lastPoint)) {\r\n            totalPathLength += Point.distance(lastPoint, firstPoint);\r\n            this.points.push(Point.copy(firstPoint));\r\n        }\r\n\r\n        this.pathLength = totalPathLength;\r\n        this.originalPathDuration = originalPathLength / totalPathLength;\r\n    }\r\n\r\n    /**\r\n     * Draws the line portion between 0 and t.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public draw(canvas: Canvas2D, t: TimeUnit): void {\r\n        const desiredLength: SpaceUnit = t * this.pathLength;\r\n        let currentLength: SpaceUnit = 0;\r\n\r\n        canvas.startLine();\r\n        canvas.addPointToLine(this.points[0]);\r\n\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            const lastPoint = this.points[i];\r\n            const nextPoint = this.points[i + 1];\r\n            const segmentLength = Point.distance(lastPoint, nextPoint);\r\n\r\n            if (currentLength + segmentLength < desiredLength) {\r\n                currentLength += segmentLength;\r\n                canvas.addPointToLine(nextPoint);\r\n            } else {\r\n                const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                const finalPoint = Point.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                canvas.addPointToLine(finalPoint);\r\n                break;\r\n            }\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    public computeFourierSeries(order: number): FourierSeries {\r\n        const stopwatch = new StopWatch();\r\n\r\n        const nbSteps = Math.ceil(Parameters.integrationPrecision * this.pathLength);\r\n        const stepSize = this.pathLength / nbSteps;\r\n        const dT = 1 / nbSteps;\r\n\r\n        /* Precompute function samples to avoid computing them for each coefficient. */\r\n        interface IFunctionSample {\r\n            x: number;\r\n            y: number;\r\n            two_pi_t: number; // t is where the drawing was evaluated\r\n        }\r\n\r\n        const samples: IFunctionSample[] = [];\r\n        {\r\n            let currentLength = 0;\r\n            let lastPointIndex = 0;\r\n            for (let iStep = 0; iStep < nbSteps; iStep++) {\r\n                const desiredT = (iStep + 0.5) * dT;\r\n                const desiredLength = (iStep + 0.5) * stepSize;\r\n\r\n                for (let iPoint = lastPointIndex; iPoint < this.points.length - 1; iPoint++) {\r\n                    const lastPoint = this.points[iPoint];\r\n                    const nextPoint = this.points[iPoint + 1];\r\n                    const segmentLength = Point.distance(lastPoint, nextPoint);\r\n\r\n                    if (currentLength + segmentLength < desiredLength) {\r\n                        currentLength += segmentLength;\r\n                        lastPointIndex = iPoint + 1;\r\n                    } else {\r\n                        const interpolationFactor = (desiredLength - currentLength) / segmentLength;\r\n                        const exactPoint = Point.interpolate(lastPoint, nextPoint, interpolationFactor);\r\n                        samples.push({\r\n                            x: exactPoint.x,\r\n                            y: exactPoint.y,\r\n                            two_pi_t: 2 * Math.PI * desiredT,\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const coefficients: IFourierCoefficient[] = [];\r\n        for (let i = 0; i < 2 * order + 1; i++) {\r\n            let n = Math.floor((i + 1) / 2); // n is the index of the coefficient we're about to compute\r\n            if (i > 0 && i % 2 === 0) {\r\n                n *= -1;\r\n            }\r\n\r\n            let cx = 0;\r\n            let cy = 0;\r\n            for (const sample of samples) {\r\n                const TWO_PI_N_T = n * sample.two_pi_t;\r\n                const cos = Math.cos(TWO_PI_N_T);\r\n                const sin = Math.sin(TWO_PI_N_T);\r\n\r\n                cx += dT * (sample.x * cos + sample.y * sin);\r\n                cy += dT * (sample.y * cos - sample.x * sin);\r\n            }\r\n\r\n            coefficients.push({\r\n                magnitude: Math.sqrt(cx * cx + cy * cy),\r\n                phase: Math.atan2(cy, cx),\r\n                n,\r\n            });\r\n        }\r\n\r\n        Log.message(`Computed ${order} Fourier coefficient with ${nbSteps} integration steps ` +\r\n            `in ${stopwatch.milliseconds} ms.`);\r\n        return new FourierSeries(coefficients, this.pathLength);\r\n    }\r\n}\r\n\r\nexport {\r\n    LineDrawing,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { Point} from \"./point\";\r\nimport { SpaceUnit, TimeUnit } from \"./units\";\r\n\r\ninterface IFourierCoefficient {\r\n    magnitude: number;\r\n    phase: number;\r\n    n: number;\r\n}\r\n\r\nconst TWO_PI = 2 * Math.PI;\r\n\r\n/**\r\n * Modifies the point given as argument by applying to it the provided Fourier Coefficient at the provided location.\r\n */\r\nfunction applyCoefficient(point: Point, coefficient: IFourierCoefficient, t: TimeUnit): void {\r\n    const currentPhase = TWO_PI * t * coefficient.n + coefficient.phase;\r\n    point.x += coefficient.magnitude * Math.cos(currentPhase);\r\n    point.y += coefficient.magnitude * Math.sin(currentPhase);\r\n}\r\n\r\n/**\r\n * Modifies the point given as argument by applying to it the provided Fourier Coefficients at the provided location.\r\n */\r\nfunction applyCoefficientsArray(point: Point, coefficients: IFourierCoefficient[], t: TimeUnit): void {\r\n    for (const coefficient of coefficients) {\r\n        applyCoefficient(point, coefficient, t);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents the Fourier development of a 1-periodic [0,1] -> RxR signal.\r\n * The 1D input is called Time (or t).\r\n * The 2D output is called Space.\r\n */\r\nclass FourierSeries {\r\n    private readonly coefficients: IFourierCoefficient[];\r\n    private readonly curveStepSize: SpaceUnit;\r\n\r\n    private partialCurve: Point[] = [];\r\n    private partialCurveOrder: number = -1;\r\n\r\n    public constructor(coefficients: IFourierCoefficient[], totalLength: SpaceUnit) {\r\n        if (coefficients.length % 2 !== 0) { // coefficients must go in pairs of 2: 0, 1, -1, 2, -2, ...\r\n            coefficients.length--;\r\n        }\r\n        if (coefficients.length === 0) {\r\n            throw new Error(\"Fourier series must have at least one coefficient.\");\r\n        }\r\n\r\n        // Sort the coefs in that order: 0, 1, -1, 2, -2, 3, -3, ...\r\n        coefficients.sort((a: IFourierCoefficient, b: IFourierCoefficient) => {\r\n            const absA = Math.abs(a.n);\r\n            const absB = Math.abs(b.n);\r\n            if (absA !== absB) {\r\n                return absA - absB;\r\n            }\r\n            return b.n - a.n;\r\n        });\r\n        this.coefficients = coefficients;\r\n\r\n        this.curveStepSize = 1 / (Parameters.curvePrecision * totalLength);\r\n    }\r\n\r\n    /**\r\n     * Purges the internal cache of the class. Should not be called too often.\r\n     */\r\n    public resetCurve(): void {\r\n        this.partialCurve = [];\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, t] curve portion at the specified integer Fourier order.\r\n     * @param order Expected to be an integer\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCurve(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const lastPointIndex = this.computePartialCurve(order, t);\r\n\r\n        // Draw partial curve\r\n        canvas.startLine();\r\n        for (let i = 0; i < lastPointIndex; i++) {\r\n            canvas.addPointToLine(this.partialCurve[i]);\r\n        }\r\n\r\n        const f = lastPointIndex % 1;\r\n        const lastPoint = this.partialCurve[Math.floor(lastPointIndex)];\r\n        const nextPoint = this.partialCurve[Math.floor(lastPointIndex) + 1];\r\n\r\n        const interpolatedPoint = Point.interpolate(lastPoint, nextPoint, f);\r\n        canvas.addPointToLine(interpolatedPoint);\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws the [0, approx. t] curve portion at the specified Fourier order.\r\n     * The order is linearily interpolated between the nearest coefficients.\r\n     * The curve's end (t parameter) is rounded to nearest.\r\n     * @param order If not an integer, then an intterpolation is performed to make sense of decimal Fourier order.\r\n     * @param t Expected to be in [0, 1]. Is not garanteed to be respected, approximations will be performed.\r\n     */\r\n    public drawCurvePartialOrder(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        this.computePartialCurve(order, t);\r\n\r\n        let additionalCoefficients = this.getCoefficients(Math.floor(order) + 1, Math.floor(order) + 1);\r\n        let f = order % 1;\r\n        if (f < 0.5) {\r\n            additionalCoefficients = [additionalCoefficients[0]];\r\n            f *= 2;\r\n        } else {\r\n            f = 2 * f - 1;\r\n        }\r\n\r\n        canvas.startLine();\r\n\r\n        const nbSteps = t / this.curveStepSize;\r\n        for (let i = 0; i < nbSteps; i++) {\r\n            const localT = i * this.curveStepSize;\r\n\r\n            const nextPoint = Point.copy(this.partialCurve[i]);\r\n            applyCoefficient(nextPoint, additionalCoefficients[0], localT);\r\n\r\n            let lastPoint: Point;\r\n            if (additionalCoefficients.length === 1) {\r\n                lastPoint = this.partialCurve[i];\r\n            } else { // additionalCoefficients.length === 2\r\n                lastPoint = Point.copy(nextPoint);\r\n                applyCoefficient(nextPoint, additionalCoefficients[1], localT);\r\n            }\r\n\r\n            const interpolatedPoint = Point.interpolate(lastPoint, nextPoint, f);\r\n            canvas.addPointToLine(interpolatedPoint);\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws a path to the wanted point, in the form of segments representing the action of each coefficient.\r\n     * @param order Maximum Fourier order to use. Must be an integer.\r\n     *              Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawSegmentsToPoint(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const point: Point = { x: 0, y: 0 };\r\n\r\n        canvas.startLine();\r\n\r\n        const coefficients = this.getCoefficients(0, order);\r\n        for (const coefficient of coefficients) {\r\n            applyCoefficient(point, coefficient, t);\r\n            canvas.addPointToLine(point);\r\n        }\r\n\r\n        canvas.endLine();\r\n    }\r\n\r\n    /**\r\n     * Draws a path to the wanted point, in the form of circles representing the magnitude of each coefficient.\r\n     * @param order Maximum Fourier order to use. Must be an integer.\r\n     *              Coefficients -order, -order+1, ..., 0, ..., +order will be used.\r\n     * @param t Expected to be in [0, 1]\r\n     */\r\n    public drawCirclesToPoint(canvas: Canvas2D, order: number, t: TimeUnit): void {\r\n        const coefficients = this.getCoefficients(0, order);\r\n        if (coefficients.length < 2) {\r\n            return;\r\n        }\r\n\r\n        const point: Point = { x: 0, y: 0 };\r\n\r\n        for (const coefficient of coefficients) {\r\n            if (coefficient.n !== 0 && coefficient.n !== 1) {\r\n                canvas.drawCircle(point, coefficient.magnitude);\r\n            }\r\n            applyCoefficient(point, coefficient, t);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes the partial curve between 0 and t in the given order.\r\n     * The partial curve serves as cache and is as reused as possible.\r\n     * Returns the index of the 't' point in the partial curve.\r\n     * If this index is not an integer, it means an interpolation should be performed.\r\n     */\r\n    private computePartialCurve(order: number, t: TimeUnit): number {\r\n        order = Math.floor(order);\r\n\r\n        if (order < this.partialCurveOrder) {\r\n            // Existing points are computed with too high order. Restart from scratch.\r\n            this.resetCurve();\r\n        } else if (order > this.partialCurveOrder) {\r\n            // Existing points are computed with too low order. Complete existing points with missing orders.\r\n            const missingCoefficients = this.getCoefficients(this.partialCurveOrder + 1, order);\r\n\r\n            for (let i = 0; i < this.partialCurve.length; i++) {\r\n                const localT = i * this.curveStepSize;\r\n                applyCoefficientsArray(this.partialCurve[i], missingCoefficients, localT);\r\n            }\r\n        }\r\n\r\n        // Compute new points if needed\r\n        const currentPointIndex = t / this.curveStepSize;\r\n        const nextPointIndex = Math.ceil(currentPointIndex);\r\n\r\n        const neededCoefficients = this.getCoefficients(0, order);\r\n        for (let i = this.partialCurve.length; i <= nextPointIndex + 1; i++) {\r\n            const point: Point = { x: 0, y: 0 };\r\n            applyCoefficientsArray(point, neededCoefficients, i * this.curveStepSize);\r\n            this.partialCurve.push(point);\r\n        }\r\n\r\n        this.partialCurveOrder = order;\r\n        return currentPointIndex;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of coefficients containing, in that order:\r\n     * if orderFrom > 0: orderFrom, -orderFrom, orderFrom+1, -(orderFrom+1), ..., orderTo, -orderTo\r\n     * if orderFrom == 0: 0, 1, -1, ... orderTo, -orderTo\r\n     * If orderFrom > orderTo, or if one of the parameters is out of range, only returns the valid coefficients.\r\n     */\r\n    private getCoefficients(orderFrom: number, orderTo: number): IFourierCoefficient[] {\r\n        orderFrom = Math.min(orderFrom, orderTo);\r\n\r\n        const firstIndex = Math.max(0, 2 * orderFrom - 1);\r\n        const lastIndex = Math.min(this.coefficients.length, 2 * orderTo + 1);\r\n\r\n        return this.coefficients.slice(firstIndex, lastIndex);\r\n    }\r\n}\r\n\r\nexport {\r\n    IFourierCoefficient,\r\n    FourierSeries,\r\n};\r\n","import * as Log from \"./log\";\r\nimport { Point } from \"./point\";\r\nimport { StopWatch } from \"./stopwatch\";\r\n\r\n/* Enum values must match the values of the controls */\r\nenum EPreset {\r\n    ARLEQUIN = \"arlequin\",\r\n    BULL = \"bull\",\r\n    CAMEL = \"camel\",\r\n    DOG = \"dog\",\r\n    DOVE = \"dove\",\r\n    FLAMINGO = \"flamingo\",\r\n    HORSE = \"horse\",\r\n    MOUSE = \"mouse\",\r\n    WOMAN1 = \"woman1\",\r\n    WOMAN2 = \"woman2\",\r\n}\r\n\r\nconst PRESET_SIZE = 512; // a preset should be dimensionned for a 512 x 512 canvas\r\n\r\n/**\r\n * Class for retrieving on demand the preset drawings with AJAX requests.\r\n * Tries to minimize the request by using a memory cache.\r\n */\r\nclass Presets {\r\n    public static getPreset(preset: EPreset, wantedSize: number[], callback: (array: Point[]) => any): void {\r\n        const stopwatch = new StopWatch();\r\n        let fromCache = false;\r\n\r\n        function safelyCallCallback(points: Point[]): void {\r\n            const scaling = Math.min(wantedSize[0] / PRESET_SIZE, wantedSize[1] / PRESET_SIZE);\r\n            const offsetX = 0.5 * (wantedSize[0] - PRESET_SIZE * scaling);\r\n            const offsetY = 0.5 * (wantedSize[1] - PRESET_SIZE * scaling);\r\n\r\n            /* Create a deep copy to keep the cache clean */\r\n            const copy: Point[] = [];\r\n            for (const point of points) {\r\n                copy.push({\r\n                    x: point.x * scaling + offsetX,\r\n                    y: point.y * scaling + offsetY,\r\n                });\r\n            }\r\n\r\n            if (fromCache) {\r\n                Log.message(`Retrieved preset '${preset}' from cache in ${stopwatch.milliseconds} ms`);\r\n            } else {\r\n                Log.message(`Downloaded preset '${preset}' in ${stopwatch.milliseconds} ms.`);\r\n            }\r\n\r\n            callback(copy);\r\n        }\r\n\r\n        if (typeof Presets.cache === \"undefined\") {\r\n            Presets.cache = {};\r\n        } else if (typeof Presets.cache[preset] !== \"undefined\") {\r\n            fromCache = true;\r\n            safelyCallCallback(Presets.cache[preset]);\r\n            return;\r\n        }\r\n\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.addEventListener(\"readystatechange\", () => {\r\n            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\r\n                const retrievedArray = Presets.tryParsePointsArray(xhr.responseText);\r\n\r\n                if (retrievedArray !== null) {\r\n                    Presets.cache[preset] = retrievedArray;\r\n                    safelyCallCallback(Presets.cache[preset]);\r\n                }\r\n            }\r\n        });\r\n\r\n        xhr.open(\"GET\", `resources/${preset}.txt`);\r\n        xhr.send();\r\n    }\r\n\r\n    private static cache: {\r\n        [propName: string]: Point[];\r\n    };\r\n\r\n    private static tryParsePointsArray(text: string): Point[] | null {\r\n        if (!text) {\r\n            return null;\r\n        }\r\n\r\n        const stopwatch = new StopWatch();\r\n\r\n        const points: Point[] = [];\r\n\r\n        const lines: string[] = text.split(\"\\n\");\r\n        for (const line of lines) {\r\n            const partial = line.split(\" \");\r\n            if (partial.length !== 2) {\r\n                return null;\r\n            }\r\n\r\n            points.push({\r\n                x: +partial[0],\r\n                y: +partial[1],\r\n            });\r\n        }\r\n\r\n        if (points.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        Log.message(`Parsed preset in ${stopwatch.milliseconds} ms.`);\r\n        return points;\r\n    }\r\n}\r\n\r\nexport {\r\n    EPreset,\r\n    Presets,\r\n};\r\n","import { Canvas2D } from \"./canvas-2d\";\r\nimport { Point } from \"./point\";\r\n\r\ndeclare const Canvas: any;\r\ntype Callback = (isValid: boolean) => any;\r\n\r\nlet currentPoints: Point[] = [];\r\nlet isRecordingUserInput = false;\r\nconst finishedAcquisitionCallbacks: Callback[] = [];\r\n\r\nfunction getMousePosition(): Point {\r\n    const canvasSize: number[] = Canvas.getSize();\r\n    const mousePosition: number[] = Canvas.getMousePosition();\r\n    return {\r\n        x: canvasSize[0] * mousePosition[0],\r\n        y: canvasSize[1] * mousePosition[1],\r\n    };\r\n}\r\n\r\nCanvas.Observers.mouseDown.push(() => {\r\n    isRecordingUserInput = true;\r\n    const currentPosition = getMousePosition();\r\n    currentPoints = [currentPosition];\r\n});\r\n\r\nCanvas.Observers.mouseUp.push(() => {\r\n    if (isRecordingUserInput) {\r\n        isRecordingUserInput = false;\r\n\r\n        for (const callback of finishedAcquisitionCallbacks) {\r\n            callback(currentPoints.length >= 2);\r\n        }\r\n    }\r\n});\r\n\r\nCanvas.Observers.mouseMove.push(() => {\r\n    if (isRecordingUserInput) {\r\n        const currentPosition = getMousePosition();\r\n        const isPointFarEnough = Point.distance(currentPoints[currentPoints.length - 1], currentPosition) > 2;\r\n        if (isPointFarEnough) {\r\n            currentPoints.push(currentPosition);\r\n        }\r\n    }\r\n});\r\n\r\nfunction isRecording(): boolean {\r\n    return isRecordingUserInput;\r\n}\r\n\r\nfunction drawCurrentPath(canvas: Canvas2D): void {\r\n    canvas.startLine();\r\n\r\n    for (const point of currentPoints) {\r\n        canvas.addPointToLine(point);\r\n    }\r\n\r\n    canvas.endLine();\r\n}\r\n\r\nexport {\r\n    drawCurrentPath,\r\n    finishedAcquisitionCallbacks,\r\n    isRecording,\r\n    currentPoints as recordedPath,\r\n};\r\n"],"sourceRoot":""}